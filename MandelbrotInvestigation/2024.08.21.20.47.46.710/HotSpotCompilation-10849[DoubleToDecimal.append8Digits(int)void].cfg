begin_compilation
  name " HotSpotCompilation-10849[jdk.internal.math.DoubleToDecimal.append8Digits(int)]"
  method "HotSpotCompilation-10849[jdk.internal.math.DoubleToDecimal.append8Digits(int)]"
  date 1724269730696
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a524 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a524  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# jdk.internal.math.DoubleToDecimal
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?3 v528 v527 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v527 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a524 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a524 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# byte[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: DoubleToDecimal.bytes
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 1]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: n# byte[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v527 
lastLocationAccess: - 
=== Succesors ===
next: i525 
=== Usages ===
v537 v529 v530 v531 v532 v533 v534 v535 v536 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v527 lastLocationAccess: - #next: i525  <|@  <|@
f <@~|@floating>@ <|@
tid i2 <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?3 i38 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?3 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_0
code: ResolvedJavaMethodBytecode<DoubleToDecimal.append8Digits(int)>
localsSize: 5
locksSize: 0
sourceFile: DoubleToDecimal.java
sourceLine: 484
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 i2 
=== Succesors ===
=== Usages ===
v507 i525 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 i2  <|@  <|@
f <@~|@floating>@ <|@
tid v529 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a524 
=== Succesors ===
=== Usages ===
i525 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a524  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i525 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-88587|0xfffffffffffea5f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?3 
guard: - 
address: v529 
lastLocationAccess: - 
=== Succesors ===
next: i526 
=== Usages ===
v350 v361 v372 v383 v394 v405 v416 v427 
=== Predecessor ===
a524 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?3 guard: - address: v529 lastLocationAccess: - #next: i526  <|@  <|@
f <@~|@floating>@ <|@
tid v528 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
i526 v344 v359 v370 v381 v392 v403 v414 v425 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i526 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 6]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
=== Succesors ===
next: v454 
=== Usages ===
i74 i329 i330 i331 i332 i333 i334 i336 
=== Predecessor ===
i525 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - #next: v454  <|@  <|@
f <@~|@floating>@ <|@
tid i30 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i279 i189 i38 i249 i130 i70 i74 i159 i100 i219 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i74 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i30 
=== Succesors ===
=== Usages ===
v344 v350 j436 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid v350 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i74 
y: i525 
=== Succesors ===
=== Usages ===
v454 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i74 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v454 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v350 
=== Succesors ===
trueSuccessor: v451 
falseSuccessor: v453 
=== Usages ===
=== Predecessor ===
i526 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v350 #trueSuccessor: v451 #falseSuccessor: v453  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v451 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v458 
=== Usages ===
v358 
=== Predecessor ===
v454 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v458  <|@  <|@
f <@~|@floating>@ <|@
tid i119 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i329 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i329 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i119 
=== Succesors ===
=== Usages ===
v359 v361 j437 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i119  <|@  <|@
f <@~|@floating>@ <|@
tid v361 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i329 
y: i525 
=== Succesors ===
=== Usages ===
v458 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i329 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v458 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v361 
=== Succesors ===
trueSuccessor: v455 
falseSuccessor: v457 
=== Usages ===
=== Predecessor ===
v451 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v361 #trueSuccessor: v455 #falseSuccessor: v457  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v455 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v462 
=== Usages ===
v369 
=== Predecessor ===
v458 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v462  <|@  <|@
f <@~|@floating>@ <|@
tid i34 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
rawvalue: 3
stableDimension: 0
stamp: i32 [3]
stampKind: i32
value: int[3|0x3]
=== Inputs ===
=== Succesors ===
=== Usages ===
i278 i69 i99 i129 i330 i158 i188 i218 i248 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i330 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i34 
=== Succesors ===
=== Usages ===
v370 v372 j438 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid v372 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i330 
y: i525 
=== Succesors ===
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i330 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v462 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v372 
=== Succesors ===
trueSuccessor: v459 
falseSuccessor: v461 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v372 #trueSuccessor: v459 #falseSuccessor: v461  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v459 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v466 
=== Usages ===
v380 
=== Predecessor ===
v462 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v466  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 4
stableDimension: 0
stamp: i32 [4]
stampKind: i32
value: int[4|0x4]
=== Inputs ===
=== Succesors ===
=== Usages ===
i331 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i331 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i178 
=== Succesors ===
=== Usages ===
v381 v383 j439 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i178  <|@  <|@
f <@~|@floating>@ <|@
tid v383 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i331 
y: i525 
=== Succesors ===
=== Usages ===
v466 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i331 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v466 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v383 
=== Succesors ===
trueSuccessor: v463 
falseSuccessor: v465 
=== Usages ===
=== Predecessor ===
v459 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v383 #trueSuccessor: v463 #falseSuccessor: v465  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v463 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v470 
=== Usages ===
v391 
=== Predecessor ===
v466 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v470  <|@  <|@
f <@~|@floating>@ <|@
tid i208 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i332 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i332 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i208 
=== Succesors ===
=== Usages ===
v392 v394 j440 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i208  <|@  <|@
f <@~|@floating>@ <|@
tid v394 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i332 
y: i525 
=== Succesors ===
=== Usages ===
v470 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i332 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v470 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v394 
=== Succesors ===
trueSuccessor: v467 
falseSuccessor: v469 
=== Usages ===
=== Predecessor ===
v463 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v394 #trueSuccessor: v467 #falseSuccessor: v469  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v467 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v474 
=== Usages ===
v402 
=== Predecessor ===
v470 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v474  <|@  <|@
f <@~|@floating>@ <|@
tid i238 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 6
stableDimension: 0
stamp: i32 [6]
stampKind: i32
value: int[6|0x6]
=== Inputs ===
=== Succesors ===
=== Usages ===
i333 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i333 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i238 
=== Succesors ===
=== Usages ===
v403 v405 j441 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i238  <|@  <|@
f <@~|@floating>@ <|@
tid v405 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i333 
y: i525 
=== Succesors ===
=== Usages ===
v474 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i333 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v474 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v405 
=== Succesors ===
trueSuccessor: v471 
falseSuccessor: v473 
=== Usages ===
=== Predecessor ===
v467 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v405 #trueSuccessor: v471 #falseSuccessor: v473  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v471 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v478 
=== Usages ===
v413 
=== Predecessor ===
v474 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v478  <|@  <|@
f <@~|@floating>@ <|@
tid i268 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i334 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i268 
=== Succesors ===
=== Usages ===
v414 v416 j442 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i268  <|@  <|@
f <@~|@floating>@ <|@
tid v416 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i334 
y: i525 
=== Succesors ===
=== Usages ===
v478 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i334 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v478 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v416 
=== Succesors ===
trueSuccessor: v475 
falseSuccessor: v477 
=== Usages ===
=== Predecessor ===
v471 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v416 #trueSuccessor: v475 #falseSuccessor: v477  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v475 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v482 
=== Usages ===
v424 
=== Predecessor ===
v478 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v482  <|@  <|@
f <@~|@floating>@ <|@
tid i335 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: 8
stableDimension: 0
stamp: i32 [8]
stampKind: i32
value: int[8|0x8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i336 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i335 
=== Succesors ===
=== Usages ===
v425 v427 j443 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i335  <|@  <|@
f <@~|@floating>@ <|@
tid v427 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i336 
y: i525 
=== Succesors ===
=== Usages ===
v482 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i336 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v482 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v427 
=== Succesors ===
trueSuccessor: v479 
falseSuccessor: v481 
=== Usages ===
=== Predecessor ===
v475 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v427 #trueSuccessor: v479 #falseSuccessor: v481  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v479 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v344 
=== Usages ===
v435 
=== Predecessor ===
v482 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v344  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v344 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i74 
stateAfter: - 
=== Succesors ===
next: v358 
=== Usages ===
=== Predecessor ===
v479 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i74 stateAfter: - #next: v358  <|@  <|@
f <@~|@floating>@ <|@
tid j436 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i74 
=== Succesors ===
=== Usages ===
v530 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i74  <|@  <|@
f <@~|@floating>@ <|@
tid v530 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j436 
index: a524 
=== Succesors ===
=== Usages ===
v358 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j436 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i38 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 2]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
stamp: i32
=== Inputs ===
x: i2 
y: i30 
=== Succesors ===
=== Usages ===
j39 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i2 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid j39 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 3]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i38 
=== Succesors ===
=== Usages ===
j40 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i38  <|@  <|@
f <@~|@floating>@ <|@
tid i23 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 23]
rawvalue: 28
stableDimension: 0
stamp: i32 [28]
stampKind: i32
value: int[28|0x1c]
=== Inputs ===
=== Succesors ===
=== Usages ===
i274 j40 i65 i95 i125 i154 i184 i214 i244 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j40 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 6]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
stamp: i64 [-576460752303423488 - 576460752034988032] bits:x...x0000000000000000000000000000
=== Inputs ===
x: j39 
y: i23 
=== Succesors ===
=== Usages ===
j42 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: j39 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid j41 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 7]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
rawvalue: 193428131138340668
stableDimension: 0
stamp: i64 [193428131138340668]
stampKind: i64
value: long[193428131138340668|0x2af31dc4611873c]
=== Inputs ===
=== Succesors ===
=== Usages ===
j42 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j42 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.lang.Math.multiplyHigh(long, long) [bci: -1]
at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
stamp: i64 [-6044629098073146 - 6044629095258396]
=== Inputs ===
x: j40 
y: j41 
=== Succesors ===
=== Usages ===
j44 
=== Predecessor ===
- >@ <|@
instruction <@*H|@jdk.graal.compiler.nodes.calc.IntegerMulHighNode>@ x: j40 y: j41  <|@  <|@
f <@~|@floating>@ <|@
tid i43 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 13]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
rawvalue: 20
stableDimension: 0
stamp: i32 [20]
stampKind: i32
value: int[20|0x14]
=== Inputs ===
=== Succesors ===
=== Usages ===
j44 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j44 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 15]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
stamp: i64 [0 - 17592186044415] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
x: j42 
y: i43 
=== Succesors ===
=== Usages ===
i45 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: j42 y: i43  <|@  <|@
f <@~|@floating>@ <|@
tid i45 <|@
d <@d|@=== Debug Properties ===
inputBits: 64
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 16]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
resultBits: 32
stamp: i32
=== Inputs ===
value: j44 
=== Succesors ===
=== Usages ===
i47 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: j44  <|@  <|@
f <@~|@floating>@ <|@
tid i46 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
rawvalue: -1
stableDimension: 0
stamp: i32 [-1]
stampKind: i32
value: int[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
i47 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i47 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
stamp: i32
=== Inputs ===
x: i45 
y: i46 
=== Succesors ===
=== Usages ===
i70 i69 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i45 y: i46  <|@  <|@
f <@~|@floating>@ <|@
tid i69 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483640] bits:x...x000
=== Inputs ===
x: i47 
y: i34 
=== Succesors ===
=== Usages ===
i71 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i47 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i70 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483646] bits:x...x0
=== Inputs ===
x: i47 
y: i30 
=== Succesors ===
=== Usages ===
i71 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i47 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i71 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483646] bits:x...x0
=== Inputs ===
x: i69 
y: i70 
=== Succesors ===
=== Usages ===
i65 i66 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i69 y: i70  <|@  <|@
f <@~|@floating>@ <|@
tid i65 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i71 
y: i23 
=== Succesors ===
=== Usages ===
i77 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i71 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i54 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 15]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: 48
stableDimension: 0
stamp: i32 [48]
stampKind: i32
value: int[48|0x30]
=== Inputs ===
=== Succesors ===
=== Usages ===
i286 i77 i107 i137 i166 i196 i226 i256 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i77 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i65 
y: i54 
=== Succesors ===
=== Usages ===
i357 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i65 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i357 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i77 
=== Succesors ===
=== Usages ===
v358 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i77  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v358 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v451 
address: v530 
lastLocationAccess: - 
value: i357 
stateAfter: - 
=== Succesors ===
next: v359 
=== Usages ===
=== Predecessor ===
v344 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v451 address: v530 lastLocationAccess: - value: i357 stateAfter: - #next: v359  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v359 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i329 
stateAfter: - 
=== Succesors ===
next: v369 
=== Usages ===
=== Predecessor ===
v358 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i329 stateAfter: - #next: v369  <|@  <|@
f <@~|@floating>@ <|@
tid j437 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i329 
=== Succesors ===
=== Usages ===
v531 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i329  <|@  <|@
f <@~|@floating>@ <|@
tid v531 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j437 
index: a524 
=== Succesors ===
=== Usages ===
v369 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j437 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i28 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 31]
rawvalue: 268435455
stableDimension: 0
stamp: i32 [268435455]
stampKind: i32
value: int[268435455|0xfffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
i245 i66 i96 i126 i155 i185 i215 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i66 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435454] bits:0000xxxxxxxxxxxxxxxxxxxxxxxxxxx0
=== Inputs ===
x: i71 
y: i28 
=== Succesors ===
=== Usages ===
i100 i99 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i71 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i99 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483632] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxx0000
=== Inputs ===
x: i66 
y: i34 
=== Succesors ===
=== Usages ===
i101 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i66 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i100 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870908] bits:000xxxxxxxxxxxxxxxxxxxxxxxxxxx00
=== Inputs ===
x: i66 
y: i30 
=== Succesors ===
=== Usages ===
i101 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i66 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i101 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483644] bits:x...x00
=== Inputs ===
x: i99 
y: i100 
=== Succesors ===
=== Usages ===
i95 i96 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i99 y: i100  <|@  <|@
f <@~|@floating>@ <|@
tid i95 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i101 
y: i23 
=== Succesors ===
=== Usages ===
i107 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i101 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i107 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i95 
y: i54 
=== Succesors ===
=== Usages ===
i368 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i95 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i368 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i107 
=== Succesors ===
=== Usages ===
v369 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i107  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v369 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v455 
address: v531 
lastLocationAccess: - 
value: i368 
stateAfter: - 
=== Succesors ===
next: v370 
=== Usages ===
=== Predecessor ===
v359 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v455 address: v531 lastLocationAccess: - value: i368 stateAfter: - #next: v370  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v370 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i330 
stateAfter: - 
=== Succesors ===
next: v380 
=== Usages ===
=== Predecessor ===
v369 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i330 stateAfter: - #next: v380  <|@  <|@
f <@~|@floating>@ <|@
tid j438 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i330 
=== Succesors ===
=== Usages ===
v532 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i330  <|@  <|@
f <@~|@floating>@ <|@
tid v532 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j438 
index: a524 
=== Succesors ===
=== Usages ===
v380 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j438 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i96 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435452] bits:0000xxxxxxxxxxxxxxxxxxxxxxxxxx00
=== Inputs ===
x: i101 
y: i28 
=== Succesors ===
=== Usages ===
i130 i129 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i101 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i129 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483616] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxx00000
=== Inputs ===
x: i96 
y: i34 
=== Succesors ===
=== Usages ===
i131 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i96 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i130 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870904] bits:000xxxxxxxxxxxxxxxxxxxxxxxxxx000
=== Inputs ===
x: i96 
y: i30 
=== Succesors ===
=== Usages ===
i131 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i96 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i131 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483640] bits:x...x000
=== Inputs ===
x: i129 
y: i130 
=== Succesors ===
=== Usages ===
i125 i126 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i129 y: i130  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i131 
y: i23 
=== Succesors ===
=== Usages ===
i137 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i131 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i137 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i125 
y: i54 
=== Succesors ===
=== Usages ===
i379 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i125 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i379 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i137 
=== Succesors ===
=== Usages ===
v380 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i137  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v380 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v459 
address: v532 
lastLocationAccess: - 
value: i379 
stateAfter: - 
=== Succesors ===
next: v381 
=== Usages ===
=== Predecessor ===
v370 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v459 address: v532 lastLocationAccess: - value: i379 stateAfter: - #next: v381  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v381 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i331 
stateAfter: - 
=== Succesors ===
next: v391 
=== Usages ===
=== Predecessor ===
v380 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i331 stateAfter: - #next: v391  <|@  <|@
f <@~|@floating>@ <|@
tid j439 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i331 
=== Succesors ===
=== Usages ===
v533 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i331  <|@  <|@
f <@~|@floating>@ <|@
tid v533 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j439 
index: a524 
=== Succesors ===
=== Usages ===
v391 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j439 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i126 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435448] bits:0000xxxxxxxxxxxxxxxxxxxxxxxxx000
=== Inputs ===
x: i131 
y: i28 
=== Succesors ===
=== Usages ===
i159 i158 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i131 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i158 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483584] bits:0xxxxxxxxxxxxxxxxxxxxxxxxx000000
=== Inputs ===
x: i126 
y: i34 
=== Succesors ===
=== Usages ===
i160 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i126 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i159 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870896] bits:000xxxxxxxxxxxxxxxxxxxxxxxxx0000
=== Inputs ===
x: i126 
y: i30 
=== Succesors ===
=== Usages ===
i160 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i126 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i160 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483632] bits:x...x0000
=== Inputs ===
x: i158 
y: i159 
=== Succesors ===
=== Usages ===
i154 i155 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i158 y: i159  <|@  <|@
f <@~|@floating>@ <|@
tid i154 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i160 
y: i23 
=== Succesors ===
=== Usages ===
i166 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i160 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i166 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i154 
y: i54 
=== Succesors ===
=== Usages ===
i390 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i154 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i390 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i166 
=== Succesors ===
=== Usages ===
v391 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i166  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v391 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v463 
address: v533 
lastLocationAccess: - 
value: i390 
stateAfter: - 
=== Succesors ===
next: v392 
=== Usages ===
=== Predecessor ===
v381 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v463 address: v533 lastLocationAccess: - value: i390 stateAfter: - #next: v392  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v392 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i332 
stateAfter: - 
=== Succesors ===
next: v402 
=== Usages ===
=== Predecessor ===
v391 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i332 stateAfter: - #next: v402  <|@  <|@
f <@~|@floating>@ <|@
tid j440 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i332 
=== Succesors ===
=== Usages ===
v534 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i332  <|@  <|@
f <@~|@floating>@ <|@
tid v534 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j440 
index: a524 
=== Succesors ===
=== Usages ===
v402 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j440 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i155 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435440] bits:0000xxxxxxxxxxxxxxxxxxxxxxxx0000
=== Inputs ===
x: i160 
y: i28 
=== Succesors ===
=== Usages ===
i189 i188 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i160 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i188 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483520] bits:0xxxxxxxxxxxxxxxxxxxxxxxx0000000
=== Inputs ===
x: i155 
y: i34 
=== Succesors ===
=== Usages ===
i190 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i155 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i189 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870880] bits:000xxxxxxxxxxxxxxxxxxxxxxxx00000
=== Inputs ===
x: i155 
y: i30 
=== Succesors ===
=== Usages ===
i190 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i155 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i190 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i188 
y: i189 
=== Succesors ===
=== Usages ===
i184 i185 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i188 y: i189  <|@  <|@
f <@~|@floating>@ <|@
tid i184 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i190 
y: i23 
=== Succesors ===
=== Usages ===
i196 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i190 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i196 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i184 
y: i54 
=== Succesors ===
=== Usages ===
i401 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i184 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i401 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i196 
=== Succesors ===
=== Usages ===
v402 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i196  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v402 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v467 
address: v534 
lastLocationAccess: - 
value: i401 
stateAfter: - 
=== Succesors ===
next: v403 
=== Usages ===
=== Predecessor ===
v392 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v467 address: v534 lastLocationAccess: - value: i401 stateAfter: - #next: v403  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v403 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i333 
stateAfter: - 
=== Succesors ===
next: v413 
=== Usages ===
=== Predecessor ===
v402 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i333 stateAfter: - #next: v413  <|@  <|@
f <@~|@floating>@ <|@
tid j441 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i333 
=== Succesors ===
=== Usages ===
v535 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i333  <|@  <|@
f <@~|@floating>@ <|@
tid v535 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j441 
index: a524 
=== Succesors ===
=== Usages ===
v413 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j441 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i185 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435424] bits:0000xxxxxxxxxxxxxxxxxxxxxxx00000
=== Inputs ===
x: i190 
y: i28 
=== Succesors ===
=== Usages ===
i219 i218 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i190 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i218 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483392] bits:0xxxxxxxxxxxxxxxxxxxxxxx00000000
=== Inputs ===
x: i185 
y: i34 
=== Succesors ===
=== Usages ===
i220 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i185 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i219 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870848] bits:000xxxxxxxxxxxxxxxxxxxxxxx000000
=== Inputs ===
x: i185 
y: i30 
=== Succesors ===
=== Usages ===
i220 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i185 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i220 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483584] bits:x...x000000
=== Inputs ===
x: i218 
y: i219 
=== Succesors ===
=== Usages ===
i214 i215 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i218 y: i219  <|@  <|@
f <@~|@floating>@ <|@
tid i214 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i220 
y: i23 
=== Succesors ===
=== Usages ===
i226 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i220 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i226 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i214 
y: i54 
=== Succesors ===
=== Usages ===
i412 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i214 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i412 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i226 
=== Succesors ===
=== Usages ===
v413 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i226  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v413 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v471 
address: v535 
lastLocationAccess: - 
value: i412 
stateAfter: - 
=== Succesors ===
next: v414 
=== Usages ===
=== Predecessor ===
v403 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v471 address: v535 lastLocationAccess: - value: i412 stateAfter: - #next: v414  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v414 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i334 
stateAfter: - 
=== Succesors ===
next: v424 
=== Usages ===
=== Predecessor ===
v413 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i334 stateAfter: - #next: v424  <|@  <|@
f <@~|@floating>@ <|@
tid j442 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i334 
=== Succesors ===
=== Usages ===
v536 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i334  <|@  <|@
f <@~|@floating>@ <|@
tid v536 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j442 
index: a524 
=== Succesors ===
=== Usages ===
v424 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j442 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i215 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435392] bits:0000xxxxxxxxxxxxxxxxxxxxxx000000
=== Inputs ===
x: i220 
y: i28 
=== Succesors ===
=== Usages ===
i249 i248 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i220 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i248 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483136] bits:0xxxxxxxxxxxxxxxxxxxxxx000000000
=== Inputs ===
x: i215 
y: i34 
=== Succesors ===
=== Usages ===
i250 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i215 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i249 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870784] bits:000xxxxxxxxxxxxxxxxxxxxxx0000000
=== Inputs ===
x: i215 
y: i30 
=== Succesors ===
=== Usages ===
i250 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i215 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i250 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483520] bits:x...x0000000
=== Inputs ===
x: i248 
y: i249 
=== Succesors ===
=== Usages ===
i244 i245 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i248 y: i249  <|@  <|@
f <@~|@floating>@ <|@
tid i244 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i250 
y: i23 
=== Succesors ===
=== Usages ===
i256 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i250 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i256 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i244 
y: i54 
=== Succesors ===
=== Usages ===
i423 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i244 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i423 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i256 
=== Succesors ===
=== Usages ===
v424 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i256  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v424 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v475 
address: v536 
lastLocationAccess: - 
value: i423 
stateAfter: - 
=== Succesors ===
next: v425 
=== Usages ===
=== Predecessor ===
v414 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v475 address: v536 lastLocationAccess: - value: i423 stateAfter: - #next: v425  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v425 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i336 
stateAfter: - 
=== Succesors ===
next: v435 
=== Usages ===
=== Predecessor ===
v424 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i336 stateAfter: - #next: v435  <|@  <|@
f <@~|@floating>@ <|@
tid j443 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i336 
=== Succesors ===
=== Usages ===
v537 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i336  <|@  <|@
f <@~|@floating>@ <|@
tid v537 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j443 
index: a524 
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j443 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i245 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435328] bits:0000xxxxxxxxxxxxxxxxxxxxx0000000
=== Inputs ===
x: i250 
y: i28 
=== Succesors ===
=== Usages ===
i279 i278 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i250 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i278 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147482624] bits:0xxxxxxxxxxxxxxxxxxxxx0000000000
=== Inputs ===
x: i245 
y: i34 
=== Succesors ===
=== Usages ===
i280 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i245 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i279 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870656] bits:000xxxxxxxxxxxxxxxxxxxxx00000000
=== Inputs ===
x: i245 
y: i30 
=== Succesors ===
=== Usages ===
i280 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i245 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i280 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483392] bits:x...x00000000
=== Inputs ===
x: i278 
y: i279 
=== Succesors ===
=== Usages ===
i274 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i278 y: i279  <|@  <|@
f <@~|@floating>@ <|@
tid i274 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i280 
y: i23 
=== Succesors ===
=== Usages ===
i286 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i280 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i286 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i274 
y: i54 
=== Succesors ===
=== Usages ===
i434 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i274 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i434 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i286 
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i286  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v435 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v479 
address: v537 
lastLocationAccess: - 
value: i434 
stateAfter: - 
=== Succesors ===
next: v33 
=== Usages ===
=== Predecessor ===
v425 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v479 address: v537 lastLocationAccess: - value: i434 stateAfter: - #next: v33  <|@  <|@
f <@*|@fixed>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:490) [bci: 41]
stamp: void
=== Inputs ===
memoryMap: - 
result: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v435 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: -  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v481 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v522 
=== Usages ===
=== Predecessor ===
v482 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v522  <|@  <|@
f <@~|@floating>@ <|@
tid i523 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -109595
stableDimension: 0
stamp: i32 [-109595]
stampKind: i32
value: int[-109595|0xfffffffffffe53e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v522 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v481 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v477 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v520 
=== Usages ===
=== Predecessor ===
v478 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v520  <|@  <|@
f <@~|@floating>@ <|@
tid i521 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -106779
stableDimension: 0
stamp: i32 [-106779]
stampKind: i32
value: int[-106779|0xfffffffffffe5ee5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v520 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v477 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v473 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v518 
=== Usages ===
=== Predecessor ===
v474 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v518  <|@  <|@
f <@~|@floating>@ <|@
tid i519 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -103963
stableDimension: 0
stamp: i32 [-103963]
stampKind: i32
value: int[-103963|0xfffffffffffe69e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v518 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v473 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v469 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v516 
=== Usages ===
=== Predecessor ===
v470 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v516  <|@  <|@
f <@~|@floating>@ <|@
tid i517 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -101147
stableDimension: 0
stamp: i32 [-101147]
stampKind: i32
value: int[-101147|0xfffffffffffe74e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v516 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v469 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v465 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v514 
=== Usages ===
=== Predecessor ===
v466 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v514  <|@  <|@
f <@~|@floating>@ <|@
tid i515 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -98331
stableDimension: 0
stamp: i32 [-98331]
stampKind: i32
value: int[-98331|0xfffffffffffe7fe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v514 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v465 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v461 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v512 
=== Usages ===
=== Predecessor ===
v462 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v512  <|@  <|@
f <@~|@floating>@ <|@
tid i513 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -95515
stableDimension: 0
stamp: i32 [-95515]
stampKind: i32
value: int[-95515|0xfffffffffffe8ae5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v512 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v461 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v457 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v510 
=== Usages ===
=== Predecessor ===
v458 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v510  <|@  <|@
f <@~|@floating>@ <|@
tid i511 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -92699
stableDimension: 0
stamp: i32 [-92699]
stampKind: i32
value: int[-92699|0xfffffffffffe95e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v510 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v457 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v453 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v508 
=== Usages ===
=== Predecessor ===
v454 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v508  <|@  <|@
f <@~|@floating>@ <|@
tid i509 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -89883
stableDimension: 0
stamp: i32 [-89883]
stampKind: i32
value: int[-89883|0xfffffffffffea0e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v508 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v453 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i505 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [-109595 - -89883] bits:1...10xxxxxxxx11100101
valueDescription: i32
=== Inputs ===
merge: v501 
values: i509 i511 i513 i515 i517 i519 i521 i523 
=== Succesors ===
=== Usages ===
v507 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v501 values: i509 i511 i513 i515 i517 i519 i521 i523  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v501 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v508 v510 v512 v514 v516 v518 v520 v522 
=== Succesors ===
next: v507 
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v508 v510 v512 v514 v516 v518 v520 v522 #next: v507  <|@  <|@
f <@~|@floating>@ <|@
tid j504 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v507 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v507 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
stateBefore: ?3 
actionAndReason: i505 
speculation: j504 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v501 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?3 actionAndReason: i505 speculation: j504  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-89883|0xfffffffffffea0e5]] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-95515|0xfffffffffffe8ae5]] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106779|0xfffffffffffe5ee5]] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5]] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-109595|0xfffffffffffe53e5]] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-101147|0xfffffffffffe74e5]] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5]] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-98331|0xfffffffffffe7fe5]] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr   -1  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a524 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a524  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
result v0|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# jdk.internal.math.DoubleToDecimal
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?3 v528 v527 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v527 <|@
result [v0|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a524 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a524 <|@
result v2|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# byte[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: DoubleToDecimal.bytes
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 1]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: n# byte[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v527 
lastLocationAccess: - 
=== Succesors ===
next: i525 
=== Usages ===
v537 v529 v530 v531 v532 v533 v534 v535 v536 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v527 lastLocationAccess: - #next: i525  <|@  <|@
f <@~|@floating>@ <|@
tid i2 <|@
result v1|DWORD <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?3 i38 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?3 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_0
code: ResolvedJavaMethodBytecode<DoubleToDecimal.append8Digits(int)>
localsSize: 5
locksSize: 0
sourceFile: DoubleToDecimal.java
sourceLine: 484
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 i2 
=== Succesors ===
=== Usages ===
v507 i525 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 i2  <|@  <|@
f <@~|@floating>@ <|@
tid v529 <|@
result [v2|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a524 
=== Succesors ===
=== Usages ===
i525 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a524  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i525 <|@
result v3|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-88587|0xfffffffffffea5f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?3 
guard: - 
address: v529 
lastLocationAccess: - 
=== Succesors ===
next: i526 
=== Usages ===
v350 v361 v372 v383 v394 v405 v416 v427 
=== Predecessor ===
a524 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?3 guard: - address: v529 lastLocationAccess: - #next: i526  <|@  <|@
f <@~|@floating>@ <|@
tid v528 <|@
result [v0|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
i526 v344 v359 v370 v381 v392 v403 v414 v425 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i526 <|@
result v4|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 6]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
=== Succesors ===
next: v454 
=== Usages ===
i74 i329 i330 i331 i332 i333 i334 i336 
=== Predecessor ===
i525 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - #next: v454  <|@  <|@
f <@~|@floating>@ <|@
tid i30 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i279 i189 i38 i249 i130 i70 i74 i159 i100 i219 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i74 <|@
result v5|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i30 
=== Succesors ===
=== Usages ===
v344 v350 j436 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid v350 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i74 
y: i525 
=== Succesors ===
=== Usages ===
v454 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i74 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v454 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v350 
=== Succesors ===
trueSuccessor: v451 
falseSuccessor: v453 
=== Usages ===
=== Predecessor ===
i526 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v350 #trueSuccessor: v451 #falseSuccessor: v453  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v451 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v458 
=== Usages ===
v358 
=== Predecessor ===
v454 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v458  <|@  <|@
f <@~|@floating>@ <|@
tid i119 <|@
result int[2|0x2] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i329 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i329 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i119 
=== Succesors ===
=== Usages ===
v359 v361 j437 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i119  <|@  <|@
f <@~|@floating>@ <|@
tid v361 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i329 
y: i525 
=== Succesors ===
=== Usages ===
v458 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i329 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v458 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v361 
=== Succesors ===
trueSuccessor: v455 
falseSuccessor: v457 
=== Usages ===
=== Predecessor ===
v451 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v361 #trueSuccessor: v455 #falseSuccessor: v457  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v455 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v462 
=== Usages ===
v369 
=== Predecessor ===
v458 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v462  <|@  <|@
f <@~|@floating>@ <|@
tid i34 <|@
result int[3|0x3] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
rawvalue: 3
stableDimension: 0
stamp: i32 [3]
stampKind: i32
value: int[3|0x3]
=== Inputs ===
=== Succesors ===
=== Usages ===
i278 i69 i99 i129 i330 i158 i188 i218 i248 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i330 <|@
result v7|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i34 
=== Succesors ===
=== Usages ===
v370 v372 j438 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid v372 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i330 
y: i525 
=== Succesors ===
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i330 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v462 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v372 
=== Succesors ===
trueSuccessor: v459 
falseSuccessor: v461 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v372 #trueSuccessor: v459 #falseSuccessor: v461  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v459 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v466 
=== Usages ===
v380 
=== Predecessor ===
v462 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v466  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
result int[4|0x4] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 4
stableDimension: 0
stamp: i32 [4]
stampKind: i32
value: int[4|0x4]
=== Inputs ===
=== Succesors ===
=== Usages ===
i331 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i331 <|@
result v8|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i178 
=== Succesors ===
=== Usages ===
v381 v383 j439 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i178  <|@  <|@
f <@~|@floating>@ <|@
tid v383 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i331 
y: i525 
=== Succesors ===
=== Usages ===
v466 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i331 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v466 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v383 
=== Succesors ===
trueSuccessor: v463 
falseSuccessor: v465 
=== Usages ===
=== Predecessor ===
v459 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v383 #trueSuccessor: v463 #falseSuccessor: v465  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v463 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v470 
=== Usages ===
v391 
=== Predecessor ===
v466 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v470  <|@  <|@
f <@~|@floating>@ <|@
tid i208 <|@
result int[5|0x5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i332 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i332 <|@
result v9|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i208 
=== Succesors ===
=== Usages ===
v392 v394 j440 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i208  <|@  <|@
f <@~|@floating>@ <|@
tid v394 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i332 
y: i525 
=== Succesors ===
=== Usages ===
v470 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i332 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v470 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v394 
=== Succesors ===
trueSuccessor: v467 
falseSuccessor: v469 
=== Usages ===
=== Predecessor ===
v463 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v394 #trueSuccessor: v467 #falseSuccessor: v469  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v467 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v474 
=== Usages ===
v402 
=== Predecessor ===
v470 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v474  <|@  <|@
f <@~|@floating>@ <|@
tid i238 <|@
result int[6|0x6] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 6
stableDimension: 0
stamp: i32 [6]
stampKind: i32
value: int[6|0x6]
=== Inputs ===
=== Succesors ===
=== Usages ===
i333 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i333 <|@
result v10|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i238 
=== Succesors ===
=== Usages ===
v403 v405 j441 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i238  <|@  <|@
f <@~|@floating>@ <|@
tid v405 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i333 
y: i525 
=== Succesors ===
=== Usages ===
v474 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i333 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v474 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v405 
=== Succesors ===
trueSuccessor: v471 
falseSuccessor: v473 
=== Usages ===
=== Predecessor ===
v467 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v405 #trueSuccessor: v471 #falseSuccessor: v473  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v471 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v478 
=== Usages ===
v413 
=== Predecessor ===
v474 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v478  <|@  <|@
f <@~|@floating>@ <|@
tid i268 <|@
result int[7|0x7] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:485) [bci: 35]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i334 <|@
result v11|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i268 
=== Succesors ===
=== Usages ===
v414 v416 j442 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i268  <|@  <|@
f <@~|@floating>@ <|@
tid v416 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i334 
y: i525 
=== Succesors ===
=== Usages ===
v478 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i334 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v478 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v416 
=== Succesors ===
trueSuccessor: v475 
falseSuccessor: v477 
=== Usages ===
=== Predecessor ===
v471 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v416 #trueSuccessor: v475 #falseSuccessor: v477  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v475 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v482 
=== Usages ===
v424 
=== Predecessor ===
v478 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v482  <|@  <|@
f <@~|@floating>@ <|@
tid i335 <|@
result int[8|0x8] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: 8
stableDimension: 0
stamp: i32 [8]
stampKind: i32
value: int[8|0x8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i336 <|@
result v12|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32
=== Inputs ===
x: i526 
y: i335 
=== Succesors ===
=== Usages ===
v425 v427 j443 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i526 y: i335  <|@  <|@
f <@~|@floating>@ <|@
tid v427 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i336 
y: i525 
=== Succesors ===
=== Usages ===
v482 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i336 y: i525  <|@  <|@
f <@*|@fixed>@ <|@
tid v482 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v427 
=== Succesors ===
trueSuccessor: v479 
falseSuccessor: v481 
=== Usages ===
=== Predecessor ===
v475 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v427 #trueSuccessor: v479 #falseSuccessor: v481  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v479 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v344 
=== Usages ===
v435 
=== Predecessor ===
v482 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v344  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v344 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i74 
stateAfter: - 
=== Succesors ===
next: v358 
=== Usages ===
=== Predecessor ===
v479 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i74 stateAfter: - #next: v358  <|@  <|@
f <@~|@floating>@ <|@
tid j436 <|@
result v5|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i74 
=== Succesors ===
=== Usages ===
v530 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i74  <|@  <|@
f <@~|@floating>@ <|@
tid v530 <|@
result [v5|DWORD + v2|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j436 
index: a524 
=== Succesors ===
=== Usages ===
v358 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j436 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i38 <|@
result v13|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 2]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
stamp: i32
=== Inputs ===
x: i2 
y: i30 
=== Succesors ===
=== Usages ===
j39 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i2 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid j39 <|@
result v14|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 3]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i38 
=== Succesors ===
=== Usages ===
j40 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i38  <|@  <|@
f <@~|@floating>@ <|@
tid i23 <|@
result int[28|0x1c] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 23]
rawvalue: 28
stableDimension: 0
stamp: i32 [28]
stampKind: i32
value: int[28|0x1c]
=== Inputs ===
=== Succesors ===
=== Usages ===
i274 j40 i65 i95 i125 i154 i184 i214 i244 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j40 <|@
result v15|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 6]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
stamp: i64 [-576460752303423488 - 576460752034988032] bits:x...x0000000000000000000000000000
=== Inputs ===
x: j39 
y: i23 
=== Succesors ===
=== Usages ===
j42 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: j39 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid j41 <|@
result v16|QWORD <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 7]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
rawvalue: 193428131138340668
stableDimension: 0
stamp: i64 [193428131138340668]
stampKind: i64
value: long[193428131138340668|0x2af31dc4611873c]
=== Inputs ===
=== Succesors ===
=== Usages ===
j42 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j42 <|@
result v17|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.lang.Math.multiplyHigh(long, long) [bci: -1]
at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 10]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
stamp: i64 [-6044629098073146 - 6044629095258396]
=== Inputs ===
x: j40 
y: j41 
=== Succesors ===
=== Usages ===
j44 
=== Predecessor ===
- >@ <|@
instruction <@*H|@jdk.graal.compiler.nodes.calc.IntegerMulHighNode>@ x: j40 y: j41  <|@  <|@
f <@~|@floating>@ <|@
tid i43 <|@
result int[20|0x14] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 13]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
rawvalue: 20
stableDimension: 0
stamp: i32 [20]
stampKind: i32
value: int[20|0x14]
=== Inputs ===
=== Succesors ===
=== Usages ===
j44 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j44 <|@
result v18|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 15]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
stamp: i64 [0 - 17592186044415] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
x: j42 
y: i43 
=== Succesors ===
=== Usages ===
i45 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: j42 y: i43  <|@  <|@
f <@~|@floating>@ <|@
tid i45 <|@
result v19|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 64
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 16]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
resultBits: 32
stamp: i32
=== Inputs ===
value: j44 
=== Succesors ===
=== Usages ===
i47 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: j44  <|@  <|@
f <@~|@floating>@ <|@
tid i46 <|@
result int[-1|0xffffffffffffffff] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
rawvalue: -1
stableDimension: 0
stamp: i32 [-1]
stampKind: i32
value: int[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
i47 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i47 <|@
result v20|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.y(DoubleToDecimal.java:511) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 2]
stamp: i32
=== Inputs ===
x: i45 
y: i46 
=== Succesors ===
=== Usages ===
i70 i69 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i45 y: i46  <|@  <|@
f <@~|@floating>@ <|@
tid i69 <|@
result v21|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483640] bits:x...x000
=== Inputs ===
x: i47 
y: i34 
=== Succesors ===
=== Usages ===
i71 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i47 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i70 <|@
result v22|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483646] bits:x...x0
=== Inputs ===
x: i47 
y: i30 
=== Succesors ===
=== Usages ===
i71 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i47 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i71 <|@
result v23|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483646] bits:x...x0
=== Inputs ===
x: i69 
y: i70 
=== Succesors ===
=== Usages ===
i65 i66 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i69 y: i70  <|@  <|@
f <@~|@floating>@ <|@
tid i65 <|@
result v24|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i71 
y: i23 
=== Succesors ===
=== Usages ===
i77 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i71 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i54 <|@
result int[48|0x30] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 15]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: 48
stableDimension: 0
stamp: i32 [48]
stampKind: i32
value: int[48|0x30]
=== Inputs ===
=== Succesors ===
=== Usages ===
i286 i77 i107 i137 i166 i196 i226 i256 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i77 <|@
result v25|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i65 
y: i54 
=== Succesors ===
=== Usages ===
i357 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i65 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i357 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i77 
=== Succesors ===
=== Usages ===
v358 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i77  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v358 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v451 
address: v530 
lastLocationAccess: - 
value: i357 
stateAfter: - 
=== Succesors ===
next: v359 
=== Usages ===
=== Predecessor ===
v344 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v451 address: v530 lastLocationAccess: - value: i357 stateAfter: - #next: v359  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v359 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i329 
stateAfter: - 
=== Succesors ===
next: v369 
=== Usages ===
=== Predecessor ===
v358 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i329 stateAfter: - #next: v369  <|@  <|@
f <@~|@floating>@ <|@
tid j437 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i329 
=== Succesors ===
=== Usages ===
v531 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i329  <|@  <|@
f <@~|@floating>@ <|@
tid v531 <|@
result [v6|DWORD + v2|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j437 
index: a524 
=== Succesors ===
=== Usages ===
v369 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j437 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i28 <|@
result int[268435455|0xfffffff] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 31]
rawvalue: 268435455
stableDimension: 0
stamp: i32 [268435455]
stampKind: i32
value: int[268435455|0xfffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
i245 i66 i96 i126 i155 i185 i215 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i66 <|@
result v26|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435454] bits:0000xxxxxxxxxxxxxxxxxxxxxxxxxxx0
=== Inputs ===
x: i71 
y: i28 
=== Succesors ===
=== Usages ===
i100 i99 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i71 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i99 <|@
result v27|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483632] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxx0000
=== Inputs ===
x: i66 
y: i34 
=== Succesors ===
=== Usages ===
i101 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i66 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i100 <|@
result v28|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870908] bits:000xxxxxxxxxxxxxxxxxxxxxxxxxxx00
=== Inputs ===
x: i66 
y: i30 
=== Succesors ===
=== Usages ===
i101 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i66 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i101 <|@
result v29|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483644] bits:x...x00
=== Inputs ===
x: i99 
y: i100 
=== Succesors ===
=== Usages ===
i95 i96 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i99 y: i100  <|@  <|@
f <@~|@floating>@ <|@
tid i95 <|@
result v30|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i101 
y: i23 
=== Succesors ===
=== Usages ===
i107 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i101 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i107 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i95 
y: i54 
=== Succesors ===
=== Usages ===
i368 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i95 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i368 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i107 
=== Succesors ===
=== Usages ===
v369 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i107  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v369 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v455 
address: v531 
lastLocationAccess: - 
value: i368 
stateAfter: - 
=== Succesors ===
next: v370 
=== Usages ===
=== Predecessor ===
v359 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v455 address: v531 lastLocationAccess: - value: i368 stateAfter: - #next: v370  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v370 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i330 
stateAfter: - 
=== Succesors ===
next: v380 
=== Usages ===
=== Predecessor ===
v369 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i330 stateAfter: - #next: v380  <|@  <|@
f <@~|@floating>@ <|@
tid j438 <|@
result v7|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i330 
=== Succesors ===
=== Usages ===
v532 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i330  <|@  <|@
f <@~|@floating>@ <|@
tid v532 <|@
result [v7|DWORD + v2|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j438 
index: a524 
=== Succesors ===
=== Usages ===
v380 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j438 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i96 <|@
result v32|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435452] bits:0000xxxxxxxxxxxxxxxxxxxxxxxxxx00
=== Inputs ===
x: i101 
y: i28 
=== Succesors ===
=== Usages ===
i130 i129 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i101 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i129 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483616] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxx00000
=== Inputs ===
x: i96 
y: i34 
=== Succesors ===
=== Usages ===
i131 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i96 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i130 <|@
result v34|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870904] bits:000xxxxxxxxxxxxxxxxxxxxxxxxxx000
=== Inputs ===
x: i96 
y: i30 
=== Succesors ===
=== Usages ===
i131 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i96 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i131 <|@
result v35|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483640] bits:x...x000
=== Inputs ===
x: i129 
y: i130 
=== Succesors ===
=== Usages ===
i125 i126 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i129 y: i130  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
result v36|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i131 
y: i23 
=== Succesors ===
=== Usages ===
i137 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i131 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i137 <|@
result v37|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i125 
y: i54 
=== Succesors ===
=== Usages ===
i379 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i125 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i379 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i137 
=== Succesors ===
=== Usages ===
v380 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i137  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v380 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v459 
address: v532 
lastLocationAccess: - 
value: i379 
stateAfter: - 
=== Succesors ===
next: v381 
=== Usages ===
=== Predecessor ===
v370 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v459 address: v532 lastLocationAccess: - value: i379 stateAfter: - #next: v381  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v381 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i331 
stateAfter: - 
=== Succesors ===
next: v391 
=== Usages ===
=== Predecessor ===
v380 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i331 stateAfter: - #next: v391  <|@  <|@
f <@~|@floating>@ <|@
tid j439 <|@
result v8|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i331 
=== Succesors ===
=== Usages ===
v533 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i331  <|@  <|@
f <@~|@floating>@ <|@
tid v533 <|@
result [v8|DWORD + v2|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j439 
index: a524 
=== Succesors ===
=== Usages ===
v391 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j439 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i126 <|@
result v38|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435448] bits:0000xxxxxxxxxxxxxxxxxxxxxxxxx000
=== Inputs ===
x: i131 
y: i28 
=== Succesors ===
=== Usages ===
i159 i158 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i131 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i158 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483584] bits:0xxxxxxxxxxxxxxxxxxxxxxxxx000000
=== Inputs ===
x: i126 
y: i34 
=== Succesors ===
=== Usages ===
i160 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i126 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i159 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870896] bits:000xxxxxxxxxxxxxxxxxxxxxxxxx0000
=== Inputs ===
x: i126 
y: i30 
=== Succesors ===
=== Usages ===
i160 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i126 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i160 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483632] bits:x...x0000
=== Inputs ===
x: i158 
y: i159 
=== Succesors ===
=== Usages ===
i154 i155 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i158 y: i159  <|@  <|@
f <@~|@floating>@ <|@
tid i154 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i160 
y: i23 
=== Succesors ===
=== Usages ===
i166 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i160 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i166 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i154 
y: i54 
=== Succesors ===
=== Usages ===
i390 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i154 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i390 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i166 
=== Succesors ===
=== Usages ===
v391 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i166  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v391 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v463 
address: v533 
lastLocationAccess: - 
value: i390 
stateAfter: - 
=== Succesors ===
next: v392 
=== Usages ===
=== Predecessor ===
v381 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v463 address: v533 lastLocationAccess: - value: i390 stateAfter: - #next: v392  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v392 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i332 
stateAfter: - 
=== Succesors ===
next: v402 
=== Usages ===
=== Predecessor ===
v391 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i332 stateAfter: - #next: v402  <|@  <|@
f <@~|@floating>@ <|@
tid j440 <|@
result v9|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i332 
=== Succesors ===
=== Usages ===
v534 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i332  <|@  <|@
f <@~|@floating>@ <|@
tid v534 <|@
result [v9|DWORD + v2|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j440 
index: a524 
=== Succesors ===
=== Usages ===
v402 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j440 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i155 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435440] bits:0000xxxxxxxxxxxxxxxxxxxxxxxx0000
=== Inputs ===
x: i160 
y: i28 
=== Succesors ===
=== Usages ===
i189 i188 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i160 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i188 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483520] bits:0xxxxxxxxxxxxxxxxxxxxxxxx0000000
=== Inputs ===
x: i155 
y: i34 
=== Succesors ===
=== Usages ===
i190 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i155 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i189 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870880] bits:000xxxxxxxxxxxxxxxxxxxxxxxx00000
=== Inputs ===
x: i155 
y: i30 
=== Succesors ===
=== Usages ===
i190 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i155 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i190 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i188 
y: i189 
=== Succesors ===
=== Usages ===
i184 i185 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i188 y: i189  <|@  <|@
f <@~|@floating>@ <|@
tid i184 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i190 
y: i23 
=== Succesors ===
=== Usages ===
i196 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i190 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i196 <|@
result v49|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i184 
y: i54 
=== Succesors ===
=== Usages ===
i401 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i184 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i401 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i196 
=== Succesors ===
=== Usages ===
v402 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i196  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v402 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v467 
address: v534 
lastLocationAccess: - 
value: i401 
stateAfter: - 
=== Succesors ===
next: v403 
=== Usages ===
=== Predecessor ===
v392 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v467 address: v534 lastLocationAccess: - value: i401 stateAfter: - #next: v403  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v403 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i333 
stateAfter: - 
=== Succesors ===
next: v413 
=== Usages ===
=== Predecessor ===
v402 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i333 stateAfter: - #next: v413  <|@  <|@
f <@~|@floating>@ <|@
tid j441 <|@
result v10|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i333 
=== Succesors ===
=== Usages ===
v535 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i333  <|@  <|@
f <@~|@floating>@ <|@
tid v535 <|@
result [v10|DWORD + v2|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j441 
index: a524 
=== Succesors ===
=== Usages ===
v413 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j441 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i185 <|@
result v50|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435424] bits:0000xxxxxxxxxxxxxxxxxxxxxxx00000
=== Inputs ===
x: i190 
y: i28 
=== Succesors ===
=== Usages ===
i219 i218 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i190 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i218 <|@
result v51|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483392] bits:0xxxxxxxxxxxxxxxxxxxxxxx00000000
=== Inputs ===
x: i185 
y: i34 
=== Succesors ===
=== Usages ===
i220 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i185 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i219 <|@
result v52|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870848] bits:000xxxxxxxxxxxxxxxxxxxxxxx000000
=== Inputs ===
x: i185 
y: i30 
=== Succesors ===
=== Usages ===
i220 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i185 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i220 <|@
result v53|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483584] bits:x...x000000
=== Inputs ===
x: i218 
y: i219 
=== Succesors ===
=== Usages ===
i214 i215 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i218 y: i219  <|@  <|@
f <@~|@floating>@ <|@
tid i214 <|@
result v54|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i220 
y: i23 
=== Succesors ===
=== Usages ===
i226 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i220 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i226 <|@
result v55|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i214 
y: i54 
=== Succesors ===
=== Usages ===
i412 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i214 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i412 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i226 
=== Succesors ===
=== Usages ===
v413 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i226  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v413 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v471 
address: v535 
lastLocationAccess: - 
value: i412 
stateAfter: - 
=== Succesors ===
next: v414 
=== Usages ===
=== Predecessor ===
v403 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v471 address: v535 lastLocationAccess: - value: i412 stateAfter: - #next: v414  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v414 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i334 
stateAfter: - 
=== Succesors ===
next: v424 
=== Usages ===
=== Predecessor ===
v413 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i334 stateAfter: - #next: v424  <|@  <|@
f <@~|@floating>@ <|@
tid j442 <|@
result v11|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i334 
=== Succesors ===
=== Usages ===
v536 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i334  <|@  <|@
f <@~|@floating>@ <|@
tid v536 <|@
result [v11|DWORD + v2|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j442 
index: a524 
=== Succesors ===
=== Usages ===
v424 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j442 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i215 <|@
result v56|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435392] bits:0000xxxxxxxxxxxxxxxxxxxxxx000000
=== Inputs ===
x: i220 
y: i28 
=== Succesors ===
=== Usages ===
i249 i248 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i220 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i248 <|@
result v57|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147483136] bits:0xxxxxxxxxxxxxxxxxxxxxx000000000
=== Inputs ===
x: i215 
y: i34 
=== Succesors ===
=== Usages ===
i250 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i215 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i249 <|@
result v58|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870784] bits:000xxxxxxxxxxxxxxxxxxxxxx0000000
=== Inputs ===
x: i215 
y: i30 
=== Succesors ===
=== Usages ===
i250 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i215 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i250 <|@
result v59|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483520] bits:x...x0000000
=== Inputs ===
x: i248 
y: i249 
=== Succesors ===
=== Usages ===
i244 i245 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i248 y: i249  <|@  <|@
f <@~|@floating>@ <|@
tid i244 <|@
result v60|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i250 
y: i23 
=== Succesors ===
=== Usages ===
i256 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i250 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i256 <|@
result v61|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i244 
y: i54 
=== Succesors ===
=== Usages ===
i423 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i244 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i423 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i256 
=== Succesors ===
=== Usages ===
v424 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i256  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v424 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v475 
address: v536 
lastLocationAccess: - 
value: i423 
stateAfter: - 
=== Succesors ===
next: v425 
=== Usages ===
=== Predecessor ===
v414 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v475 address: v536 lastLocationAccess: - value: i423 stateAfter: - #next: v425  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v425 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: DoubleToDecimal.index
location: DoubleToDecimal.index
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 12]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v528 
lastLocationAccess: - 
value: i336 
stateAfter: - 
=== Succesors ===
next: v435 
=== Usages ===
=== Predecessor ===
v424 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v528 lastLocationAccess: - value: i336 stateAfter: - #next: v435  <|@  <|@
f <@~|@floating>@ <|@
tid j443 <|@
result v12|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i336 
=== Succesors ===
=== Usages ===
v537 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i336  <|@  <|@
f <@~|@floating>@ <|@
tid v537 <|@
result [v12|DWORD + v2|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: j443 
index: a524 
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j443 index: a524  <|@  <|@
f <@~|@floating>@ <|@
tid i245 <|@
result v62|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:488) [bci: 33]
stamp: i32 [0 - 268435328] bits:0000xxxxxxxxxxxxxxxxxxxxx0000000
=== Inputs ===
x: i250 
y: i28 
=== Succesors ===
=== Usages ===
i279 i278 
=== Predecessor ===
- >@ <|@
instruction <@&|@jdk.graal.compiler.nodes.calc.AndNode>@ x: i250 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i278 <|@
result v63|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 2147482624] bits:0xxxxxxxxxxxxxxxxxxxxx0000000000
=== Inputs ===
x: i245 
y: i34 
=== Succesors ===
=== Usages ===
i280 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i245 y: i34  <|@  <|@
f <@~|@floating>@ <|@
tid i279 <|@
result v64|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [0 - 536870656] bits:000xxxxxxxxxxxxxxxxxxxxx00000000
=== Inputs ===
x: i245 
y: i30 
=== Succesors ===
=== Usages ===
i280 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i245 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i280 <|@
result v65|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:486) [bci: 17]
stamp: i32 [-2147483648 - 2147483392] bits:x...x00000000
=== Inputs ===
x: i278 
y: i279 
=== Succesors ===
=== Usages ===
i274 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i278 y: i279  <|@  <|@
f <@~|@floating>@ <|@
tid i274 <|@
result v66|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 25]
stamp: i32 [0 - 15] bits:0...0xxxx
=== Inputs ===
x: i280 
y: i23 
=== Succesors ===
=== Usages ===
i286 
=== Predecessor ===
- >@ <|@
instruction <@>>>|@jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode>@ x: i280 y: i23  <|@  <|@
f <@~|@floating>@ <|@
tid i286 <|@
result v67|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 18]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [48 - 63] bits:0...011xxxx
=== Inputs ===
x: i274 
y: i54 
=== Succesors ===
=== Usages ===
i434 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i274 y: i54  <|@  <|@
f <@~|@floating>@ <|@
tid i434 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
resultBits: 8
stamp: i8 [48 - 63] bits:0011xxxx
=== Inputs ===
value: i286 
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
- >@ <|@
instruction <@Narrow|@jdk.graal.compiler.nodes.calc.NarrowNode>@ value: i286  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v435 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: byte
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v479 
address: v537 
lastLocationAccess: - 
value: i434 
stateAfter: - 
=== Succesors ===
next: v33 
=== Usages ===
=== Predecessor ===
v425 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v479 address: v537 lastLocationAccess: - value: i434 stateAfter: - #next: v33  <|@  <|@
f <@*|@fixed>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:490) [bci: 41]
stamp: void
=== Inputs ===
memoryMap: - 
result: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v435 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: -  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v481 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v522 
=== Usages ===
=== Predecessor ===
v482 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v522  <|@  <|@
f <@~|@floating>@ <|@
tid i523 <|@
result int[-109595|0xfffffffffffe53e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -109595
stableDimension: 0
stamp: i32 [-109595]
stampKind: i32
value: int[-109595|0xfffffffffffe53e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v522 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v481 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-109595|0xfffffffffffe53e5]] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v477 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v520 
=== Usages ===
=== Predecessor ===
v478 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v520  <|@  <|@
f <@~|@floating>@ <|@
tid i521 <|@
result int[-106779|0xfffffffffffe5ee5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -106779
stableDimension: 0
stamp: i32 [-106779]
stampKind: i32
value: int[-106779|0xfffffffffffe5ee5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v520 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v477 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106779|0xfffffffffffe5ee5]] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v473 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v518 
=== Usages ===
=== Predecessor ===
v474 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v518  <|@  <|@
f <@~|@floating>@ <|@
tid i519 <|@
result int[-103963|0xfffffffffffe69e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -103963
stableDimension: 0
stamp: i32 [-103963]
stampKind: i32
value: int[-103963|0xfffffffffffe69e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v518 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v473 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5]] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v469 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v516 
=== Usages ===
=== Predecessor ===
v470 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v516  <|@  <|@
f <@~|@floating>@ <|@
tid i517 <|@
result int[-101147|0xfffffffffffe74e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -101147
stableDimension: 0
stamp: i32 [-101147]
stampKind: i32
value: int[-101147|0xfffffffffffe74e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v516 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v469 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-101147|0xfffffffffffe74e5]] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v465 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v514 
=== Usages ===
=== Predecessor ===
v466 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v514  <|@  <|@
f <@~|@floating>@ <|@
tid i515 <|@
result int[-98331|0xfffffffffffe7fe5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -98331
stableDimension: 0
stamp: i32 [-98331]
stampKind: i32
value: int[-98331|0xfffffffffffe7fe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v514 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v465 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-98331|0xfffffffffffe7fe5]] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v461 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v512 
=== Usages ===
=== Predecessor ===
v462 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v512  <|@  <|@
f <@~|@floating>@ <|@
tid i513 <|@
result int[-95515|0xfffffffffffe8ae5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -95515
stableDimension: 0
stamp: i32 [-95515]
stampKind: i32
value: int[-95515|0xfffffffffffe8ae5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v512 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v461 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-95515|0xfffffffffffe8ae5]] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v457 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v510 
=== Usages ===
=== Predecessor ===
v458 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v510  <|@  <|@
f <@~|@floating>@ <|@
tid i511 <|@
result int[-92699|0xfffffffffffe95e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -92699
stableDimension: 0
stamp: i32 [-92699]
stampKind: i32
value: int[-92699|0xfffffffffffe95e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v510 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v457 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5]] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v453 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
next: v508 
=== Usages ===
=== Predecessor ===
v454 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v508  <|@  <|@
f <@~|@floating>@ <|@
tid i509 <|@
result int[-89883|0xfffffffffffea0e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: -89883
stableDimension: 0
stamp: i32 [-89883]
stampKind: i32
value: int[-89883|0xfffffffffffea0e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v508 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
v453 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-89883|0xfffffffffffea0e5]] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i505 <|@
result v68|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: i32 [-109595 - -89883] bits:1...10xxxxxxxx11100101
valueDescription: i32
=== Inputs ===
merge: v501 
values: i509 i511 i513 i515 i517 i519 i521 i523 
=== Succesors ===
=== Usages ===
v507 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v501 values: i509 i511 i513 i515 i517 i519 i521 i523  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v501 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v508 v510 v512 v514 v516 v518 v520 v522 
=== Succesors ===
next: v507 
=== Usages ===
i505 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v508 v510 v512 v514 v516 v518 v520 v522 #next: v507  <|@  <|@
f <@~|@floating>@ <|@
tid j504 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v507 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v507 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.math.DoubleToDecimal.appendDigit(DoubleToDecimal.java:550) [bci: 20]
at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:487) [bci: 26]
stamp: void
=== Inputs ===
stateBefore: ?3 
actionAndReason: i505 
speculation: j504 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v501 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?3 actionAndReason: i505 speculation: j504  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGTSlowdown"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-89883|0xfffffffffffea0e5]] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-95515|0xfffffffffffe8ae5]] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106779|0xfffffffffffe5ee5]] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5]] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-109595|0xfffffffffffe53e5]] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-101147|0xfffffffffffe74e5]] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5]] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-98331|0xfffffffffffe7fe5]] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr   -1  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-89883|0xfffffffffffea0e5]] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-95515|0xfffffffffffe8ae5]] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106779|0xfffffffffffe5ee5]] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5]] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-109595|0xfffffffffffe53e5]] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-101147|0xfffffffffffe74e5]] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5]] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-98331|0xfffffffffffe7fe5]] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr   -1  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-89883|0xfffffffffffea0e5]] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-95515|0xfffffffffffe8ae5]] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106779|0xfffffffffffe5ee5]] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5]] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-109595|0xfffffffffffe53e5]] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-101147|0xfffffffffffe74e5]] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5]] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-98331|0xfffffffffffe7fe5]] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr   -1  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-89883|0xfffffffffffea0e5]] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-95515|0xfffffffffffe8ae5]] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106779|0xfffffffffffe5ee5]] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5]] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-109595|0xfffffffffffe53e5]] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-101147|0xfffffffffffe74e5]] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5]] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-98331|0xfffffffffffe7fe5]] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr   -1  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-89883|0xfffffffffffea0e5]] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-95515|0xfffffffffffe8ae5]] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-106779|0xfffffffffffe5ee5]] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5]] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-109595|0xfffffffffffe53e5]] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-101147|0xfffffffffffe74e5]] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5]] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-98331|0xfffffffffffe7fe5]] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr   -1  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  398  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr  402  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr  404  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [int[-89883|0xfffffffffffea0e5]] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [int[-95515|0xfffffffffffe8ae5]] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [int[-106779|0xfffffffffffe5ee5]] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5]] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [int[-109595|0xfffffffffffe53e5]] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [int[-101147|0xfffffffffffe74e5]] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5]] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [int[-98331|0xfffffffffffe7fe5]] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  398  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr  402  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr  404  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [int[-89883|0xfffffffffffea0e5]] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [int[-95515|0xfffffffffffe8ae5]] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [int[-106779|0xfffffffffffe5ee5]] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5]] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [int[-109595|0xfffffffffffe53e5]] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [int[-101147|0xfffffffffffe74e5]] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5]] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [int[-98331|0xfffffffffffe7fe5]] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|q fixed "[rax|q]" rax|q v15|q [0, 1[[398, 401[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 32[[400, 402[ "NoOptimization"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 26[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 30[ "NoSpillStore"
  v0|q QWORD "[v0|q]" v0|q rsi|q [30, 518[[536, 637[30 MustHaveRegister 34 MustHaveRegister 38 MustHaveRegister 388 MustHaveRegister 422 MustHaveRegister 438 MustHaveRegister 454 MustHaveRegister 470 MustHaveRegister 486 MustHaveRegister 502 MustHaveRegister 518 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[v1|d]" v1|d rdx|q [32, 390[[536, 637[32 MustHaveRegister 390 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d -1 [34, 532[34 MustHaveRegister 36 MustHaveRegister 420 MustHaveRegister 436 MustHaveRegister 452 MustHaveRegister 468 MustHaveRegister 484 MustHaveRegister 500 MustHaveRegister 516 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[v3|d]" v3|d -1 [36, 182[36 MustHaveRegister 42 MustHaveRegister 62 MustHaveRegister 82 MustHaveRegister 102 MustHaveRegister 122 MustHaveRegister 142 MustHaveRegister 162 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v4|d DWORD "[v4|d]" v4|d -1 [38, 180[38 MustHaveRegister 40 ShouldHaveRegister 60 MustHaveRegister 80 MustHaveRegister 100 MustHaveRegister 120 MustHaveRegister 140 MustHaveRegister 160 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[v5|d]" v5|d v4|d [40, 420[40 MustHaveRegister 42 ShouldHaveRegister 388 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d -1 [60, 436[60 MustHaveRegister 62 ShouldHaveRegister 422 MustHaveRegister 436 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[v7|d]" v7|d -1 [80, 452[80 MustHaveRegister 82 ShouldHaveRegister 438 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[v8|d]" v8|d -1 [100, 468[100 MustHaveRegister 102 ShouldHaveRegister 454 MustHaveRegister 468 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[v9|d]" v9|d -1 [120, 484[120 MustHaveRegister 122 ShouldHaveRegister 470 MustHaveRegister 484 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[v10|d]" v10|d -1 [140, 500[140 MustHaveRegister 142 ShouldHaveRegister 486 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[v11|d]" v11|d -1 [160, 516[160 MustHaveRegister 162 ShouldHaveRegister 502 MustHaveRegister 516 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[v12|d]" v12|d -1 [180, 532[180 MustHaveRegister 182 ShouldHaveRegister 518 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[v13|d]" v13|d v1|d [390, 392[390 MustHaveRegister 392 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[v14|q]" v14|q -1 [392, 394[392 MustHaveRegister 394 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[v15|q]" v15|q v14|q [394, 398[394 MustHaveRegister 398 ShouldHaveRegister  "NoSpillStore"
  v16|q QWORD "[v16|q]" v16|q -1 [396, 400[396 MustHaveRegister 400 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[v17|q]" v17|q rdx|q [402, 404[402 MustHaveRegister 404 MustHaveRegister  "NoSpillStore"
  v18|q QWORD "[v18|q]" v18|q v17|q [404, 406[404 MustHaveRegister 406 ShouldHaveRegister  "NoSpillStore"
  v19|d DWORD "[v19|d]" v19|d -1 [406, 408[406 MustHaveRegister 408 ShouldHaveRegister  "NoSpillStore"
  v20|d DWORD "[v20|d]" v20|d v19|d [408, 412[408 MustHaveRegister 410 MustHaveRegister 412 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[v21|d]" v21|d v20|d [410, 414[410 MustHaveRegister 414 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[v22|d]" v22|d v20|d [412, 414[412 MustHaveRegister 414 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[v23|d]" v23|d v21|d [414, 424[414 MustHaveRegister 416 MustHaveRegister 424 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[v24|d]" v24|d v23|d [416, 418[416 MustHaveRegister 418 MustHaveRegister  "NoSpillStore"
  v25|d DWORD "[v25|d]" v25|d -1 [418, 420[418 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[v26|d]" v26|d v23|d [424, 428[424 MustHaveRegister 426 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[v27|d]" v27|d v26|d [426, 430[426 MustHaveRegister 430 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[v28|d]" v28|d v26|d [428, 430[428 MustHaveRegister 430 ShouldHaveRegister  "NoSpillStore"
  v29|d DWORD "[v29|d]" v29|d v27|d [430, 440[430 MustHaveRegister 432 MustHaveRegister 440 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[v30|d]" v30|d v29|d [432, 434[432 MustHaveRegister 434 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[v31|d]" v31|d -1 [434, 436[434 MustHaveRegister 436 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[v32|d]" v32|d v29|d [440, 444[440 MustHaveRegister 442 MustHaveRegister 444 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[v33|d]" v33|d v32|d [442, 446[442 MustHaveRegister 446 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[v34|d]" v34|d v32|d [444, 446[444 MustHaveRegister 446 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[v35|d]" v35|d v33|d [446, 456[446 MustHaveRegister 448 MustHaveRegister 456 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[v36|d]" v36|d v35|d [448, 450[448 MustHaveRegister 450 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[v37|d]" v37|d -1 [450, 452[450 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[v38|d]" v38|d v35|d [456, 460[456 MustHaveRegister 458 MustHaveRegister 460 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[v39|d]" v39|d v38|d [458, 462[458 MustHaveRegister 462 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[v40|d]" v40|d v38|d [460, 462[460 MustHaveRegister 462 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[v41|d]" v41|d v39|d [462, 472[462 MustHaveRegister 464 MustHaveRegister 472 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[v42|d]" v42|d v41|d [464, 466[464 MustHaveRegister 466 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[v43|d]" v43|d -1 [466, 468[466 MustHaveRegister 468 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[v44|d]" v44|d v41|d [472, 476[472 MustHaveRegister 474 MustHaveRegister 476 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[v45|d]" v45|d v44|d [474, 478[474 MustHaveRegister 478 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[v46|d]" v46|d v44|d [476, 478[476 MustHaveRegister 478 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[v47|d]" v47|d v45|d [478, 488[478 MustHaveRegister 480 MustHaveRegister 488 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[v48|d]" v48|d v47|d [480, 482[480 MustHaveRegister 482 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[v49|d]" v49|d -1 [482, 484[482 MustHaveRegister 484 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[v50|d]" v50|d v47|d [488, 492[488 MustHaveRegister 490 MustHaveRegister 492 ShouldHaveRegister  "NoSpillStore"
  v51|d DWORD "[v51|d]" v51|d v50|d [490, 494[490 MustHaveRegister 494 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[v52|d]" v52|d v50|d [492, 494[492 MustHaveRegister 494 ShouldHaveRegister  "NoSpillStore"
  v53|d DWORD "[v53|d]" v53|d v51|d [494, 504[494 MustHaveRegister 496 MustHaveRegister 504 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[v54|d]" v54|d v53|d [496, 498[496 MustHaveRegister 498 MustHaveRegister  "NoSpillStore"
  v55|d DWORD "[v55|d]" v55|d -1 [498, 500[498 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[v56|d]" v56|d v53|d [504, 508[504 MustHaveRegister 506 MustHaveRegister 508 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[v57|d]" v57|d v56|d [506, 510[506 MustHaveRegister 510 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[v58|d]" v58|d v56|d [508, 510[508 MustHaveRegister 510 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[v59|d]" v59|d v57|d [510, 520[510 MustHaveRegister 512 MustHaveRegister 520 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[v60|d]" v60|d v59|d [512, 514[512 MustHaveRegister 514 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[v61|d]" v61|d -1 [514, 516[514 MustHaveRegister 516 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[v62|d]" v62|d v59|d [520, 524[520 MustHaveRegister 522 MustHaveRegister 524 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[v63|d]" v63|d v62|d [522, 526[522 MustHaveRegister 526 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[v64|d]" v64|d v62|d [524, 526[524 MustHaveRegister 526 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[v65|d]" v65|d v63|d [526, 528[526 MustHaveRegister 528 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[v66|d]" v66|d v65|d [528, 530[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v67|d DWORD "[v67|d]" v67|d -1 [530, 532[530 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[v68|d]" v68|d -1 [616, 632[632 MustHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|q fixed "[rax|q]" rax|q v15|q [0, 1[[398, 401[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 32[[400, 402[ "NoOptimization"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 26[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 30[ "NoSpillStore"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [30, 518[[536, 637[30 MustHaveRegister 34 MustHaveRegister 38 MustHaveRegister 388 MustHaveRegister 422 MustHaveRegister 438 MustHaveRegister 454 MustHaveRegister 470 MustHaveRegister 486 MustHaveRegister 502 MustHaveRegister 518 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[rdx|d]" v1|d rdx|q [32, 390[[536, 637[32 MustHaveRegister 390 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[r10|d]" v2|d -1 [34, 532[34 MustHaveRegister 36 MustHaveRegister 420 MustHaveRegister 436 MustHaveRegister 452 MustHaveRegister 468 MustHaveRegister 484 MustHaveRegister 500 MustHaveRegister 516 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[rax|d]" v3|d -1 [36, 182[36 MustHaveRegister 42 MustHaveRegister 62 MustHaveRegister 82 MustHaveRegister 102 MustHaveRegister 122 MustHaveRegister 142 MustHaveRegister 162 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v4|d DWORD "[r11|d]" v4|d -1 [38, 180[38 MustHaveRegister 40 ShouldHaveRegister 60 MustHaveRegister 80 MustHaveRegister 100 MustHaveRegister 120 MustHaveRegister 140 MustHaveRegister 160 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r8|d]" v5|d v4|d [40, 420[40 MustHaveRegister 42 ShouldHaveRegister 388 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r9|d]" v6|d -1 [60, 436[60 MustHaveRegister 62 ShouldHaveRegister 422 MustHaveRegister 436 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rcx|d]" v7|d -1 [80, 452[80 MustHaveRegister 82 ShouldHaveRegister 438 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d -1 [100, 468[100 MustHaveRegister 102 ShouldHaveRegister 454 MustHaveRegister 468 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[rdi|d]" v9|d -1 [120, 484[120 MustHaveRegister 122 ShouldHaveRegister 470 MustHaveRegister 484 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rbp|d]" v10|d -1 [140, 500[140 MustHaveRegister 142 ShouldHaveRegister 486 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[r13|d]" v11|d -1 [160, 516[160 MustHaveRegister 162 ShouldHaveRegister 502 MustHaveRegister 516 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[r11|d]" v12|d -1 [180, 532[180 MustHaveRegister 182 ShouldHaveRegister 518 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[rdx|d]" v13|d v1|d [390, 392[390 MustHaveRegister 392 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[rax|q]" v14|q -1 [392, 394[392 MustHaveRegister 394 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[rax|q]" v15|q v14|q [394, 398[394 MustHaveRegister 398 ShouldHaveRegister  "NoSpillStore"
  v16|q QWORD "[rdx|q]" v16|q -1 [396, 400[396 MustHaveRegister 400 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[rdx|q]" v17|q rdx|q [402, 404[402 MustHaveRegister 404 MustHaveRegister  "NoSpillStore"
  v18|q QWORD "[rdx|q]" v18|q v17|q [404, 406[404 MustHaveRegister 406 ShouldHaveRegister  "NoSpillStore"
  v19|d DWORD "[rdx|d]" v19|d -1 [406, 408[406 MustHaveRegister 408 ShouldHaveRegister  "NoSpillStore"
  v20|d DWORD "[rdx|d]" v20|d v19|d [408, 412[408 MustHaveRegister 410 MustHaveRegister 412 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[rax|d]" v21|d v20|d [410, 414[410 MustHaveRegister 414 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[rdx|d]" v22|d v20|d [412, 414[412 MustHaveRegister 414 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[rax|d]" v23|d v21|d [414, 424[414 MustHaveRegister 416 MustHaveRegister 424 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[rdx|d]" v24|d v23|d [416, 418[416 MustHaveRegister 418 MustHaveRegister  "NoSpillStore"
  v25|d DWORD "[rdx|d]" v25|d -1 [418, 420[418 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[rax|d]" v26|d v23|d [424, 428[424 MustHaveRegister 426 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r8|d]" v27|d v26|d [426, 430[426 MustHaveRegister 430 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[rax|d]" v28|d v26|d [428, 430[428 MustHaveRegister 430 ShouldHaveRegister  "NoSpillStore"
  v29|d DWORD "[r8|d]" v29|d v27|d [430, 440[430 MustHaveRegister 432 MustHaveRegister 440 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[rdx|d]" v30|d v29|d [432, 434[432 MustHaveRegister 434 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[rdx|d]" v31|d -1 [434, 436[434 MustHaveRegister 436 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[r8|d]" v32|d v29|d [440, 444[440 MustHaveRegister 442 MustHaveRegister 444 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[r9|d]" v33|d v32|d [442, 446[442 MustHaveRegister 446 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[r8|d]" v34|d v32|d [444, 446[444 MustHaveRegister 446 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[r9|d]" v35|d v33|d [446, 456[446 MustHaveRegister 448 MustHaveRegister 456 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[r8|d]" v36|d v35|d [448, 450[448 MustHaveRegister 450 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[r8|d]" v37|d -1 [450, 452[450 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[r9|d]" v38|d v35|d [456, 460[456 MustHaveRegister 458 MustHaveRegister 460 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[r8|d]" v39|d v38|d [458, 462[458 MustHaveRegister 462 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[r9|d]" v40|d v38|d [460, 462[460 MustHaveRegister 462 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[r8|d]" v41|d v39|d [462, 472[462 MustHaveRegister 464 MustHaveRegister 472 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[r9|d]" v42|d v41|d [464, 466[464 MustHaveRegister 466 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[r9|d]" v43|d -1 [466, 468[466 MustHaveRegister 468 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[r8|d]" v44|d v41|d [472, 476[472 MustHaveRegister 474 MustHaveRegister 476 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r9|d]" v45|d v44|d [474, 478[474 MustHaveRegister 478 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[r8|d]" v46|d v44|d [476, 478[476 MustHaveRegister 478 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[r9|d]" v47|d v45|d [478, 488[478 MustHaveRegister 480 MustHaveRegister 488 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[r8|d]" v48|d v47|d [480, 482[480 MustHaveRegister 482 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[r8|d]" v49|d -1 [482, 484[482 MustHaveRegister 484 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[r9|d]" v50|d v47|d [488, 492[488 MustHaveRegister 490 MustHaveRegister 492 ShouldHaveRegister  "NoSpillStore"
  v51|d DWORD "[r8|d]" v51|d v50|d [490, 494[490 MustHaveRegister 494 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[r9|d]" v52|d v50|d [492, 494[492 MustHaveRegister 494 ShouldHaveRegister  "NoSpillStore"
  v53|d DWORD "[r8|d]" v53|d v51|d [494, 504[494 MustHaveRegister 496 MustHaveRegister 504 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r9|d]" v54|d v53|d [496, 498[496 MustHaveRegister 498 MustHaveRegister  "NoSpillStore"
  v55|d DWORD "[r9|d]" v55|d -1 [498, 500[498 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[r8|d]" v56|d v53|d [504, 508[504 MustHaveRegister 506 MustHaveRegister 508 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[r9|d]" v57|d v56|d [506, 510[506 MustHaveRegister 510 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[r8|d]" v58|d v56|d [508, 510[508 MustHaveRegister 510 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[r9|d]" v59|d v57|d [510, 520[510 MustHaveRegister 512 MustHaveRegister 520 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r8|d]" v60|d v59|d [512, 514[512 MustHaveRegister 514 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [514, 516[514 MustHaveRegister 516 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r9|d]" v62|d v59|d [520, 524[520 MustHaveRegister 522 MustHaveRegister 524 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r8|d]" v63|d v62|d [522, 526[522 MustHaveRegister 526 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r9|d]" v64|d v62|d [524, 526[524 MustHaveRegister 526 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r8|d]" v65|d v63|d [526, 528[526 MustHaveRegister 528 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r8|d]" v66|d v65|d [528, 530[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d -1 [530, 532[530 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[r10|d]" v68|d -1 [616, 632[632 MustHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  398  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr  402  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr  404  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [int[-89883|0xfffffffffffea0e5]] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [int[-95515|0xfffffffffffe8ae5]] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [int[-106779|0xfffffffffffe5ee5]] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5]] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [int[-109595|0xfffffffffffe53e5]] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [int[-101147|0xfffffffffffe74e5]] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5]] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [int[-98331|0xfffffffffffe7fe5]] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|q fixed "[rax|q]" rax|q v15|q [0, 1[[398, 401[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 32[[400, 402[ "NoOptimization"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 26[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 30[ "NoSpillStore"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [30, 518[[536, 637[30 MustHaveRegister 34 MustHaveRegister 38 MustHaveRegister 388 MustHaveRegister 422 MustHaveRegister 438 MustHaveRegister 454 MustHaveRegister 470 MustHaveRegister 486 MustHaveRegister 502 MustHaveRegister 518 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[rdx|d]" v1|d rdx|q [32, 390[[536, 637[32 MustHaveRegister 390 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[r10|d]" v2|d -1 [34, 532[34 MustHaveRegister 36 MustHaveRegister 420 MustHaveRegister 436 MustHaveRegister 452 MustHaveRegister 468 MustHaveRegister 484 MustHaveRegister 500 MustHaveRegister 516 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[rax|d]" v3|d -1 [36, 182[36 MustHaveRegister 42 MustHaveRegister 62 MustHaveRegister 82 MustHaveRegister 102 MustHaveRegister 122 MustHaveRegister 142 MustHaveRegister 162 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v4|d DWORD "[r11|d]" v4|d -1 [38, 180[38 MustHaveRegister 40 ShouldHaveRegister 60 MustHaveRegister 80 MustHaveRegister 100 MustHaveRegister 120 MustHaveRegister 140 MustHaveRegister 160 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r8|d]" v5|d v4|d [40, 420[40 MustHaveRegister 42 ShouldHaveRegister 388 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r9|d]" v6|d -1 [60, 436[60 MustHaveRegister 62 ShouldHaveRegister 422 MustHaveRegister 436 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rcx|d]" v7|d -1 [80, 452[80 MustHaveRegister 82 ShouldHaveRegister 438 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d -1 [100, 468[100 MustHaveRegister 102 ShouldHaveRegister 454 MustHaveRegister 468 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[rdi|d]" v9|d -1 [120, 484[120 MustHaveRegister 122 ShouldHaveRegister 470 MustHaveRegister 484 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rbp|d]" v10|d -1 [140, 500[140 MustHaveRegister 142 ShouldHaveRegister 486 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[r13|d]" v11|d -1 [160, 516[160 MustHaveRegister 162 ShouldHaveRegister 502 MustHaveRegister 516 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[r11|d]" v12|d -1 [180, 532[180 MustHaveRegister 182 ShouldHaveRegister 518 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[rdx|d]" v13|d v1|d [390, 392[390 MustHaveRegister 392 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[rax|q]" v14|q -1 [392, 394[392 MustHaveRegister 394 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[rax|q]" v15|q v14|q [394, 398[394 MustHaveRegister 398 ShouldHaveRegister  "NoSpillStore"
  v16|q QWORD "[rdx|q]" v16|q -1 [396, 400[396 MustHaveRegister 400 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[rdx|q]" v17|q rdx|q [402, 404[402 MustHaveRegister 404 MustHaveRegister  "NoSpillStore"
  v18|q QWORD "[rdx|q]" v18|q v17|q [404, 406[404 MustHaveRegister 406 ShouldHaveRegister  "NoSpillStore"
  v19|d DWORD "[rdx|d]" v19|d -1 [406, 408[406 MustHaveRegister 408 ShouldHaveRegister  "NoSpillStore"
  v20|d DWORD "[rdx|d]" v20|d v19|d [408, 412[408 MustHaveRegister 410 MustHaveRegister 412 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[rax|d]" v21|d v20|d [410, 414[410 MustHaveRegister 414 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[rdx|d]" v22|d v20|d [412, 414[412 MustHaveRegister 414 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[rax|d]" v23|d v21|d [414, 424[414 MustHaveRegister 416 MustHaveRegister 424 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[rdx|d]" v24|d v23|d [416, 418[416 MustHaveRegister 418 MustHaveRegister  "NoSpillStore"
  v25|d DWORD "[rdx|d]" v25|d -1 [418, 420[418 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[rax|d]" v26|d v23|d [424, 428[424 MustHaveRegister 426 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r8|d]" v27|d v26|d [426, 430[426 MustHaveRegister 430 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[rax|d]" v28|d v26|d [428, 430[428 MustHaveRegister 430 ShouldHaveRegister  "NoSpillStore"
  v29|d DWORD "[r8|d]" v29|d v27|d [430, 440[430 MustHaveRegister 432 MustHaveRegister 440 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[rdx|d]" v30|d v29|d [432, 434[432 MustHaveRegister 434 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[rdx|d]" v31|d -1 [434, 436[434 MustHaveRegister 436 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[r8|d]" v32|d v29|d [440, 444[440 MustHaveRegister 442 MustHaveRegister 444 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[r9|d]" v33|d v32|d [442, 446[442 MustHaveRegister 446 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[r8|d]" v34|d v32|d [444, 446[444 MustHaveRegister 446 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[r9|d]" v35|d v33|d [446, 456[446 MustHaveRegister 448 MustHaveRegister 456 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[r8|d]" v36|d v35|d [448, 450[448 MustHaveRegister 450 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[r8|d]" v37|d -1 [450, 452[450 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[r9|d]" v38|d v35|d [456, 460[456 MustHaveRegister 458 MustHaveRegister 460 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[r8|d]" v39|d v38|d [458, 462[458 MustHaveRegister 462 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[r9|d]" v40|d v38|d [460, 462[460 MustHaveRegister 462 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[r8|d]" v41|d v39|d [462, 472[462 MustHaveRegister 464 MustHaveRegister 472 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[r9|d]" v42|d v41|d [464, 466[464 MustHaveRegister 466 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[r9|d]" v43|d -1 [466, 468[466 MustHaveRegister 468 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[r8|d]" v44|d v41|d [472, 476[472 MustHaveRegister 474 MustHaveRegister 476 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r9|d]" v45|d v44|d [474, 478[474 MustHaveRegister 478 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[r8|d]" v46|d v44|d [476, 478[476 MustHaveRegister 478 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[r9|d]" v47|d v45|d [478, 488[478 MustHaveRegister 480 MustHaveRegister 488 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[r8|d]" v48|d v47|d [480, 482[480 MustHaveRegister 482 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[r8|d]" v49|d -1 [482, 484[482 MustHaveRegister 484 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[r9|d]" v50|d v47|d [488, 492[488 MustHaveRegister 490 MustHaveRegister 492 ShouldHaveRegister  "NoSpillStore"
  v51|d DWORD "[r8|d]" v51|d v50|d [490, 494[490 MustHaveRegister 494 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[r9|d]" v52|d v50|d [492, 494[492 MustHaveRegister 494 ShouldHaveRegister  "NoSpillStore"
  v53|d DWORD "[r8|d]" v53|d v51|d [494, 504[494 MustHaveRegister 496 MustHaveRegister 504 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r9|d]" v54|d v53|d [496, 498[496 MustHaveRegister 498 MustHaveRegister  "NoSpillStore"
  v55|d DWORD "[r9|d]" v55|d -1 [498, 500[498 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[r8|d]" v56|d v53|d [504, 508[504 MustHaveRegister 506 MustHaveRegister 508 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[r9|d]" v57|d v56|d [506, 510[506 MustHaveRegister 510 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[r8|d]" v58|d v56|d [508, 510[508 MustHaveRegister 510 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[r9|d]" v59|d v57|d [510, 520[510 MustHaveRegister 512 MustHaveRegister 520 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r8|d]" v60|d v59|d [512, 514[512 MustHaveRegister 514 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [514, 516[514 MustHaveRegister 516 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r9|d]" v62|d v59|d [520, 524[520 MustHaveRegister 522 MustHaveRegister 524 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r8|d]" v63|d v62|d [522, 526[522 MustHaveRegister 526 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r9|d]" v64|d v62|d [524, 526[524 MustHaveRegister 526 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r8|d]" v65|d v63|d [526, 528[526 MustHaveRegister 528 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r8|d]" v66|d v65|d [528, 530[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d -1 [530, 532[530 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[r10|d]" v68|d -1 [616, 632[632 MustHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  398  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr  402  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr  404  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [int[-89883|0xfffffffffffea0e5]] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [int[-95515|0xfffffffffffe8ae5]] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [int[-106779|0xfffffffffffe5ee5]] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [int[-103963|0xfffffffffffe69e5]] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [int[-109595|0xfffffffffffe53e5]] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [int[-101147|0xfffffffffffe74e5]] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [int[-92699|0xfffffffffffe95e5]] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [int[-98331|0xfffffffffffe7fe5]] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|q fixed "[rax|q]" rax|q v15|q [0, 1[[398, 401[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 32[[400, 402[ "NoOptimization"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 26[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q -1 [0, 30[ "NoSpillStore"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [30, 518[[536, 637[30 MustHaveRegister 34 MustHaveRegister 38 MustHaveRegister 388 MustHaveRegister 422 MustHaveRegister 438 MustHaveRegister 454 MustHaveRegister 470 MustHaveRegister 486 MustHaveRegister 502 MustHaveRegister 518 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[rdx|d]" v1|d rdx|q [32, 390[[536, 637[32 MustHaveRegister 390 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[r10|d]" v2|d -1 [34, 532[34 MustHaveRegister 36 MustHaveRegister 420 MustHaveRegister 436 MustHaveRegister 452 MustHaveRegister 468 MustHaveRegister 484 MustHaveRegister 500 MustHaveRegister 516 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[rax|d]" v3|d -1 [36, 182[36 MustHaveRegister 42 MustHaveRegister 62 MustHaveRegister 82 MustHaveRegister 102 MustHaveRegister 122 MustHaveRegister 142 MustHaveRegister 162 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v4|d DWORD "[r11|d]" v4|d -1 [38, 180[38 MustHaveRegister 40 ShouldHaveRegister 60 MustHaveRegister 80 MustHaveRegister 100 MustHaveRegister 120 MustHaveRegister 140 MustHaveRegister 160 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r8|d]" v5|d v4|d [40, 420[40 MustHaveRegister 42 ShouldHaveRegister 388 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r9|d]" v6|d -1 [60, 436[60 MustHaveRegister 62 ShouldHaveRegister 422 MustHaveRegister 436 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rcx|d]" v7|d -1 [80, 452[80 MustHaveRegister 82 ShouldHaveRegister 438 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d -1 [100, 468[100 MustHaveRegister 102 ShouldHaveRegister 454 MustHaveRegister 468 MustHaveRegister  "NoSpillStore"
  v9|d DWORD "[rdi|d]" v9|d -1 [120, 484[120 MustHaveRegister 122 ShouldHaveRegister 470 MustHaveRegister 484 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rbp|d]" v10|d -1 [140, 500[140 MustHaveRegister 142 ShouldHaveRegister 486 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[r13|d]" v11|d -1 [160, 516[160 MustHaveRegister 162 ShouldHaveRegister 502 MustHaveRegister 516 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[r11|d]" v12|d -1 [180, 532[180 MustHaveRegister 182 ShouldHaveRegister 518 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v13|d DWORD "[rdx|d]" v13|d v1|d [390, 392[390 MustHaveRegister 392 ShouldHaveRegister  "NoSpillStore"
  v14|q QWORD "[rax|q]" v14|q -1 [392, 394[392 MustHaveRegister 394 MustHaveRegister  "NoSpillStore"
  v15|q QWORD "[rax|q]" v15|q v14|q [394, 398[394 MustHaveRegister 398 ShouldHaveRegister  "NoSpillStore"
  v16|q QWORD "[rdx|q]" v16|q -1 [396, 400[396 MustHaveRegister 400 MustHaveRegister  "NoSpillStore"
  v17|q QWORD "[rdx|q]" v17|q rdx|q [402, 404[402 MustHaveRegister 404 MustHaveRegister  "NoSpillStore"
  v18|q QWORD "[rdx|q]" v18|q v17|q [404, 406[404 MustHaveRegister 406 ShouldHaveRegister  "NoSpillStore"
  v19|d DWORD "[rdx|d]" v19|d -1 [406, 408[406 MustHaveRegister 408 ShouldHaveRegister  "NoSpillStore"
  v20|d DWORD "[rdx|d]" v20|d v19|d [408, 412[408 MustHaveRegister 410 MustHaveRegister 412 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[rax|d]" v21|d v20|d [410, 414[410 MustHaveRegister 414 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[rdx|d]" v22|d v20|d [412, 414[412 MustHaveRegister 414 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[rax|d]" v23|d v21|d [414, 424[414 MustHaveRegister 416 MustHaveRegister 424 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[rdx|d]" v24|d v23|d [416, 418[416 MustHaveRegister 418 MustHaveRegister  "NoSpillStore"
  v25|d DWORD "[rdx|d]" v25|d -1 [418, 420[418 MustHaveRegister 420 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[rax|d]" v26|d v23|d [424, 428[424 MustHaveRegister 426 MustHaveRegister 428 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r8|d]" v27|d v26|d [426, 430[426 MustHaveRegister 430 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[rax|d]" v28|d v26|d [428, 430[428 MustHaveRegister 430 ShouldHaveRegister  "NoSpillStore"
  v29|d DWORD "[r8|d]" v29|d v27|d [430, 440[430 MustHaveRegister 432 MustHaveRegister 440 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[rdx|d]" v30|d v29|d [432, 434[432 MustHaveRegister 434 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[rdx|d]" v31|d -1 [434, 436[434 MustHaveRegister 436 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[r8|d]" v32|d v29|d [440, 444[440 MustHaveRegister 442 MustHaveRegister 444 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[r9|d]" v33|d v32|d [442, 446[442 MustHaveRegister 446 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[r8|d]" v34|d v32|d [444, 446[444 MustHaveRegister 446 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[r9|d]" v35|d v33|d [446, 456[446 MustHaveRegister 448 MustHaveRegister 456 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[r8|d]" v36|d v35|d [448, 450[448 MustHaveRegister 450 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[r8|d]" v37|d -1 [450, 452[450 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[r9|d]" v38|d v35|d [456, 460[456 MustHaveRegister 458 MustHaveRegister 460 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[r8|d]" v39|d v38|d [458, 462[458 MustHaveRegister 462 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[r9|d]" v40|d v38|d [460, 462[460 MustHaveRegister 462 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[r8|d]" v41|d v39|d [462, 472[462 MustHaveRegister 464 MustHaveRegister 472 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[r9|d]" v42|d v41|d [464, 466[464 MustHaveRegister 466 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[r9|d]" v43|d -1 [466, 468[466 MustHaveRegister 468 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[r8|d]" v44|d v41|d [472, 476[472 MustHaveRegister 474 MustHaveRegister 476 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r9|d]" v45|d v44|d [474, 478[474 MustHaveRegister 478 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[r8|d]" v46|d v44|d [476, 478[476 MustHaveRegister 478 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[r9|d]" v47|d v45|d [478, 488[478 MustHaveRegister 480 MustHaveRegister 488 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[r8|d]" v48|d v47|d [480, 482[480 MustHaveRegister 482 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[r8|d]" v49|d -1 [482, 484[482 MustHaveRegister 484 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[r9|d]" v50|d v47|d [488, 492[488 MustHaveRegister 490 MustHaveRegister 492 ShouldHaveRegister  "NoSpillStore"
  v51|d DWORD "[r8|d]" v51|d v50|d [490, 494[490 MustHaveRegister 494 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[r9|d]" v52|d v50|d [492, 494[492 MustHaveRegister 494 ShouldHaveRegister  "NoSpillStore"
  v53|d DWORD "[r8|d]" v53|d v51|d [494, 504[494 MustHaveRegister 496 MustHaveRegister 504 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r9|d]" v54|d v53|d [496, 498[496 MustHaveRegister 498 MustHaveRegister  "NoSpillStore"
  v55|d DWORD "[r9|d]" v55|d -1 [498, 500[498 MustHaveRegister 500 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[r8|d]" v56|d v53|d [504, 508[504 MustHaveRegister 506 MustHaveRegister 508 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[r9|d]" v57|d v56|d [506, 510[506 MustHaveRegister 510 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[r8|d]" v58|d v56|d [508, 510[508 MustHaveRegister 510 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[r9|d]" v59|d v57|d [510, 520[510 MustHaveRegister 512 MustHaveRegister 520 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r8|d]" v60|d v59|d [512, 514[512 MustHaveRegister 514 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [514, 516[514 MustHaveRegister 516 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r9|d]" v62|d v59|d [520, 524[520 MustHaveRegister 522 MustHaveRegister 524 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r8|d]" v63|d v62|d [522, 526[522 MustHaveRegister 526 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r9|d]" v64|d v62|d [524, 526[524 MustHaveRegister 526 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r8|d]" v65|d v63|d [526, 528[526 MustHaveRegister 528 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r8|d]" v66|d v65|d [528, 530[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d -1 [530, 532[530 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[r10|d]" v68|d -1 [616, 632[632 MustHaveRegister  "NoSpillStore"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  398  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr  402  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr  404  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [v68|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   30  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v1|DWORD = MOVE input: rdx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v2|DWORD[_] = MOV input: [v0|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction v3|DWORD = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction v4|DWORD = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction v5|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v5|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction v6|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction v7|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v7|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction v8|DWORD = LEA address: [v4|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction v9|DWORD = LEA address: [v4|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction v10|DWORD = LEA address: [v4|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v10|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction v11|DWORD = LEA address: [v4|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction v12|DWORD = LEA address: [v4|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v12|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v5|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction v13|DWORD = INC value: v1|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction v14|QWORD = MOVSXD value: v13|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction v15|QWORD = SHL x: v14|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction v16|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  398  <|@ instruction rax|QWORD = MOVE input: v15|QWORD moveKind: QWORD <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: v16|QWORD) size: QWORD <|@ <|@
      nr  402  <|@ instruction v17|QWORD = MOVE input: rdx|QWORD moveKind: QWORD <|@ <|@
      nr  404  <|@ instruction v18|QWORD = SHR x: v17|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction v19|DWORD = MOV value: v18|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction v20|DWORD = DEC value: v19|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction v21|DWORD = SHL x: v20|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction v22|DWORD = SHL value: v20|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction v23|DWORD = ADD (x: v21|DWORD, y: v22|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction v24|DWORD = SHR x: v23|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction v25|DWORD = LEA address: [v24|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [v5|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v25|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v6|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction v26|DWORD = AND x: v23|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction v27|DWORD = SHL x: v26|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction v28|DWORD = SHL value: v26|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction v29|DWORD = ADD (x: v27|DWORD, y: v28|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction v30|DWORD = SHR x: v29|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction v31|DWORD = LEA address: [v30|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [v6|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v31|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v7|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction v32|DWORD = AND x: v29|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction v33|DWORD = SHL x: v32|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction v34|DWORD = SHL value: v32|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction v35|DWORD = ADD (x: v33|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction v36|DWORD = SHR x: v35|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction v37|DWORD = LEA address: [v36|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [v7|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v37|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v8|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction v38|DWORD = AND x: v35|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction v39|DWORD = SHL x: v38|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction v40|DWORD = SHL value: v38|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction v41|DWORD = ADD (x: v39|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction v42|DWORD = SHR x: v41|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction v43|DWORD = LEA address: [v42|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [v8|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v43|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v9|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction v44|DWORD = AND x: v41|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction v45|DWORD = SHL x: v44|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction v46|DWORD = SHL value: v44|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction v47|DWORD = ADD (x: v45|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction v48|DWORD = SHR x: v47|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction v49|DWORD = LEA address: [v48|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [v9|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v49|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v10|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction v50|DWORD = AND x: v47|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction v51|DWORD = SHL x: v50|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction v52|DWORD = SHL value: v50|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction v53|DWORD = ADD (x: v51|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction v54|DWORD = SHR x: v53|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction v55|DWORD = LEA address: [v54|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [v10|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v55|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v11|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction v56|DWORD = AND x: v53|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction v57|DWORD = SHL x: v56|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction v58|DWORD = SHL value: v56|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction v59|DWORD = ADD (x: v57|DWORD, y: v58|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction v60|DWORD = SHR x: v59|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction v61|DWORD = LEA address: [v60|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [v11|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v61|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [v0|QWORD[.] + 12], y: v12|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction v62|DWORD = AND x: v59|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction v63|DWORD = SHL x: v62|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction v64|DWORD = SHL value: v62|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction v65|DWORD = ADD (x: v63|DWORD, y: v64|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction v66|DWORD = SHR x: v65|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction v67|DWORD = LEA address: [v66|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [v12|DWORD + v2|DWORD[_] * 8 + 16], y: reinterpret: v67|DWORD as: BYTE) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v68|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: v0|QWORD[.] v1|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@reference-map: [rsi:0, r10:0]
live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@reference-map: [rsi:0]
live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B16" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction NOP <|@ <|@
      nr   26  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   28  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD <|@ <|@
      nr   34  <|@ instruction r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD <|@ <|@
      nr   36  <|@ st <@st|@reference-map: [rsi:0, r10:0]
live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   38  <|@ instruction r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   40  <|@ instruction r8|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   42  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B15" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction NOP <|@ <|@
      nr   52  <|@ instruction NOP <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B14" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B13" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ instruction NOP <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B5" "B12" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B11" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" "B10" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  144  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  162  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B8" "B9" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  164  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction NOP <|@ <|@
      nr  172  <|@ instruction NOP <|@ <|@
      nr  174  <|@ instruction NOP <|@ <|@
      nr  176  <|@ instruction NOP <|@ <|@
      nr  178  <|@ instruction NOP <|@ <|@
      nr  180  <|@ instruction r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  182  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  184  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  186  <|@ instruction NOP <|@ <|@
      nr  188  <|@ instruction NOP <|@ <|@
      nr  190  <|@ instruction NOP <|@ <|@
      nr  192  <|@ instruction NOP <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction NOP <|@ <|@
      nr  210  <|@ instruction NOP <|@ <|@
      nr  212  <|@ instruction NOP <|@ <|@
      nr  214  <|@ instruction NOP <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction NOP <|@ <|@
      nr  236  <|@ instruction NOP <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction NOP <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction NOP <|@ <|@
      nr  328  <|@ instruction NOP <|@ <|@
      nr  330  <|@ instruction NOP <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD <|@ <|@
      nr  390  <|@ instruction rdx|DWORD = INC value: rdx|DWORD size: DWORD <|@ <|@
      nr  392  <|@ instruction rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD <|@ <|@
      nr  394  <|@ instruction rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD <|@ <|@
      nr  396  <|@ instruction rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c] <|@ <|@
      nr  400  <|@ instruction (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD <|@ <|@
      nr  404  <|@ instruction rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD <|@ <|@
      nr  406  <|@ instruction rdx|DWORD = MOV value: rdx|QWORD size: DWORD <|@ <|@
      nr  408  <|@ instruction rdx|DWORD = DEC value: rdx|DWORD size: DWORD <|@ <|@
      nr  410  <|@ instruction rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD <|@ <|@
      nr  412  <|@ instruction rdx|DWORD = SHL value: rdx|DWORD size: DWORD <|@ <|@
      nr  414  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  416  <|@ instruction rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD <|@ <|@
      nr  418  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  420  <|@ instruction MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  422  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD <|@ <|@
      nr  424  <|@ instruction rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  426  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD <|@ <|@
      nr  428  <|@ instruction rax|DWORD = SHL value: rax|DWORD size: DWORD <|@ <|@
      nr  430  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  432  <|@ instruction rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  434  <|@ instruction rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD <|@ <|@
      nr  436  <|@ instruction MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  438  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  440  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  442  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  444  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  446  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  448  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  450  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  452  <|@ instruction MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  458  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  460  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  462  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  464  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  466  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  468  <|@ instruction MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  470  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  472  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  474  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  476  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  478  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  480  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  482  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  484  <|@ instruction MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  486  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  488  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  490  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  492  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  494  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  496  <|@ instruction r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  498  <|@ instruction r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD <|@ <|@
      nr  500  <|@ instruction MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  502  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD <|@ <|@
      nr  504  <|@ instruction r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  506  <|@ instruction r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD <|@ <|@
      nr  508  <|@ instruction r8|DWORD = SHL value: r8|DWORD size: DWORD <|@ <|@
      nr  510  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  512  <|@ instruction r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD <|@ <|@
      nr  514  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  516  <|@ instruction MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  518  <|@ instruction MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD <|@ <|@
      nr  520  <|@ instruction r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD <|@ <|@
      nr  522  <|@ instruction r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD <|@ <|@
      nr  524  <|@ instruction r9|DWORD = SHL value: r9|DWORD size: DWORD <|@ <|@
      nr  526  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  528  <|@ instruction r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD <|@ <|@
      nr  530  <|@ instruction r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD <|@ <|@
      nr  532  <|@ instruction MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE <|@ <|@
      nr  534  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  536  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  538  <|@ instruction NOP <|@ <|@
      nr  540  <|@ instruction NOP <|@ <|@
      nr  542  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5] // MoveResolver resolve mapping <|@ <|@
      nr  544  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B15" "B14" "B13" "B12" "B11" "B10" "B9" 
    successors 
    xhandlers
    flags 
    probability 2368893403996880896
    begin_IR
      LIR
      nr  616  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  634  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  636  <|@ st <@st|@reference-map: [rsi:0]
live-base-pointers: []
jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0]
locals: rsi|QWORD[.] rdx|DWORD - - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  546  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  548  <|@ instruction NOP <|@ <|@
      nr  550  <|@ instruction NOP <|@ <|@
      nr  552  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5] // MoveResolver resolve mapping <|@ <|@
      nr  554  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B6" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5] // MoveResolver resolve mapping <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B10 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5] // MoveResolver resolve mapping <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5] // MoveResolver resolve mapping <|@ <|@
      nr  584  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  586  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5] // MoveResolver resolve mapping <|@ <|@
      nr  594  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  596  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5] // MoveResolver resolve mapping <|@ <|@
      nr  604  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B17" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  606  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5] // MoveResolver resolve mapping <|@ <|@
      nr  614  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: iload_1       
     2: invokevirtual #30         // y:(int)int
     5: istore_2      
     6: iconst_0      
     7: istore_3      
     8: iload_3       
     9: bipush        8
    11: if_icmpge     41
    14: bipush        10
    16: iload_2       
    17: imul          
    18: istore        4
    20: aload_0       
    21: iload         4
    23: bipush        28
    25: iushr         
    26: invokevirtual #29         // appendDigit:(int)void
    29: iload         4
    31: ldc           #164        // 268435455
    33: iand          
    34: istore_2      
    35: iinc          
    38: goto          8
    41: return        
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 448b560849bc0000002b787f00004d03d44d33e4493bc20f85e3ffffff66669089842400c0feff4883ec189041817f20000000000f85f502000090909090909090909090909048896c2410448b5610428b04d50c000000448b5e0c458bc341ffc0413bc00f864902000090909090909090458d4b02413bc10f869b02000090909090909090418d4b033bc10f865102000090909090909090418d5b043bc30f868002000090909090909090418d7b053bc70f865702000090909090909090418d6b063bc50f862e02000090909090909090458d6b07413bc50f860f02000090909090909090458d5b08413bc30f861102000090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090904489460cffc24863c248c1e01c48ba3c871146dc31af0248f7ea48c1ea148bd2ffca8bc2c1e003d1e203c28bd0c1ea1c8d5230438854d01044894e0c81e0ffffff0f448bc041c1e003d1e04403c0418bd0c1ea1c8d5230438854d110894e0c4181e0ffffff0f458bc841c1e10341d1e04503c8458bc141c1e81c458d4030468844d110895e0c4181e1ffffff0f458bc141c1e00341d1e14503c1458bc841c1e91c458d493046884cd310897e0c4181e0ffffff0f458bc841c1e10341d1e04503c8458bc141c1e81c458d4030468844d710896e0c4181e1ffffff0f458bc141c1e00341d1e14503c1458bc841c1e91c458d493046884cd51044896e0c4181e0ffffff0f458bc841c1e10341d1e04503c8458bc141c1e81c458d4030478844d51044895e0c4181e1ffffff0f458bc141c1e00341d1e14503c141c1e81c458d4030478844d310488b6c24104883c418493ba7500400000f878d000000c390909041bae5a0feff909090909090904589978404000049c7879004000000000000e8000000000f1f84000000000090909041bae58afeffebcf90909041bae55efeffebc490909041bae569feffebb990909041bae553feffebae90909041bae574feffeba390909041bae595feffeb9890909041bae57ffeffeb8d48896c2410e800000000e9fcfcfffff4488d0d5fffffff49898f68040000e9aefcfffff441c78784040000f5a5feff49c7879004000000000000e8000000000f1f840000000000e800000000f4e800000000f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f78b20335c8, value=140155947602048]:0x7f7899785080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 NOP  <||@
  Comment 59 4 NOP  <||@
  Comment 60 6 NOP  <||@
  Comment 61 8 NOP  <||@
  Comment 62 10 NOP  <||@
  Comment 63 12 NOP  <||@
  Comment 64 14 NOP  <||@
  Comment 65 16 NOP  <||@
  Comment 66 18 NOP  <||@
  Comment 67 20 NOP  <||@
  Comment 68 22 NOP  <||@
  Comment 69 24 NOP  <||@
  Comment 70 26 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 75 28 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD  <||@
  Comment 75 34 r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 79 36 rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 79 [rsi:0, r10:0]at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2  |3  |4 
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |-  |-  |-   <||@
  Comment 79 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 87 38 r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 91 40 r8|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 97 42 CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD  <||@
  Comment 106 block B1 null  <||@
  Comment 106 44 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 106 46 NOP  <||@
  Comment 107 48 NOP  <||@
  Comment 108 50 NOP  <||@
  Comment 109 52 NOP  <||@
  Comment 110 54 NOP  <||@
  Comment 111 56 NOP  <||@
  Comment 112 58 NOP  <||@
  Comment 113 60 r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD  <||@
  Comment 117 62 CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD  <||@
  Comment 126 block B2 null  <||@
  Comment 126 64 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 126 66 NOP  <||@
  Comment 127 68 NOP  <||@
  Comment 128 70 NOP  <||@
  Comment 129 72 NOP  <||@
  Comment 130 74 NOP  <||@
  Comment 131 76 NOP  <||@
  Comment 132 78 NOP  <||@
  Comment 133 80 rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD  <||@
  Comment 137 82 CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD  <||@
  Comment 145 block B3 null  <||@
  Comment 145 84 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 145 86 NOP  <||@
  Comment 146 88 NOP  <||@
  Comment 147 90 NOP  <||@
  Comment 148 92 NOP  <||@
  Comment 149 94 NOP  <||@
  Comment 150 96 NOP  <||@
  Comment 151 98 NOP  <||@
  Comment 152 100 rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD  <||@
  Comment 156 102 CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD  <||@
  Comment 164 block B4 null  <||@
  Comment 164 104 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 164 106 NOP  <||@
  Comment 165 108 NOP  <||@
  Comment 166 110 NOP  <||@
  Comment 167 112 NOP  <||@
  Comment 168 114 NOP  <||@
  Comment 169 116 NOP  <||@
  Comment 170 118 NOP  <||@
  Comment 171 120 rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD  <||@
  Comment 175 122 CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD  <||@
  Comment 183 block B5 null  <||@
  Comment 183 124 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 183 126 NOP  <||@
  Comment 184 128 NOP  <||@
  Comment 185 130 NOP  <||@
  Comment 186 132 NOP  <||@
  Comment 187 134 NOP  <||@
  Comment 188 136 NOP  <||@
  Comment 189 138 NOP  <||@
  Comment 190 140 rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD  <||@
  Comment 194 142 CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD  <||@
  Comment 202 block B6 null  <||@
  Comment 202 144 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 202 146 NOP  <||@
  Comment 203 148 NOP  <||@
  Comment 204 150 NOP  <||@
  Comment 205 152 NOP  <||@
  Comment 206 154 NOP  <||@
  Comment 207 156 NOP  <||@
  Comment 208 158 NOP  <||@
  Comment 209 160 r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD  <||@
  Comment 213 162 CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD  <||@
  Comment 222 block B7 null  <||@
  Comment 222 164 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 222 166 NOP  <||@
  Comment 223 168 NOP  <||@
  Comment 224 170 NOP  <||@
  Comment 225 172 NOP  <||@
  Comment 226 174 NOP  <||@
  Comment 227 176 NOP  <||@
  Comment 228 178 NOP  <||@
  Comment 229 180 r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD  <||@
  Comment 233 182 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD  <||@
  Comment 242 block B8 null  <||@
  Comment 242 184 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 242 186 NOP  <||@
  Comment 243 188 NOP  <||@
  Comment 244 190 NOP  <||@
  Comment 245 192 NOP  <||@
  Comment 246 194 NOP  <||@
  Comment 247 196 NOP  <||@
  Comment 248 198 NOP  <||@
  Comment 249 200 NOP  <||@
  Comment 250 202 NOP  <||@
  Comment 251 204 NOP  <||@
  Comment 252 206 NOP  <||@
  Comment 253 208 NOP  <||@
  Comment 254 210 NOP  <||@
  Comment 255 212 NOP  <||@
  Comment 256 214 NOP  <||@
  Comment 257 216 NOP  <||@
  Comment 258 218 NOP  <||@
  Comment 259 220 NOP  <||@
  Comment 260 222 NOP  <||@
  Comment 261 224 NOP  <||@
  Comment 262 226 NOP  <||@
  Comment 263 228 NOP  <||@
  Comment 264 230 NOP  <||@
  Comment 265 232 NOP  <||@
  Comment 266 234 NOP  <||@
  Comment 267 236 NOP  <||@
  Comment 268 238 NOP  <||@
  Comment 269 240 NOP  <||@
  Comment 270 242 NOP  <||@
  Comment 271 244 NOP  <||@
  Comment 272 246 NOP  <||@
  Comment 273 248 NOP  <||@
  Comment 274 250 NOP  <||@
  Comment 275 252 NOP  <||@
  Comment 276 254 NOP  <||@
  Comment 277 256 NOP  <||@
  Comment 278 258 NOP  <||@
  Comment 279 260 NOP  <||@
  Comment 280 262 NOP  <||@
  Comment 281 264 NOP  <||@
  Comment 282 266 NOP  <||@
  Comment 283 268 NOP  <||@
  Comment 284 270 NOP  <||@
  Comment 285 272 NOP  <||@
  Comment 286 274 NOP  <||@
  Comment 287 276 NOP  <||@
  Comment 288 278 NOP  <||@
  Comment 289 280 NOP  <||@
  Comment 290 282 NOP  <||@
  Comment 291 284 NOP  <||@
  Comment 292 286 NOP  <||@
  Comment 293 288 NOP  <||@
  Comment 294 290 NOP  <||@
  Comment 295 292 NOP  <||@
  Comment 296 294 NOP  <||@
  Comment 297 296 NOP  <||@
  Comment 298 298 NOP  <||@
  Comment 299 300 NOP  <||@
  Comment 300 302 NOP  <||@
  Comment 301 304 NOP  <||@
  Comment 302 306 NOP  <||@
  Comment 303 308 NOP  <||@
  Comment 304 310 NOP  <||@
  Comment 305 312 NOP  <||@
  Comment 306 314 NOP  <||@
  Comment 307 316 NOP  <||@
  Comment 308 318 NOP  <||@
  Comment 309 320 NOP  <||@
  Comment 310 322 NOP  <||@
  Comment 311 324 NOP  <||@
  Comment 312 326 NOP  <||@
  Comment 313 328 NOP  <||@
  Comment 314 330 NOP  <||@
  Comment 315 332 NOP  <||@
  Comment 316 334 NOP  <||@
  Comment 317 336 NOP  <||@
  Comment 318 338 NOP  <||@
  Comment 319 340 NOP  <||@
  Comment 320 342 NOP  <||@
  Comment 321 344 NOP  <||@
  Comment 322 346 NOP  <||@
  Comment 323 348 NOP  <||@
  Comment 324 350 NOP  <||@
  Comment 325 352 NOP  <||@
  Comment 326 354 NOP  <||@
  Comment 327 356 NOP  <||@
  Comment 328 358 NOP  <||@
  Comment 329 360 NOP  <||@
  Comment 330 362 NOP  <||@
  Comment 331 364 NOP  <||@
  Comment 332 366 NOP  <||@
  Comment 333 368 NOP  <||@
  Comment 334 370 NOP  <||@
  Comment 335 372 NOP  <||@
  Comment 336 374 NOP  <||@
  Comment 337 376 NOP  <||@
  Comment 338 378 NOP  <||@
  Comment 339 380 NOP  <||@
  Comment 340 382 NOP  <||@
  Comment 341 384 NOP  <||@
  Comment 342 386 NOP  <||@
  Comment 343 388 MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD  <||@
  Comment 347 390 rdx|DWORD = INC value: rdx|DWORD size: DWORD  <||@
  Comment 349 392 rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD  <||@
  Comment 352 394 rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD  <||@
  Comment 356 396 rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c]  <||@
  Comment 366 400 (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD  <||@
  Comment 369 404 rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD  <||@
  Comment 373 406 rdx|DWORD = MOV value: rdx|QWORD size: DWORD  <||@
  Comment 375 408 rdx|DWORD = DEC value: rdx|DWORD size: DWORD  <||@
  Comment 377 410 rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD  <||@
  Comment 382 412 rdx|DWORD = SHL value: rdx|DWORD size: DWORD  <||@
  Comment 384 414 rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD  <||@
  Comment 386 416 rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD  <||@
  Comment 391 418 rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD  <||@
  Comment 394 420 MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE  <||@
  Comment 399 422 MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD  <||@
  Comment 403 424 rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD  <||@
  Comment 409 426 r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD  <||@
  Comment 416 428 rax|DWORD = SHL value: rax|DWORD size: DWORD  <||@
  Comment 418 430 r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 421 432 rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD  <||@
  Comment 427 434 rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD  <||@
  Comment 430 436 MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE  <||@
  Comment 435 438 MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD  <||@
  Comment 438 440 r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD  <||@
  Comment 445 442 r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD  <||@
  Comment 452 444 r8|DWORD = SHL value: r8|DWORD size: DWORD  <||@
  Comment 455 446 r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 458 448 r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD  <||@
  Comment 465 450 r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD  <||@
  Comment 469 452 MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE  <||@
  Comment 474 454 MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD  <||@
  Comment 477 456 r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD  <||@
  Comment 484 458 r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD  <||@
  Comment 491 460 r9|DWORD = SHL value: r9|DWORD size: DWORD  <||@
  Comment 494 462 r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 497 464 r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD  <||@
  Comment 504 466 r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD  <||@
  Comment 508 468 MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE  <||@
  Comment 513 470 MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD  <||@
  Comment 516 472 r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD  <||@
  Comment 523 474 r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD  <||@
  Comment 530 476 r8|DWORD = SHL value: r8|DWORD size: DWORD  <||@
  Comment 533 478 r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 536 480 r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD  <||@
  Comment 543 482 r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD  <||@
  Comment 547 484 MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE  <||@
  Comment 552 486 MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD  <||@
  Comment 555 488 r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD  <||@
  Comment 562 490 r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD  <||@
  Comment 569 492 r9|DWORD = SHL value: r9|DWORD size: DWORD  <||@
  Comment 572 494 r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 575 496 r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD  <||@
  Comment 582 498 r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD  <||@
  Comment 586 500 MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE  <||@
  Comment 591 502 MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD  <||@
  Comment 595 504 r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD  <||@
  Comment 602 506 r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD  <||@
  Comment 609 508 r8|DWORD = SHL value: r8|DWORD size: DWORD  <||@
  Comment 612 510 r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 615 512 r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD  <||@
  Comment 622 514 r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD  <||@
  Comment 626 516 MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE  <||@
  Comment 631 518 MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD  <||@
  Comment 635 520 r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD  <||@
  Comment 642 522 r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD  <||@
  Comment 649 524 r9|DWORD = SHL value: r9|DWORD size: DWORD  <||@
  Comment 652 526 r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 655 528 r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD  <||@
  Comment 659 530 r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD  <||@
  Comment 663 532 MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE  <||@
  Comment 668 534 RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 677 POLL_RETURN_FAR  <||@
  Comment 691 block B16 null  <||@
  Comment 691 536 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 691 538 NOP  <||@
  Comment 692 540 NOP  <||@
  Comment 693 542 NOP  <||@
  Comment 694 -1 r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5]  <||@
  Comment 700 544 JUMP ~outgoingValues: [] destination: B16 -> B17  <||@
  Comment 700 block B17 null  <||@
  Comment 700 616 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 700 618 NOP  <||@
  Comment 701 620 NOP  <||@
  Comment 702 622 NOP  <||@
  Comment 703 624 NOP  <||@
  Comment 704 626 NOP  <||@
  Comment 705 628 NOP  <||@
  Comment 706 630 NOP  <||@
  Comment 707 632 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 714 634 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 725 636 DEOPT info [bci:0]  <||@
  Comment 725 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 730 [rsi:0]at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2  |3  |4 
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |-  |-  |-   <||@
  Comment 738 block B14 null  <||@
  Comment 738 546 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 738 548 NOP  <||@
  Comment 739 550 NOP  <||@
  Comment 740 552 NOP  <||@
  Comment 741 -1 r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5]  <||@
  Comment 747 554 JUMP ~outgoingValues: [] destination: B14 -> B17  <||@
  Comment 749 block B10 null  <||@
  Comment 749 556 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 749 558 NOP  <||@
  Comment 750 560 NOP  <||@
  Comment 751 562 NOP  <||@
  Comment 752 -1 r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5]  <||@
  Comment 758 564 JUMP ~outgoingValues: [] destination: B10 -> B17  <||@
  Comment 760 block B11 null  <||@
  Comment 760 566 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 760 568 NOP  <||@
  Comment 761 570 NOP  <||@
  Comment 762 572 NOP  <||@
  Comment 763 -1 r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5]  <||@
  Comment 769 574 JUMP ~outgoingValues: [] destination: B11 -> B17  <||@
  Comment 771 block B9 null  <||@
  Comment 771 576 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 771 578 NOP  <||@
  Comment 772 580 NOP  <||@
  Comment 773 582 NOP  <||@
  Comment 774 -1 r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5]  <||@
  Comment 780 584 JUMP ~outgoingValues: [] destination: B9 -> B17  <||@
  Comment 782 block B12 null  <||@
  Comment 782 586 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 782 588 NOP  <||@
  Comment 783 590 NOP  <||@
  Comment 784 592 NOP  <||@
  Comment 785 -1 r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5]  <||@
  Comment 791 594 JUMP ~outgoingValues: [] destination: B12 -> B17  <||@
  Comment 793 block B15 null  <||@
  Comment 793 596 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 793 598 NOP  <||@
  Comment 794 600 NOP  <||@
  Comment 795 602 NOP  <||@
  Comment 796 -1 r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5]  <||@
  Comment 802 604 JUMP ~outgoingValues: [] destination: B15 -> B17  <||@
  Comment 804 block B13 null  <||@
  Comment 804 606 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 804 608 NOP  <||@
  Comment 805 610 NOP  <||@
  Comment 806 612 NOP  <||@
  Comment 807 -1 r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5]  <||@
  Comment 813 614 JUMP ~outgoingValues: [] destination: B13 -> B17  <||@
  Comment 820 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 845 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 873 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 878 [rsi:0, r10:0]at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2  |3  |4 
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |-  |-  |-   <||@
  Comment 886 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 886 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 892 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 892 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-10849[jdk.internal.math.DoubleToDecimal.append8Digits(int)]"
  method "HotSpotCompilation-10849[jdk.internal.math.DoubleToDecimal.append8Digits(int)]"
  date 1724269731048
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7f789ad93180 448b560849bc0000002b787f00004d03d44d33e4493bc20f85e31e9ffe66669089842400c0feff4883ec189041817f20000000000f85f502000090909090909090909090909048896c2410448b5610428b04d50c000000448b5e0c458bc341ffc0413bc00f864902000090909090909090458d4b02413bc10f869b02000090909090909090418d4b033bc10f865102000090909090909090418d5b043bc30f868002000090909090909090418d7b053bc70f865702000090909090909090418d6b063bc50f862e02000090909090909090458d6b07413bc50f860f02000090909090909090458d5b08413bc30f861102000090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090909090904489460cffc24863c248c1e01c48ba3c871146dc31af0248f7ea48c1ea148bd2ffca8bc2c1e003d1e203c28bd0c1ea1c8d5230438854d01044894e0c81e0ffffff0f448bc041c1e003d1e04403c0418bd0c1ea1c8d5230438854d110894e0c4181e0ffffff0f458bc841c1e10341d1e04503c8458bc141c1e81c458d4030468844d110895e0c4181e1ffffff0f458bc141c1e00341d1e14503c1458bc841c1e91c458d493046884cd310897e0c4181e0ffffff0f458bc841c1e10341d1e04503c8458bc141c1e81c458d4030468844d710896e0c4181e1ffffff0f458bc141c1e00341d1e14503c1458bc841c1e91c458d493046884cd51044896e0c4181e0ffffff0f458bc841c1e10341d1e04503c8458bc141c1e81c458d4030478844d51044895e0c4181e1ffffff0f458bc141c1e00341d1e14503c141c1e81c458d4030478844d310488b6c24104883c418493ba7500400000f878d000000c390909041bae5a0feff909090909090904589978404000049c7879004000000000000e8207d9ffe0f1f84000000000090909041bae58afeffebcf90909041bae55efeffebc490909041bae569feffebb990909041bae553feffebae90909041bae574feffeba390909041bae595feffeb9890909041bae57ffeffeb8d48896c2410e8677d9dfee9fcfcfffff4488d0d5fffffff49898f68040000e92e8b9ffef441c78784040000f5a5feff49c7879004000000000000e88c7c9ffe0f1f840000000000e8051eb3fef4e81f7a9ffef4f4f4f4f4f4f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f78b20335c8, value=140155947602048]:0x7f7899785080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 NOP  <||@
  Comment 59 4 NOP  <||@
  Comment 60 6 NOP  <||@
  Comment 61 8 NOP  <||@
  Comment 62 10 NOP  <||@
  Comment 63 12 NOP  <||@
  Comment 64 14 NOP  <||@
  Comment 65 16 NOP  <||@
  Comment 66 18 NOP  <||@
  Comment 67 20 NOP  <||@
  Comment 68 22 NOP  <||@
  Comment 69 24 NOP  <||@
  Comment 70 26 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 75 28 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4d305f2d slotKind: QWORD  <||@
  Comment 75 34 r10|DWORD[_] = MOV input: [rsi|QWORD[.] + 16] size: DWORD  <||@
  Comment 79 36 rax|DWORD = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 79 [rsi:0, r10:0]at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2  |3  |4 
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |-  |-  |-   <||@
  Comment 79 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 87 38 r11|DWORD = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 91 40 r8|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 97 42 CMPBRANCH (x: rax|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B0 -> B1 falseDestination: B0 -> B16 size: DWORD  <||@
  Comment 106 block B1 null  <||@
  Comment 106 44 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 106 46 NOP  <||@
  Comment 107 48 NOP  <||@
  Comment 108 50 NOP  <||@
  Comment 109 52 NOP  <||@
  Comment 110 54 NOP  <||@
  Comment 111 56 NOP  <||@
  Comment 112 58 NOP  <||@
  Comment 113 60 r9|DWORD = LEA address: [r11|DWORD + 2] size: DWORD  <||@
  Comment 117 62 CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B1 -> B2 falseDestination: B1 -> B15 size: DWORD  <||@
  Comment 126 block B2 null  <||@
  Comment 126 64 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 126 66 NOP  <||@
  Comment 127 68 NOP  <||@
  Comment 128 70 NOP  <||@
  Comment 129 72 NOP  <||@
  Comment 130 74 NOP  <||@
  Comment 131 76 NOP  <||@
  Comment 132 78 NOP  <||@
  Comment 133 80 rcx|DWORD = LEA address: [r11|DWORD + 3] size: DWORD  <||@
  Comment 137 82 CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B14 size: DWORD  <||@
  Comment 145 block B3 null  <||@
  Comment 145 84 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 145 86 NOP  <||@
  Comment 146 88 NOP  <||@
  Comment 147 90 NOP  <||@
  Comment 148 92 NOP  <||@
  Comment 149 94 NOP  <||@
  Comment 150 96 NOP  <||@
  Comment 151 98 NOP  <||@
  Comment 152 100 rbx|DWORD = LEA address: [r11|DWORD + 4] size: DWORD  <||@
  Comment 156 102 CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B13 size: DWORD  <||@
  Comment 164 block B4 null  <||@
  Comment 164 104 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 164 106 NOP  <||@
  Comment 165 108 NOP  <||@
  Comment 166 110 NOP  <||@
  Comment 167 112 NOP  <||@
  Comment 168 114 NOP  <||@
  Comment 169 116 NOP  <||@
  Comment 170 118 NOP  <||@
  Comment 171 120 rdi|DWORD = LEA address: [r11|DWORD + 5] size: DWORD  <||@
  Comment 175 122 CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B4 -> B5 falseDestination: B4 -> B12 size: DWORD  <||@
  Comment 183 block B5 null  <||@
  Comment 183 124 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 183 126 NOP  <||@
  Comment 184 128 NOP  <||@
  Comment 185 130 NOP  <||@
  Comment 186 132 NOP  <||@
  Comment 187 134 NOP  <||@
  Comment 188 136 NOP  <||@
  Comment 189 138 NOP  <||@
  Comment 190 140 rbp|DWORD = LEA address: [r11|DWORD + 6] size: DWORD  <||@
  Comment 194 142 CMPBRANCH (x: rax|DWORD, y: rbp|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B5 -> B6 falseDestination: B5 -> B11 size: DWORD  <||@
  Comment 202 block B6 null  <||@
  Comment 202 144 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 202 146 NOP  <||@
  Comment 203 148 NOP  <||@
  Comment 204 150 NOP  <||@
  Comment 205 152 NOP  <||@
  Comment 206 154 NOP  <||@
  Comment 207 156 NOP  <||@
  Comment 208 158 NOP  <||@
  Comment 209 160 r13|DWORD = LEA address: [r11|DWORD + 7] size: DWORD  <||@
  Comment 213 162 CMPBRANCH (x: rax|DWORD, y: r13|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B6 -> B7 falseDestination: B6 -> B10 size: DWORD  <||@
  Comment 222 block B7 null  <||@
  Comment 222 164 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 222 166 NOP  <||@
  Comment 223 168 NOP  <||@
  Comment 224 170 NOP  <||@
  Comment 225 172 NOP  <||@
  Comment 226 174 NOP  <||@
  Comment 227 176 NOP  <||@
  Comment 228 178 NOP  <||@
  Comment 229 180 r11|DWORD = LEA address: [r11|DWORD + 8] size: DWORD  <||@
  Comment 233 182 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B7 -> B8 falseDestination: B7 -> B9 size: DWORD  <||@
  Comment 242 block B8 null  <||@
  Comment 242 184 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 242 186 NOP  <||@
  Comment 243 188 NOP  <||@
  Comment 244 190 NOP  <||@
  Comment 245 192 NOP  <||@
  Comment 246 194 NOP  <||@
  Comment 247 196 NOP  <||@
  Comment 248 198 NOP  <||@
  Comment 249 200 NOP  <||@
  Comment 250 202 NOP  <||@
  Comment 251 204 NOP  <||@
  Comment 252 206 NOP  <||@
  Comment 253 208 NOP  <||@
  Comment 254 210 NOP  <||@
  Comment 255 212 NOP  <||@
  Comment 256 214 NOP  <||@
  Comment 257 216 NOP  <||@
  Comment 258 218 NOP  <||@
  Comment 259 220 NOP  <||@
  Comment 260 222 NOP  <||@
  Comment 261 224 NOP  <||@
  Comment 262 226 NOP  <||@
  Comment 263 228 NOP  <||@
  Comment 264 230 NOP  <||@
  Comment 265 232 NOP  <||@
  Comment 266 234 NOP  <||@
  Comment 267 236 NOP  <||@
  Comment 268 238 NOP  <||@
  Comment 269 240 NOP  <||@
  Comment 270 242 NOP  <||@
  Comment 271 244 NOP  <||@
  Comment 272 246 NOP  <||@
  Comment 273 248 NOP  <||@
  Comment 274 250 NOP  <||@
  Comment 275 252 NOP  <||@
  Comment 276 254 NOP  <||@
  Comment 277 256 NOP  <||@
  Comment 278 258 NOP  <||@
  Comment 279 260 NOP  <||@
  Comment 280 262 NOP  <||@
  Comment 281 264 NOP  <||@
  Comment 282 266 NOP  <||@
  Comment 283 268 NOP  <||@
  Comment 284 270 NOP  <||@
  Comment 285 272 NOP  <||@
  Comment 286 274 NOP  <||@
  Comment 287 276 NOP  <||@
  Comment 288 278 NOP  <||@
  Comment 289 280 NOP  <||@
  Comment 290 282 NOP  <||@
  Comment 291 284 NOP  <||@
  Comment 292 286 NOP  <||@
  Comment 293 288 NOP  <||@
  Comment 294 290 NOP  <||@
  Comment 295 292 NOP  <||@
  Comment 296 294 NOP  <||@
  Comment 297 296 NOP  <||@
  Comment 298 298 NOP  <||@
  Comment 299 300 NOP  <||@
  Comment 300 302 NOP  <||@
  Comment 301 304 NOP  <||@
  Comment 302 306 NOP  <||@
  Comment 303 308 NOP  <||@
  Comment 304 310 NOP  <||@
  Comment 305 312 NOP  <||@
  Comment 306 314 NOP  <||@
  Comment 307 316 NOP  <||@
  Comment 308 318 NOP  <||@
  Comment 309 320 NOP  <||@
  Comment 310 322 NOP  <||@
  Comment 311 324 NOP  <||@
  Comment 312 326 NOP  <||@
  Comment 313 328 NOP  <||@
  Comment 314 330 NOP  <||@
  Comment 315 332 NOP  <||@
  Comment 316 334 NOP  <||@
  Comment 317 336 NOP  <||@
  Comment 318 338 NOP  <||@
  Comment 319 340 NOP  <||@
  Comment 320 342 NOP  <||@
  Comment 321 344 NOP  <||@
  Comment 322 346 NOP  <||@
  Comment 323 348 NOP  <||@
  Comment 324 350 NOP  <||@
  Comment 325 352 NOP  <||@
  Comment 326 354 NOP  <||@
  Comment 327 356 NOP  <||@
  Comment 328 358 NOP  <||@
  Comment 329 360 NOP  <||@
  Comment 330 362 NOP  <||@
  Comment 331 364 NOP  <||@
  Comment 332 366 NOP  <||@
  Comment 333 368 NOP  <||@
  Comment 334 370 NOP  <||@
  Comment 335 372 NOP  <||@
  Comment 336 374 NOP  <||@
  Comment 337 376 NOP  <||@
  Comment 338 378 NOP  <||@
  Comment 339 380 NOP  <||@
  Comment 340 382 NOP  <||@
  Comment 341 384 NOP  <||@
  Comment 342 386 NOP  <||@
  Comment 343 388 MOV (x: [rsi|QWORD[.] + 12], y: r8|DWORD) size: DWORD  <||@
  Comment 347 390 rdx|DWORD = INC value: rdx|DWORD size: DWORD  <||@
  Comment 349 392 rax|QWORD = MOVSXD value: rdx|DWORD size: QWORD  <||@
  Comment 352 394 rax|QWORD = SHL x: rax|QWORD y: 28 size: QWORD  <||@
  Comment 356 396 rdx|QWORD = MOVE input: long[193428131138340668|0x2af31dc4611873c]  <||@
  Comment 366 400 (highResult: rdx|QWORD, lowResult: rax|QWORD) = IMUL (highX: -, lowX: rax|QWORD, y: rdx|QWORD) size: QWORD  <||@
  Comment 369 404 rdx|QWORD = SHR x: rdx|QWORD y: 20 size: QWORD  <||@
  Comment 373 406 rdx|DWORD = MOV value: rdx|QWORD size: DWORD  <||@
  Comment 375 408 rdx|DWORD = DEC value: rdx|DWORD size: DWORD  <||@
  Comment 377 410 rax|DWORD = SHL x: rdx|DWORD y: 3 size: DWORD  <||@
  Comment 382 412 rdx|DWORD = SHL value: rdx|DWORD size: DWORD  <||@
  Comment 384 414 rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD  <||@
  Comment 386 416 rdx|DWORD = SHR x: rax|DWORD y: 28 size: DWORD  <||@
  Comment 391 418 rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD  <||@
  Comment 394 420 MOVB (x: [r8|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE  <||@
  Comment 399 422 MOV (x: [rsi|QWORD[.] + 12], y: r9|DWORD) size: DWORD  <||@
  Comment 403 424 rax|DWORD = AND x: rax|DWORD y: 268435455 size: DWORD  <||@
  Comment 409 426 r8|DWORD = SHL x: rax|DWORD y: 3 size: DWORD  <||@
  Comment 416 428 rax|DWORD = SHL value: rax|DWORD size: DWORD  <||@
  Comment 418 430 r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 421 432 rdx|DWORD = SHR x: r8|DWORD y: 28 size: DWORD  <||@
  Comment 427 434 rdx|DWORD = LEA address: [rdx|DWORD + 48] size: DWORD  <||@
  Comment 430 436 MOVB (x: [r9|DWORD + r10|DWORD[_] * 8 + 16], y: rdx|BYTE(DWORD)) size: BYTE  <||@
  Comment 435 438 MOV (x: [rsi|QWORD[.] + 12], y: rcx|DWORD) size: DWORD  <||@
  Comment 438 440 r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD  <||@
  Comment 445 442 r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD  <||@
  Comment 452 444 r8|DWORD = SHL value: r8|DWORD size: DWORD  <||@
  Comment 455 446 r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 458 448 r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD  <||@
  Comment 465 450 r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD  <||@
  Comment 469 452 MOVB (x: [rcx|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE  <||@
  Comment 474 454 MOV (x: [rsi|QWORD[.] + 12], y: rbx|DWORD) size: DWORD  <||@
  Comment 477 456 r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD  <||@
  Comment 484 458 r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD  <||@
  Comment 491 460 r9|DWORD = SHL value: r9|DWORD size: DWORD  <||@
  Comment 494 462 r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 497 464 r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD  <||@
  Comment 504 466 r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD  <||@
  Comment 508 468 MOVB (x: [rbx|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE  <||@
  Comment 513 470 MOV (x: [rsi|QWORD[.] + 12], y: rdi|DWORD) size: DWORD  <||@
  Comment 516 472 r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD  <||@
  Comment 523 474 r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD  <||@
  Comment 530 476 r8|DWORD = SHL value: r8|DWORD size: DWORD  <||@
  Comment 533 478 r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 536 480 r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD  <||@
  Comment 543 482 r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD  <||@
  Comment 547 484 MOVB (x: [rdi|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE  <||@
  Comment 552 486 MOV (x: [rsi|QWORD[.] + 12], y: rbp|DWORD) size: DWORD  <||@
  Comment 555 488 r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD  <||@
  Comment 562 490 r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD  <||@
  Comment 569 492 r9|DWORD = SHL value: r9|DWORD size: DWORD  <||@
  Comment 572 494 r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 575 496 r9|DWORD = SHR x: r8|DWORD y: 28 size: DWORD  <||@
  Comment 582 498 r9|DWORD = LEA address: [r9|DWORD + 48] size: DWORD  <||@
  Comment 586 500 MOVB (x: [rbp|DWORD + r10|DWORD[_] * 8 + 16], y: r9|BYTE(DWORD)) size: BYTE  <||@
  Comment 591 502 MOV (x: [rsi|QWORD[.] + 12], y: r13|DWORD) size: DWORD  <||@
  Comment 595 504 r8|DWORD = AND x: r8|DWORD y: 268435455 size: DWORD  <||@
  Comment 602 506 r9|DWORD = SHL x: r8|DWORD y: 3 size: DWORD  <||@
  Comment 609 508 r8|DWORD = SHL value: r8|DWORD size: DWORD  <||@
  Comment 612 510 r9|DWORD = ADD (x: r9|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 615 512 r8|DWORD = SHR x: r9|DWORD y: 28 size: DWORD  <||@
  Comment 622 514 r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD  <||@
  Comment 626 516 MOVB (x: [r13|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE  <||@
  Comment 631 518 MOV (x: [rsi|QWORD[.] + 12], y: r11|DWORD) size: DWORD  <||@
  Comment 635 520 r9|DWORD = AND x: r9|DWORD y: 268435455 size: DWORD  <||@
  Comment 642 522 r8|DWORD = SHL x: r9|DWORD y: 3 size: DWORD  <||@
  Comment 649 524 r9|DWORD = SHL value: r9|DWORD size: DWORD  <||@
  Comment 652 526 r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 655 528 r8|DWORD = SHR x: r8|DWORD y: 28 size: DWORD  <||@
  Comment 659 530 r8|DWORD = LEA address: [r8|DWORD + 48] size: DWORD  <||@
  Comment 663 532 MOVB (x: [r11|DWORD + r10|DWORD[_] * 8 + 16], y: r8|BYTE(DWORD)) size: BYTE  <||@
  Comment 668 534 RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 677 POLL_RETURN_FAR  <||@
  Comment 691 block B16 null  <||@
  Comment 691 536 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 691 538 NOP  <||@
  Comment 692 540 NOP  <||@
  Comment 693 542 NOP  <||@
  Comment 694 -1 r10|DWORD = MOVE input: int[-89883|0xfffffffffffea0e5]  <||@
  Comment 700 544 JUMP ~outgoingValues: [] destination: B16 -> B17  <||@
  Comment 700 block B17 null  <||@
  Comment 700 616 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 700 618 NOP  <||@
  Comment 701 620 NOP  <||@
  Comment 702 622 NOP  <||@
  Comment 703 624 NOP  <||@
  Comment 704 626 NOP  <||@
  Comment 705 628 NOP  <||@
  Comment 706 630 NOP  <||@
  Comment 707 632 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 714 634 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 725 636 DEOPT info [bci:0]  <||@
  Comment 725 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 730 [rsi:0]at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2  |3  |4 
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |-  |-  |-   <||@
  Comment 738 block B14 null  <||@
  Comment 738 546 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 738 548 NOP  <||@
  Comment 739 550 NOP  <||@
  Comment 740 552 NOP  <||@
  Comment 741 -1 r10|DWORD = MOVE input: int[-95515|0xfffffffffffe8ae5]  <||@
  Comment 747 554 JUMP ~outgoingValues: [] destination: B14 -> B17  <||@
  Comment 749 block B10 null  <||@
  Comment 749 556 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 749 558 NOP  <||@
  Comment 750 560 NOP  <||@
  Comment 751 562 NOP  <||@
  Comment 752 -1 r10|DWORD = MOVE input: int[-106779|0xfffffffffffe5ee5]  <||@
  Comment 758 564 JUMP ~outgoingValues: [] destination: B10 -> B17  <||@
  Comment 760 block B11 null  <||@
  Comment 760 566 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 760 568 NOP  <||@
  Comment 761 570 NOP  <||@
  Comment 762 572 NOP  <||@
  Comment 763 -1 r10|DWORD = MOVE input: int[-103963|0xfffffffffffe69e5]  <||@
  Comment 769 574 JUMP ~outgoingValues: [] destination: B11 -> B17  <||@
  Comment 771 block B9 null  <||@
  Comment 771 576 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 771 578 NOP  <||@
  Comment 772 580 NOP  <||@
  Comment 773 582 NOP  <||@
  Comment 774 -1 r10|DWORD = MOVE input: int[-109595|0xfffffffffffe53e5]  <||@
  Comment 780 584 JUMP ~outgoingValues: [] destination: B9 -> B17  <||@
  Comment 782 block B12 null  <||@
  Comment 782 586 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 782 588 NOP  <||@
  Comment 783 590 NOP  <||@
  Comment 784 592 NOP  <||@
  Comment 785 -1 r10|DWORD = MOVE input: int[-101147|0xfffffffffffe74e5]  <||@
  Comment 791 594 JUMP ~outgoingValues: [] destination: B12 -> B17  <||@
  Comment 793 block B15 null  <||@
  Comment 793 596 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 793 598 NOP  <||@
  Comment 794 600 NOP  <||@
  Comment 795 602 NOP  <||@
  Comment 796 -1 r10|DWORD = MOVE input: int[-92699|0xfffffffffffe95e5]  <||@
  Comment 802 604 JUMP ~outgoingValues: [] destination: B15 -> B17  <||@
  Comment 804 block B13 null  <||@
  Comment 804 606 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 804 608 NOP  <||@
  Comment 805 610 NOP  <||@
  Comment 806 612 NOP  <||@
  Comment 807 -1 r10|DWORD = MOVE input: int[-98331|0xfffffffffffe7fe5]  <||@
  Comment 813 614 JUMP ~outgoingValues: [] destination: B13 -> B17  <||@
  Comment 820 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 845 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 873 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 878 [rsi:0, r10:0]at jdk.internal.math.DoubleToDecimal.append8Digits(DoubleToDecimal.java:484) [bci: 0, duringCall: false, rethrow: false]
              |0             |1          |2  |3  |4 
     locals:  |rsi|QWORD[.]  |rdx|DWORD  |-  |-  |-   <||@
  Comment 886 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 886 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 892 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 892 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
