begin_compilation
  name " HotSpotCompilation-4111[java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence)]"
  method "HotSpotCompilation-4111[java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence)]"
  date 1724269672326
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a601 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a601  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# java.util.regex.Pattern$Branch
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?11 ?88 v641 v638 ?29 ?120 ?73 v637 ?503 ?505 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v638 <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a601 a618 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a601 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v638 
lastLocationAccess: - 
=== Succesors ===
next: i602 
=== Usages ===
v640 v639 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v638 lastLocationAccess: - #next: i602  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# java.util.regex.Matcher
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?11 v286 ?29 ?503 ?73 ?120 ?504 v334 ?67 ?505 v192 ?88 v645 ?506 v236 ?115 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?11 v286 ?29 v334 ?73 v322 ?503 v192 ?88 v224 ?505 v236 ?120 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a4 <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: a java.lang.Object
uncheckedStamp: a java.lang.CharSequence
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?11 v286 ?29 v334 ?73 ?503 v192 ?88 ?505 v236 ?120 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: iconst_0
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 
=== Succesors ===
=== Usages ===
v519 i602 a606 a609 v607 i610 v613 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4  <|@  <|@
f <@~|@floating>@ <|@
tid v639 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a601 
=== Succesors ===
=== Usages ===
i602 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a601  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i602 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-40203|0xffffffffffff62f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v639 
lastLocationAccess: - 
=== Succesors ===
next: v409 
=== Usages ===
v162 
=== Predecessor ===
a601 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v639 lastLocationAccess: - #next: v409  <|@  <|@
f <@~|@floating>@ <|@
tid i6 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
rawvalue: 0
stableDimension: 0
stamp: i32 [0]
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
?120 v30 v40 v94 v162 ?88 v89 ?503 ?88 ?29 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v162 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i602 
y: i6 
=== Succesors ===
=== Usages ===
v409 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i602 y: i6  <|@  <|@
f <@~|@floating>@ <|@
tid j516 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j543 j543 j518 j518 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v409 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v162 
=== Succesors ===
trueSuccessor: v408 
falseSuccessor: v406 
=== Usages ===
=== Predecessor ===
i602 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v162 #trueSuccessor: v408 #falseSuccessor: v406  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v408 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
next: v520 
=== Usages ===
=== Predecessor ===
v409 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v520  <|@  <|@
f <@~|@floating>@ <|@
tid i521 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -90139
stableDimension: 0
stamp: i32 [-90139]
stampKind: i32
value: int[-90139|0xfffffffffffe9fe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i517 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v520 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v513 
=== Predecessor ===
v408 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v406 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
next: i603 
=== Usages ===
=== Predecessor ===
v409 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i603  <|@  <|@
f <@~|@floating>@ <|@
tid v637 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
i603 i620 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i603 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v637 
lastLocationAccess: - 
=== Succesors ===
next: v489 
=== Usages ===
v134 
=== Predecessor ===
v406 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v637 lastLocationAccess: - #next: v489  <|@  <|@
f <@~|@floating>@ <|@
tid i46 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i47 v49 v50 i133 v134 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v134 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i603 
y: i46 
=== Succesors ===
=== Usages ===
v489 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i603 y: i46  <|@  <|@
f <@~|@floating>@ <|@
tid j152 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
rawvalue: 20
stableDimension: 0
stamp: i64 [20]
stampKind: i64
value: long[20|0x14]
=== Inputs ===
=== Succesors ===
=== Usages ===
j543 j518 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v489 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v134 
=== Succesors ===
trueSuccessor: v487 
falseSuccessor: v488 
=== Usages ===
=== Predecessor ===
i603 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v134 #trueSuccessor: v487 #falseSuccessor: v488  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v487 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
stamp: void
=== Inputs ===
=== Succesors ===
next: v522 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v522  <|@  <|@
f <@~|@floating>@ <|@
tid i523 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -124435
stableDimension: 0
stamp: i32 [-124435]
stampKind: i32
value: int[-124435|0xfffffffffffe19ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i517 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v522 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v513 
=== Predecessor ===
v487 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v488 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
stamp: void
=== Inputs ===
=== Succesors ===
next: a604 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a604  <|@  <|@
f <@~|@floating>@ <|@
tid v640 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a601 
=== Succesors ===
=== Usages ===
a604 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a601  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a604 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v640 
lastLocationAccess: - 
=== Succesors ===
next: v83 
=== Usages ===
a171 v354 v646 v649 v668 
=== Predecessor ===
v488 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v640 lastLocationAccess: - #next: v83  <|@  <|@
f <@~|@floating>@ <|@
tid v354 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a604 
=== Succesors ===
=== Usages ===
v83 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a604  <|@  <|@
f <@~|@floating>@ <|@
tid v641 <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a605 a622 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@*|@fixed>@ <|@
tid v83 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
profileData: PROFILED designatedSuccessorProbability: 0.3750160837844817
stamp: void
=== Inputs ===
condition: v354 
=== Succesors ===
trueSuccessor: v82 
falseSuccessor: v81 
=== Usages ===
=== Predecessor ===
a604 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v354 #trueSuccessor: v82 #falseSuccessor: v81  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v82 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: a605 
=== Usages ===
=== Predecessor ===
v83 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a605  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a605 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v641 
lastLocationAccess: - 
=== Succesors ===
next: a606 
=== Usages ===
v642 
=== Predecessor ===
v82 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v641 lastLocationAccess: - #next: a606  <|@  <|@
f <@~|@floating>@ <|@
tid v642 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a605 
=== Succesors ===
=== Usages ===
a606 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a605  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a606 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-45323|0xffffffffffff4ef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v642 
lastLocationAccess: - 
=== Succesors ===
next: v607 
=== Usages ===
a181 v667 
=== Predecessor ===
a605 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v642 lastLocationAccess: - #next: v607  <|@  <|@
f <@~|@floating>@ <|@
tid v667 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a606 
=== Succesors ===
=== Usages ===
v607 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a606  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v607 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-46859|0xffffffffffff48f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v667 
lastLocationAccess: - 
=== Succesors ===
next: v188 
=== Usages ===
v580 
=== Predecessor ===
a606 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v667 lastLocationAccess: - #next: v188  <|@  <|@
f <@~|@floating>@ <|@
tid v580 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v607 
=== Succesors ===
=== Usages ===
v643 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v607  <|@  <|@
f <@~|@floating>@ <|@
tid v643 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v580 
index: - 
=== Succesors ===
=== Usages ===
v188 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v580 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v188 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v643 
lastLocationAccess: - 
=== Succesors ===
next: j191 
=== Usages ===
v644 v192 
=== Predecessor ===
v607 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v643 lastLocationAccess: - #next: j191  <|@  <|@
f <@~|@floating>@ <|@
tid v644 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v188 
index: - 
=== Succesors ===
=== Usages ===
j191 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v188 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j191 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v644 
lastLocationAccess: - 
=== Succesors ===
next: i87 
=== Usages ===
v192 
=== Predecessor ===
v188 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v644 lastLocationAccess: - #next: i87  <|@  <|@
f <@~|@floating>@ <|@
tid a181 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a606 
=== Succesors ===
=== Usages ===
v192 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a606  <|@  <|@
tid v192 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j191 
metaspaceMethod: v188 
arguments: a181 a2 i3 a4 
=== Succesors ===
=== Usages ===
i87 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j191 metaspaceMethod: v188 arguments: a181 a2 i3 a4  <|@  <|@
tid ?503 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i6 
=== Succesors ===
=== Usages ===
i87 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i6  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i87 <|@
d <@d|@=== Debug Properties ===
bci: 32
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v192 
stateDuring: ?503 
=== Succesors ===
next: v493 
=== Usages ===
v89 
=== Predecessor ===
j191 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v192 stateDuring: ?503 #next: v493  <|@  <|@
f <@~|@floating>@ <|@
tid v89 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i87 
y: i6 
=== Succesors ===
=== Usages ===
v493 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i87 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v493 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v89 
=== Succesors ===
trueSuccessor: v491 
falseSuccessor: v492 
=== Usages ===
=== Predecessor ===
i87 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v89 #trueSuccessor: v491 #falseSuccessor: v492  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v491 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v490 
=== Usages ===
=== Predecessor ===
v493 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v490  <|@  <|@
tid ?88 <|@
d <@d|@=== Debug Properties ===
bci: 35
bytecode: ifeq
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i6 a1 a2 i3 a4 i6 
=== Succesors ===
=== Usages ===
v490 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i6 a1 a2 i3 a4 i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v490 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
reason: UnreachedCode
speculation: {0x0000000000000294[index: 20, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?88 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v491 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?88  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v492 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
next: v130 
=== Usages ===
=== Predecessor ===
v493 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v130  <|@  <|@
f <@*|@fixed>@ <|@
tid v130 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v128 
=== Predecessor ===
v492 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v81 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
stamp: void
=== Inputs ===
=== Succesors ===
next: v608 
=== Usages ===
=== Predecessor ===
v83 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v608  <|@  <|@
f <@~|@floating>@ <|@
tid v668 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a604 
=== Succesors ===
=== Usages ===
v608 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a604  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v608 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v668 
lastLocationAccess: - 
=== Succesors ===
next: v421 
=== Usages ===
v599 
=== Predecessor ===
v81 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v668 lastLocationAccess: - #next: v421  <|@  <|@
f <@~|@floating>@ <|@
tid v598 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
rawvalue: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
stampKind: Klass*(compressed base: 140154094223360 shift: 0)
value: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v599 v600 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v599 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v608 
y: v598 
=== Succesors ===
=== Usages ===
v421 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v608 y: v598  <|@  <|@
f <@~|@floating>@ <|@
tid j532 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: 1300
stableDimension: 0
stamp: i64 [1300]
stampKind: i64
value: long[1300|0x514]
=== Inputs ===
=== Succesors ===
=== Usages ===
j518 j543 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v421 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v599 
=== Succesors ===
trueSuccessor: v418 
falseSuccessor: v420 
=== Usages ===
=== Predecessor ===
v608 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v599 #trueSuccessor: v418 #falseSuccessor: v420  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v418 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: a609 
=== Usages ===
=== Predecessor ===
v421 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a609  <|@  <|@
f <@~|@floating>@ <|@
tid v645 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
a609 a615 a631 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a609 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: int[-50187|0xffffffffffff3bf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: n# int[]
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v645 
lastLocationAccess: - 
=== Succesors ===
next: i610 
=== Usages ===
a200 v647 
=== Predecessor ===
v418 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v645 lastLocationAccess: - #next: i610  <|@  <|@
f <@~|@floating>@ <|@
tid v647 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a609 
=== Succesors ===
=== Usages ===
i610 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a609  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i610 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-52235|0xffffffffffff33f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v647 
lastLocationAccess: - 
=== Succesors ===
next: i611 
=== Usages ===
v217 
=== Predecessor ===
a609 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v647 lastLocationAccess: - #next: i611  <|@  <|@
f <@~|@floating>@ <|@
tid v646 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a604 
=== Succesors ===
=== Usages ===
i611 i617 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a604  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i611 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v646 
lastLocationAccess: - 
=== Succesors ===
next: v433 
=== Usages ===
v217 j356 
=== Predecessor ===
i610 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v646 lastLocationAccess: - #next: v433  <|@  <|@
f <@~|@floating>@ <|@
tid v217 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i611 
y: i610 
=== Succesors ===
=== Usages ===
v433 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i611 y: i610  <|@  <|@
f <@*|@fixed>@ <|@
tid v433 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v217 
=== Succesors ===
trueSuccessor: v430 
falseSuccessor: v432 
=== Usages ===
=== Predecessor ===
i611 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v217 #trueSuccessor: v430 #falseSuccessor: v432  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v430 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: a612 
=== Usages ===
v224 
=== Predecessor ===
v433 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a612  <|@  <|@
f <@~|@floating>@ <|@
tid v649 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a604 
=== Succesors ===
=== Usages ===
a612 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a604  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a612 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v649 
lastLocationAccess: - 
=== Succesors ===
next: v613 
=== Usages ===
a227 v669 
=== Predecessor ===
v430 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v649 lastLocationAccess: - #next: v613  <|@  <|@
f <@~|@floating>@ <|@
tid v669 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a612 
=== Succesors ===
=== Usages ===
v613 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a612  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v613 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-58635|0xffffffffffff1af5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v669 
lastLocationAccess: - 
=== Succesors ===
next: i614 
=== Usages ===
v586 
=== Predecessor ===
a612 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v669 lastLocationAccess: - #next: i614  <|@  <|@
f <@~|@floating>@ <|@
tid a200 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a609 
=== Succesors ===
=== Usages ===
v648 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a609  <|@  <|@
f <@~|@floating>@ <|@
tid j356 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i611 
=== Succesors ===
=== Usages ===
v648 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i611  <|@  <|@
f <@~|@floating>@ <|@
tid v648 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a200 
index: j356 
=== Succesors ===
=== Usages ===
v224 i614 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a200 index: j356  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i614 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v648 
lastLocationAccess: - 
=== Succesors ===
next: v224 
=== Usages ===
?504 ?115 v252 
=== Predecessor ===
v613 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v648 lastLocationAccess: - #next: v224  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v224 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v430 
address: v648 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v233 
=== Usages ===
=== Predecessor ===
i614 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v430 address: v648 lastLocationAccess: - value: i3 stateAfter: - #next: v233  <|@  <|@
f <@~|@floating>@ <|@
tid v586 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v613 
=== Succesors ===
=== Usages ===
v650 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v613  <|@  <|@
f <@~|@floating>@ <|@
tid v650 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v586 
index: - 
=== Succesors ===
=== Usages ===
v233 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v586 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v233 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v650 
lastLocationAccess: - 
=== Succesors ===
next: j235 
=== Usages ===
v651 v236 
=== Predecessor ===
v224 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v650 lastLocationAccess: - #next: j235  <|@  <|@
f <@~|@floating>@ <|@
tid v651 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v233 
index: - 
=== Succesors ===
=== Usages ===
j235 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v233 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j235 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v651 
lastLocationAccess: - 
=== Succesors ===
next: i114 
=== Usages ===
v236 
=== Predecessor ===
v233 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v651 lastLocationAccess: - #next: i114  <|@  <|@
f <@~|@floating>@ <|@
tid a227 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a612 
=== Succesors ===
=== Usages ===
v236 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a612  <|@  <|@
tid v236 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j235 
metaspaceMethod: v233 
arguments: a227 a2 i3 a4 
=== Succesors ===
=== Usages ===
i114 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j235 metaspaceMethod: v233 arguments: a227 a2 i3 a4  <|@  <|@
tid ?120 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i6 
=== Succesors ===
=== Usages ===
?504 ?115 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i6  <|@  <|@
f <@~|@floating>@ <|@
tid a171 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a604 
=== Succesors ===
=== Usages ===
?115 ?504 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a604  <|@  <|@
tid ?504 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?120 
values: a171 a2 - - i614 
=== Succesors ===
=== Usages ===
i114 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?120 values: a171 a2 - - i614  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i114 <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v236 
stateDuring: ?504 
=== Succesors ===
next: a615 
=== Usages ===
v94 ?115 
=== Predecessor ===
j235 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v236 stateDuring: ?504 #next: a615  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a615 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v645 
lastLocationAccess: - 
=== Succesors ===
next: i616 
=== Usages ===
a238 v652 
=== Predecessor ===
i114 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v645 lastLocationAccess: - #next: i616  <|@  <|@
tid ?115 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?120 
values: i114 a171 a2 - - i614 
=== Succesors ===
=== Usages ===
v674 i616 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?120 values: i114 a171 a2 - - i614  <|@  <|@
f <@~|@floating>@ <|@
tid v652 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a615 
=== Succesors ===
=== Usages ===
i616 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a615  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i616 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-61707|0xffffffffffff0ef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?115 
guard: - 
address: v652 
lastLocationAccess: - 
=== Succesors ===
next: i617 
=== Usages ===
v245 
=== Predecessor ===
a615 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?115 guard: - address: v652 lastLocationAccess: - #next: i617  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i617 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v646 
lastLocationAccess: - 
=== Succesors ===
next: v445 
=== Usages ===
j357 v245 
=== Predecessor ===
i616 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v646 lastLocationAccess: - #next: v445  <|@  <|@
f <@~|@floating>@ <|@
tid v245 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i617 
y: i616 
=== Succesors ===
=== Usages ===
v445 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i617 y: i616  <|@  <|@
f <@*|@fixed>@ <|@
tid v445 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v245 
=== Succesors ===
trueSuccessor: v442 
falseSuccessor: v444 
=== Usages ===
=== Predecessor ===
i617 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v245 #trueSuccessor: v442 #falseSuccessor: v444  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v442 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v252 
=== Usages ===
v252 
=== Predecessor ===
v445 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v252  <|@  <|@
f <@~|@floating>@ <|@
tid a238 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a615 
=== Succesors ===
=== Usages ===
v653 a136 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a615  <|@  <|@
f <@~|@floating>@ <|@
tid j357 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i617 
=== Succesors ===
=== Usages ===
v653 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i617  <|@  <|@
f <@~|@floating>@ <|@
tid v653 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a238 
index: j357 
=== Succesors ===
=== Usages ===
v252 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a238 index: j357  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v252 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v442 
address: v653 
lastLocationAccess: - 
value: i614 
stateAfter: - 
=== Succesors ===
next: v97 
=== Usages ===
=== Predecessor ===
v442 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v442 address: v653 lastLocationAccess: - value: i614 stateAfter: - #next: v97  <|@  <|@
f <@~|@floating>@ <|@
tid v94 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i114 
y: i6 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i114 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
profileData: PROFILED designatedSuccessorProbability: 0.5999613527111213
stamp: void
=== Inputs ===
condition: v94 
=== Succesors ===
trueSuccessor: v96 
falseSuccessor: v95 
=== Usages ===
=== Predecessor ===
v252 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v94 #trueSuccessor: v96 #falseSuccessor: v95  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v96 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
stamp: void
=== Inputs ===
=== Succesors ===
next: v8 
=== Usages ===
=== Predecessor ===
v97 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v8  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
v96 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i133 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i46 i47 
=== Succesors ===
=== Usages ===
?11 v13 j358 ?29 v288 ?73 i47 ?505 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i46 i47  <|@  <|@
f <@~|@floating>@ <|@
tid a136 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
stamp: a# int[]
valueDescription: a java.lang.Object
=== Inputs ===
merge: v9 
values: a238 a336 
=== Succesors ===
=== Usages ===
v660 v661 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: a238 a336  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: true
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 1.0
loopType: SIMPLE_LOOP
nextEndIndex: 1
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: a618 
=== Usages ===
i133 v33 v42 v48 a136 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: a618  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a618 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v638 
lastLocationAccess: - 
=== Succesors ===
next: i619 
=== Usages ===
a255 v654 
=== Predecessor ===
v9 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v638 lastLocationAccess: - #next: i619  <|@  <|@
tid ?11 <|@
d <@d|@=== Debug Properties ===
bci: 3
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i133 
=== Succesors ===
=== Usages ===
v544 i619 a623 i626 v624 v629 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i133  <|@  <|@
f <@~|@floating>@ <|@
tid v654 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a618 
=== Succesors ===
=== Usages ===
i619 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a618  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i619 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-65803|0xfffffffffffefef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?11 
guard: - 
address: v654 
lastLocationAccess: - 
=== Succesors ===
next: v453 
=== Usages ===
v288 
=== Predecessor ===
a618 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?11 guard: - address: v654 lastLocationAccess: - #next: v453  <|@  <|@
f <@~|@floating>@ <|@
tid v288 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i133 
y: i619 
=== Succesors ===
=== Usages ===
v453 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i133 y: i619  <|@  <|@
f <@*|@fixed>@ <|@
tid v453 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v288 
=== Succesors ===
trueSuccessor: v450 
falseSuccessor: v452 
=== Usages ===
=== Predecessor ===
i619 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v288 #trueSuccessor: v450 #falseSuccessor: v452  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v450 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
next: i620 
=== Usages ===
=== Predecessor ===
v453 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i620  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i620 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v637 
lastLocationAccess: - 
=== Succesors ===
next: v497 
=== Usages ===
v13 
=== Predecessor ===
v450 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v637 lastLocationAccess: - #next: v497  <|@  <|@
f <@~|@floating>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i133 
y: i620 
=== Succesors ===
=== Usages ===
v497 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i133 y: i620  <|@  <|@
f <@*|@fixed>@ <|@
tid v497 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v13 
=== Succesors ===
trueSuccessor: v495 
falseSuccessor: v496 
=== Usages ===
=== Predecessor ===
i620 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v13 #trueSuccessor: v495 #falseSuccessor: v496  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v495 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
stamp: void
=== Inputs ===
=== Succesors ===
next: a621 
=== Usages ===
=== Predecessor ===
v497 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a621  <|@  <|@
f <@~|@floating>@ <|@
tid a255 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
op: Uncompress
stamp: a java.util.regex.Pattern$Node[]
=== Inputs ===
value: a618 
=== Succesors ===
=== Usages ===
v655 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a618  <|@  <|@
f <@~|@floating>@ <|@
tid j358 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i133 
=== Succesors ===
=== Usages ===
v655 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i133  <|@  <|@
f <@~|@floating>@ <|@
tid v655 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a255 
index: j358 
=== Succesors ===
=== Usages ===
a621 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a255 index: j358  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a621 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v655 
lastLocationAccess: - 
=== Succesors ===
next: v24 
=== Usages ===
v359 a296 v659 v662 v671 
=== Predecessor ===
v495 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v655 lastLocationAccess: - #next: v24  <|@  <|@
f <@~|@floating>@ <|@
tid v359 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a621 
=== Succesors ===
=== Usages ===
v24 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a621  <|@  <|@
f <@*|@fixed>@ <|@
tid v24 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
profileData: PROFILED designatedSuccessorProbability: 0.3750160837844817
stamp: void
=== Inputs ===
condition: v359 
=== Succesors ===
trueSuccessor: v23 
falseSuccessor: v22 
=== Usages ===
=== Predecessor ===
a621 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v359 #trueSuccessor: v23 #falseSuccessor: v22  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v23 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: a622 
=== Usages ===
=== Predecessor ===
v24 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a622  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a622 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v641 
lastLocationAccess: - 
=== Succesors ===
next: a623 
=== Usages ===
v656 
=== Predecessor ===
v23 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v641 lastLocationAccess: - #next: a623  <|@  <|@
f <@~|@floating>@ <|@
tid v656 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a622 
=== Succesors ===
=== Usages ===
a623 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a622  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a623 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-69899|0xfffffffffffeeef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?11 
guard: - 
address: v656 
lastLocationAccess: - 
=== Succesors ===
next: v624 
=== Usages ===
a277 v670 
=== Predecessor ===
a622 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?11 guard: - address: v656 lastLocationAccess: - #next: v624  <|@  <|@
f <@~|@floating>@ <|@
tid v670 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a623 
=== Succesors ===
=== Usages ===
v624 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a623  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v624 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-71435|0xfffffffffffee8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?11 
guard: - 
address: v670 
lastLocationAccess: - 
=== Succesors ===
next: v283 
=== Usages ===
v589 
=== Predecessor ===
a623 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?11 guard: - address: v670 lastLocationAccess: - #next: v283  <|@  <|@
f <@~|@floating>@ <|@
tid v589 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v624 
=== Succesors ===
=== Usages ===
v657 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v624  <|@  <|@
f <@~|@floating>@ <|@
tid v657 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v589 
index: - 
=== Succesors ===
=== Usages ===
v283 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v589 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v283 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v657 
lastLocationAccess: - 
=== Succesors ===
next: j285 
=== Usages ===
v658 v286 
=== Predecessor ===
v624 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v657 lastLocationAccess: - #next: j285  <|@  <|@
f <@~|@floating>@ <|@
tid v658 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v283 
index: - 
=== Succesors ===
=== Usages ===
j285 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v283 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j285 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v658 
lastLocationAccess: - 
=== Succesors ===
next: i28 
=== Usages ===
v286 
=== Predecessor ===
v283 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v658 lastLocationAccess: - #next: i28  <|@  <|@
f <@~|@floating>@ <|@
tid a277 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a623 
=== Succesors ===
=== Usages ===
v286 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a623  <|@  <|@
tid v286 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j285 
metaspaceMethod: v283 
arguments: a277 a2 i3 a4 
=== Succesors ===
=== Usages ===
i28 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j285 metaspaceMethod: v283 arguments: a277 a2 i3 a4  <|@  <|@
tid ?505 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i133 
=== Succesors ===
=== Usages ===
i28 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i133  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i28 <|@
d <@d|@=== Debug Properties ===
bci: 32
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v286 
stateDuring: ?505 
=== Succesors ===
next: v501 
=== Usages ===
v30 
=== Predecessor ===
j285 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v286 stateDuring: ?505 #next: v501  <|@  <|@
f <@~|@floating>@ <|@
tid v30 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i28 
y: i6 
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i28 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v501 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v30 
=== Succesors ===
trueSuccessor: v500 
falseSuccessor: v33 
=== Usages ===
=== Predecessor ===
i28 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v30 #trueSuccessor: v500 #falseSuccessor: v33  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v500 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v499 
=== Usages ===
=== Predecessor ===
v501 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v499  <|@  <|@
tid ?29 <|@
d <@d|@=== Debug Properties ===
bci: 35
bytecode: ifeq
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i6 a1 a2 i3 a4 i133 
=== Succesors ===
=== Usages ===
v499 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i6 a1 a2 i3 a4 i133  <|@  <|@
f <@*|@fixed>@ <|@
tid v499 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
reason: UnreachedCode
speculation: {0x0000000000000294[index: 20, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?29 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v500 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?29  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v22 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
stamp: void
=== Inputs ===
=== Succesors ===
next: v625 
=== Usages ===
=== Predecessor ===
v24 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v625  <|@  <|@
f <@~|@floating>@ <|@
tid v671 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a621 
=== Succesors ===
=== Usages ===
v625 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a621  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v625 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v671 
lastLocationAccess: - 
=== Succesors ===
next: v465 
=== Usages ===
v600 
=== Predecessor ===
v22 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v671 lastLocationAccess: - #next: v465  <|@  <|@
f <@~|@floating>@ <|@
tid v600 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v625 
y: v598 
=== Succesors ===
=== Usages ===
v465 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v625 y: v598  <|@  <|@
f <@*|@fixed>@ <|@
tid v465 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v600 
=== Succesors ===
trueSuccessor: v462 
falseSuccessor: v464 
=== Usages ===
=== Predecessor ===
v625 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v600 #trueSuccessor: v462 #falseSuccessor: v464  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v462 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: i626 
=== Usages ===
=== Predecessor ===
v465 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i626  <|@  <|@
f <@~|@floating>@ <|@
tid v660 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a136 
index: - 
=== Succesors ===
=== Usages ===
i626 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a136 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i626 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-77323|0xfffffffffffed1f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?11 
guard: - 
address: v660 
lastLocationAccess: - 
=== Succesors ===
next: i627 
=== Usages ===
v315 
=== Predecessor ===
v462 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?11 guard: - address: v660 lastLocationAccess: - #next: i627  <|@  <|@
f <@~|@floating>@ <|@
tid v659 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a621 
=== Succesors ===
=== Usages ===
i627 i633 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a621  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i627 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v659 
lastLocationAccess: - 
=== Succesors ===
next: v473 
=== Usages ===
v315 j363 
=== Predecessor ===
i626 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v659 lastLocationAccess: - #next: v473  <|@  <|@
f <@~|@floating>@ <|@
tid v315 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i627 
y: i626 
=== Succesors ===
=== Usages ===
v473 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i627 y: i626  <|@  <|@
f <@*|@fixed>@ <|@
tid v473 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v315 
=== Succesors ===
trueSuccessor: v470 
falseSuccessor: v472 
=== Usages ===
=== Predecessor ===
i627 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v315 #trueSuccessor: v470 #falseSuccessor: v472  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v470 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: a628 
=== Usages ===
v322 
=== Predecessor ===
v473 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a628  <|@  <|@
f <@~|@floating>@ <|@
tid v662 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a621 
=== Succesors ===
=== Usages ===
a628 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a621  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a628 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v662 
lastLocationAccess: - 
=== Succesors ===
next: v629 
=== Usages ===
a325 v672 
=== Predecessor ===
v470 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v662 lastLocationAccess: - #next: v629  <|@  <|@
f <@~|@floating>@ <|@
tid v672 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a628 
=== Succesors ===
=== Usages ===
v629 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a628  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v629 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-83723|0xfffffffffffeb8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?11 
guard: - 
address: v672 
lastLocationAccess: - 
=== Succesors ===
next: i630 
=== Usages ===
v596 
=== Predecessor ===
a628 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?11 guard: - address: v672 lastLocationAccess: - #next: i630  <|@  <|@
f <@~|@floating>@ <|@
tid j363 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i627 
=== Succesors ===
=== Usages ===
v661 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i627  <|@  <|@
f <@~|@floating>@ <|@
tid v661 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a136 
index: j363 
=== Succesors ===
=== Usages ===
v322 i630 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a136 index: j363  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i630 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v661 
lastLocationAccess: - 
=== Succesors ===
next: v322 
=== Usages ===
?506 ?67 v350 
=== Predecessor ===
v629 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v661 lastLocationAccess: - #next: v322  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v322 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v470 
address: v661 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v331 
=== Usages ===
=== Predecessor ===
i630 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v470 address: v661 lastLocationAccess: - value: i3 stateAfter: - #next: v331  <|@  <|@
f <@~|@floating>@ <|@
tid v596 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v629 
=== Succesors ===
=== Usages ===
v663 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v629  <|@  <|@
f <@~|@floating>@ <|@
tid v663 <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v596 
index: - 
=== Succesors ===
=== Usages ===
v331 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v596 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v331 <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v663 
lastLocationAccess: - 
=== Succesors ===
next: j333 
=== Usages ===
v664 v334 
=== Predecessor ===
v322 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v663 lastLocationAccess: - #next: j333  <|@  <|@
f <@~|@floating>@ <|@
tid v664 <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v331 
index: - 
=== Succesors ===
=== Usages ===
j333 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v331 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j333 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v664 
lastLocationAccess: - 
=== Succesors ===
next: i66 
=== Usages ===
v334 
=== Predecessor ===
v331 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v664 lastLocationAccess: - #next: i66  <|@  <|@
f <@~|@floating>@ <|@
tid a325 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a628 
=== Succesors ===
=== Usages ===
v334 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a628  <|@  <|@
tid v334 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j333 
metaspaceMethod: v331 
arguments: a325 a2 i3 a4 
=== Succesors ===
=== Usages ===
i66 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j333 metaspaceMethod: v331 arguments: a325 a2 i3 a4  <|@  <|@
tid ?73 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i133 
=== Succesors ===
=== Usages ===
?506 ?67 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i133  <|@  <|@
f <@~|@floating>@ <|@
tid a296 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a621 
=== Succesors ===
=== Usages ===
?67 ?506 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a621  <|@  <|@
tid ?506 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?73 
values: a296 a2 - - i630 
=== Succesors ===
=== Usages ===
i66 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?73 values: a296 a2 - - i630  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i66 <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v334 
stateDuring: ?506 
=== Succesors ===
next: a631 
=== Usages ===
?67 v40 
=== Predecessor ===
j333 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v334 stateDuring: ?506 #next: a631  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a631 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v645 
lastLocationAccess: - 
=== Succesors ===
next: i632 
=== Usages ===
a336 v665 
=== Predecessor ===
i66 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v645 lastLocationAccess: - #next: i632  <|@  <|@
tid ?67 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?73 
values: i66 a296 a2 - - i630 
=== Succesors ===
=== Usages ===
v673 i632 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?73 values: i66 a296 a2 - - i630  <|@  <|@
f <@~|@floating>@ <|@
tid v665 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a631 
=== Succesors ===
=== Usages ===
i632 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a631  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i632 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-86795|0xfffffffffffeacf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?67 
guard: - 
address: v665 
lastLocationAccess: - 
=== Succesors ===
next: i633 
=== Usages ===
v343 
=== Predecessor ===
a631 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?67 guard: - address: v665 lastLocationAccess: - #next: i633  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i633 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v659 
lastLocationAccess: - 
=== Succesors ===
next: v485 
=== Usages ===
j364 v343 
=== Predecessor ===
i632 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v659 lastLocationAccess: - #next: v485  <|@  <|@
f <@~|@floating>@ <|@
tid v343 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i633 
y: i632 
=== Succesors ===
=== Usages ===
v485 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i633 y: i632  <|@  <|@
f <@*|@fixed>@ <|@
tid v485 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v343 
=== Succesors ===
trueSuccessor: v482 
falseSuccessor: v484 
=== Usages ===
=== Predecessor ===
i633 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v343 #trueSuccessor: v482 #falseSuccessor: v484  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v482 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v350 
=== Usages ===
v350 
=== Predecessor ===
v485 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v350  <|@  <|@
f <@~|@floating>@ <|@
tid a336 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a631 
=== Succesors ===
=== Usages ===
v666 a136 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a631  <|@  <|@
f <@~|@floating>@ <|@
tid j364 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i633 
=== Succesors ===
=== Usages ===
v666 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i633  <|@  <|@
f <@~|@floating>@ <|@
tid v666 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a336 
index: j364 
=== Succesors ===
=== Usages ===
v350 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a336 index: j364  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v350 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v482 
address: v666 
lastLocationAccess: - 
value: i630 
stateAfter: - 
=== Succesors ===
next: v45 
=== Usages ===
=== Predecessor ===
v482 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v482 address: v666 lastLocationAccess: - value: i630 stateAfter: - #next: v45  <|@  <|@
f <@~|@floating>@ <|@
tid v40 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i66 
y: i6 
=== Succesors ===
=== Usages ===
v45 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i66 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v45 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
profileData: PROFILED designatedSuccessorProbability: 0.5999613527111213
stamp: void
=== Inputs ===
condition: v40 
=== Succesors ===
trueSuccessor: v44 
falseSuccessor: v42 
=== Usages ===
=== Predecessor ===
v350 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v40 #trueSuccessor: v44 #falseSuccessor: v42  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v44 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
stamp: void
=== Inputs ===
=== Succesors ===
next: v48 
=== Usages ===
=== Predecessor ===
v45 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v48  <|@  <|@
f <@~|@floating>@ <|@
tid i47 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
stamp: i32
=== Inputs ===
x: i133 
y: i46 
=== Succesors ===
=== Usages ===
i133 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i133 y: i46  <|@  <|@
f <@*|@fixed>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v44 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v42 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v124 
=== Usages ===
=== Predecessor ===
v45 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v124  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v123 
=== Predecessor ===
v42 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v129 
=== Usages ===
=== Predecessor ===
v501 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v129  <|@  <|@
f <@*|@fixed>@ <|@
tid v129 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v128 
=== Predecessor ===
v33 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v128 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v129 v130 
=== Succesors ===
next: v49 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v129 v130 #next: v49  <|@  <|@
f <@*|@fixed>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 39]
stamp: void
=== Inputs ===
memoryMap: - 
result: i46 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v128 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i46  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v484 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v673 
=== Usages ===
=== Predecessor ===
v485 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v673  <|@  <|@
f <@*|@fixed>@ <|@
tid v673 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 344
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?67 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v484 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?67  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v472 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v559 
=== Usages ===
=== Predecessor ===
v473 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v559  <|@  <|@
f <@~|@floating>@ <|@
tid i560 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -80923
stableDimension: 0
stamp: i32 [-80923]
stampKind: i32
value: int[-80923|0xfffffffffffec3e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i542 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v559 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v539 
=== Predecessor ===
v472 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v464 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v555 
=== Usages ===
=== Predecessor ===
v465 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v555  <|@  <|@
f <@~|@floating>@ <|@
tid i556 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -76339
stableDimension: 0
stamp: i32 [-76339]
stampKind: i32
value: int[-76339|0xfffffffffffed5cd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i542 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v555 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v539 
=== Predecessor ===
v464 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v496 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
stamp: void
=== Inputs ===
=== Succesors ===
next: v549 
=== Usages ===
=== Predecessor ===
v497 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v549  <|@  <|@
f <@~|@floating>@ <|@
tid i550 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -126483
stableDimension: 0
stamp: i32 [-126483]
stampKind: i32
value: int[-126483|0xfffffffffffe11ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i542 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v549 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v539 
=== Predecessor ===
v496 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v452 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
next: v547 
=== Usages ===
=== Predecessor ===
v453 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v547  <|@  <|@
f <@~|@floating>@ <|@
tid i548 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -67099
stableDimension: 0
stamp: i32 [-67099]
stampKind: i32
value: int[-67099|0xfffffffffffef9e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i542 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v547 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v539 
=== Predecessor ===
v452 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i542 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i32 [-126483 - -67099] bits:1...10xxxxxxx111x0x101
valueDescription: i32
=== Inputs ===
merge: v539 
values: i548 i550 i556 i560 
=== Succesors ===
=== Usages ===
v544 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v539 values: i548 i550 i556 i560  <|@  <|@
f <@~|@floating>@ <|@
tid j543 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i64 [0 - 1300] bits:0...0x0x000x0x00
valueDescription: i64
=== Inputs ===
merge: v539 
values: j516 j152 j532 j516 
=== Succesors ===
=== Usages ===
v544 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v539 values: j516 j152 j532 j516  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v539 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v547 v549 v555 v559 
=== Succesors ===
next: v544 
=== Usages ===
i542 j543 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v547 v549 v555 v559 #next: v544  <|@  <|@
f <@*|@fixed>@ <|@
tid v544 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
stateBefore: ?11 
actionAndReason: i542 
speculation: j543 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v539 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?11 actionAndReason: i542 speculation: j543  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v95 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
stamp: void
=== Inputs ===
=== Succesors ===
next: v125 
=== Usages ===
=== Predecessor ===
v97 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v125  <|@  <|@
f <@*|@fixed>@ <|@
tid v125 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v123 
=== Predecessor ===
v95 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v123 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v124 v125 
=== Succesors ===
next: v50 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v124 v125 #next: v50  <|@  <|@
f <@*|@fixed>@ <|@
tid v50 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 57]
stamp: void
=== Inputs ===
memoryMap: - 
result: i46 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v123 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i46  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v444 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v674 
=== Usages ===
=== Predecessor ===
v445 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v674  <|@  <|@
f <@*|@fixed>@ <|@
tid v674 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 246
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?115 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v444 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?115  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v432 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v537 
=== Usages ===
=== Predecessor ===
v433 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v537  <|@  <|@
f <@~|@floating>@ <|@
tid i538 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -55835
stableDimension: 0
stamp: i32 [-55835]
stampKind: i32
value: int[-55835|0xffffffffffff25e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i517 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v537 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v513 
=== Predecessor ===
v432 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v420 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v530 
=== Usages ===
=== Predecessor ===
v421 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v530  <|@  <|@
f <@~|@floating>@ <|@
tid i531 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -49715
stableDimension: 0
stamp: i32 [-49715]
stampKind: i32
value: int[-49715|0xffffffffffff3dcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i517 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v530 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v513 
=== Predecessor ===
v420 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i517 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i32 [-124435 - -49715] bits:1...1xx0xxxxx111x0x101
valueDescription: i32
=== Inputs ===
merge: v513 
values: i521 i523 i531 i538 
=== Succesors ===
=== Usages ===
v519 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v513 values: i521 i523 i531 i538  <|@  <|@
f <@~|@floating>@ <|@
tid j518 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i64 [0 - 1300] bits:0...0x0x000x0x00
valueDescription: i64
=== Inputs ===
merge: v513 
values: j516 j152 j532 j516 
=== Succesors ===
=== Usages ===
v519 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v513 values: j516 j152 j532 j516  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v513 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v520 v522 v530 v537 
=== Succesors ===
next: v519 
=== Usages ===
i517 j518 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v520 v522 v530 v537 #next: v519  <|@  <|@
f <@*|@fixed>@ <|@
tid v519 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i517 
speculation: j518 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v513 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i517 speculation: j518  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v32|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-90139|0xfffffffffffe9fe5], long[0|0x0]] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-80923|0xfffffffffffec3e5], long[0|0x0]] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-55835|0xffffffffffff25e5], long[0|0x0]] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-126483|0xfffffffffffe11ed], long[20|0x14]] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-67099|0xfffffffffffef9e5], long[0|0x0]] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-76339|0xfffffffffffed5cd], long[1300|0x514]] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124435|0xfffffffffffe19ed], long[20|0x14]] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-49715|0xffffffffffff3dcd], long[1300|0x514]] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a601 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a601  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
result v0|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# java.util.regex.Pattern$Branch
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?11 ?88 v641 v638 ?29 ?120 ?73 v637 ?503 ?505 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v638 <|@
result [v0|QWORD[.] + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a601 a618 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a601 <|@
result v4|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v638 
lastLocationAccess: - 
=== Succesors ===
next: i602 
=== Usages ===
v640 v639 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v638 lastLocationAccess: - #next: i602  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
result v1|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# java.util.regex.Matcher
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?11 v286 ?29 ?503 ?73 ?120 ?504 v334 ?67 ?505 v192 ?88 v645 ?506 v236 ?115 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
result v2|DWORD <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?11 v286 ?29 v334 ?73 v322 ?503 v192 ?88 v224 ?505 v236 ?120 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid a4 <|@
result v3|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: a java.lang.Object
uncheckedStamp: a java.lang.CharSequence
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 ?11 v286 ?29 v334 ?73 ?503 v192 ?88 ?505 v236 ?120 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: iconst_0
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 
=== Succesors ===
=== Usages ===
v519 i602 a606 a609 v607 i610 v613 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4  <|@  <|@
f <@~|@floating>@ <|@
tid v639 <|@
result [v4|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a601 
=== Succesors ===
=== Usages ===
i602 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a601  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i602 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-40203|0xffffffffffff62f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v639 
lastLocationAccess: - 
=== Succesors ===
next: v409 
=== Usages ===
v162 
=== Predecessor ===
a601 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v639 lastLocationAccess: - #next: v409  <|@  <|@
f <@~|@floating>@ <|@
tid i6 <|@
result int[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
rawvalue: 0
stableDimension: 0
stamp: i32 [0]
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
?120 v30 v40 v94 v162 ?88 v89 ?503 ?88 ?29 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v162 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i602 
y: i6 
=== Succesors ===
=== Usages ===
v409 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i602 y: i6  <|@  <|@
f <@~|@floating>@ <|@
tid j516 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j543 j543 j518 j518 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v409 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v162 
=== Succesors ===
trueSuccessor: v408 
falseSuccessor: v406 
=== Usages ===
=== Predecessor ===
i602 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v162 #trueSuccessor: v408 #falseSuccessor: v406  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v408 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
next: v520 
=== Usages ===
=== Predecessor ===
v409 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v520  <|@  <|@
f <@~|@floating>@ <|@
tid i521 <|@
result int[-90139|0xfffffffffffe9fe5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -90139
stableDimension: 0
stamp: i32 [-90139]
stampKind: i32
value: int[-90139|0xfffffffffffe9fe5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i517 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v520 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v513 
=== Predecessor ===
v408 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-90139|0xfffffffffffe9fe5], long[0|0x0]] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v406 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
next: i603 
=== Usages ===
=== Predecessor ===
v409 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i603  <|@  <|@
f <@~|@floating>@ <|@
tid v637 <|@
result [v0|QWORD[.] + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
i603 i620 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i603 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v637 
lastLocationAccess: - 
=== Succesors ===
next: v489 
=== Usages ===
v134 
=== Predecessor ===
v406 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v637 lastLocationAccess: - #next: v489  <|@  <|@
f <@~|@floating>@ <|@
tid i46 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i47 v49 v50 i133 v134 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v134 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i603 
y: i46 
=== Succesors ===
=== Usages ===
v489 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i603 y: i46  <|@  <|@
f <@~|@floating>@ <|@
tid j152 <|@
result long[20|0x14] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
rawvalue: 20
stableDimension: 0
stamp: i64 [20]
stampKind: i64
value: long[20|0x14]
=== Inputs ===
=== Succesors ===
=== Usages ===
j543 j518 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v489 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v134 
=== Succesors ===
trueSuccessor: v487 
falseSuccessor: v488 
=== Usages ===
=== Predecessor ===
i603 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v134 #trueSuccessor: v487 #falseSuccessor: v488  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v487 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
stamp: void
=== Inputs ===
=== Succesors ===
next: v522 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v522  <|@  <|@
f <@~|@floating>@ <|@
tid i523 <|@
result int[-124435|0xfffffffffffe19ed] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -124435
stableDimension: 0
stamp: i32 [-124435]
stampKind: i32
value: int[-124435|0xfffffffffffe19ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i517 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v522 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v513 
=== Predecessor ===
v487 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124435|0xfffffffffffe19ed], long[20|0x14]] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v488 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
stamp: void
=== Inputs ===
=== Succesors ===
next: a604 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a604  <|@  <|@
f <@~|@floating>@ <|@
tid v640 <|@
result [v4|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a601 
=== Succesors ===
=== Usages ===
a604 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a601  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a604 <|@
result v5|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v640 
lastLocationAccess: - 
=== Succesors ===
next: v83 
=== Usages ===
a171 v354 v646 v649 v668 
=== Predecessor ===
v488 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v640 lastLocationAccess: - #next: v83  <|@  <|@
f <@~|@floating>@ <|@
tid v354 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a604 
=== Succesors ===
=== Usages ===
v83 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a604  <|@  <|@
f <@~|@floating>@ <|@
tid v641 <|@
result [v0|QWORD[.] + 24] <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a605 a622 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@*|@fixed>@ <|@
tid v83 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
profileData: PROFILED designatedSuccessorProbability: 0.3750160837844817
stamp: void
=== Inputs ===
condition: v354 
=== Succesors ===
trueSuccessor: v82 
falseSuccessor: v81 
=== Usages ===
=== Predecessor ===
a604 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v354 #trueSuccessor: v82 #falseSuccessor: v81  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v82 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: a605 
=== Usages ===
=== Predecessor ===
v83 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a605  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a605 <|@
result v6|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v641 
lastLocationAccess: - 
=== Succesors ===
next: a606 
=== Usages ===
v642 
=== Predecessor ===
v82 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v641 lastLocationAccess: - #next: a606  <|@  <|@
f <@~|@floating>@ <|@
tid v642 <|@
result [v6|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a605 
=== Succesors ===
=== Usages ===
a606 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a605  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a606 <|@
result v7|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-45323|0xffffffffffff4ef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v642 
lastLocationAccess: - 
=== Succesors ===
next: v607 
=== Usages ===
a181 v667 
=== Predecessor ===
a605 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v642 lastLocationAccess: - #next: v607  <|@  <|@
f <@~|@floating>@ <|@
tid v667 <|@
result [v7|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a606 
=== Succesors ===
=== Usages ===
v607 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a606  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v607 <|@
result v8|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-46859|0xffffffffffff48f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v667 
lastLocationAccess: - 
=== Succesors ===
next: v188 
=== Usages ===
v580 
=== Predecessor ===
a606 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v667 lastLocationAccess: - #next: v188  <|@  <|@
f <@~|@floating>@ <|@
tid v580 <|@
result v9|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v607 
=== Succesors ===
=== Usages ===
v643 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v607  <|@  <|@
f <@~|@floating>@ <|@
tid v643 <|@
result [v9|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v580 
index: - 
=== Succesors ===
=== Usages ===
v188 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v580 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v188 <|@
result v11|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v643 
lastLocationAccess: - 
=== Succesors ===
next: j191 
=== Usages ===
v644 v192 
=== Predecessor ===
v607 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v643 lastLocationAccess: - #next: j191  <|@  <|@
f <@~|@floating>@ <|@
tid v644 <|@
result [v11|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v188 
index: - 
=== Succesors ===
=== Usages ===
j191 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v188 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j191 <|@
result v12|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v644 
lastLocationAccess: - 
=== Succesors ===
next: i87 
=== Usages ===
v192 
=== Predecessor ===
v188 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v644 lastLocationAccess: - #next: i87  <|@  <|@
f <@~|@floating>@ <|@
tid a181 <|@
result v13|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a606 
=== Succesors ===
=== Usages ===
v192 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a606  <|@  <|@
tid v192 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j191 
metaspaceMethod: v188 
arguments: a181 a2 i3 a4 
=== Succesors ===
=== Usages ===
i87 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j191 metaspaceMethod: v188 arguments: a181 a2 i3 a4  <|@  <|@
tid ?503 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i6 
=== Succesors ===
=== Usages ===
i87 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i6  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i87 <|@
result v14|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 32
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v192 
stateDuring: ?503 
=== Succesors ===
next: v493 
=== Usages ===
v89 
=== Predecessor ===
j191 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v192 stateDuring: ?503 #next: v493  <|@  <|@
f <@~|@floating>@ <|@
tid v89 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i87 
y: i6 
=== Succesors ===
=== Usages ===
v493 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i87 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v493 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v89 
=== Succesors ===
trueSuccessor: v491 
falseSuccessor: v492 
=== Usages ===
=== Predecessor ===
i87 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v89 #trueSuccessor: v491 #falseSuccessor: v492  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v491 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v490 
=== Usages ===
=== Predecessor ===
v493 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v490  <|@  <|@
tid ?88 <|@
d <@d|@=== Debug Properties ===
bci: 35
bytecode: ifeq
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i6 a1 a2 i3 a4 i6 
=== Succesors ===
=== Usages ===
v490 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i6 a1 a2 i3 a4 i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v490 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
reason: UnreachedCode
speculation: {0x0000000000000294[index: 20, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?88 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v491 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?88  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v492 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
next: v130 
=== Usages ===
=== Predecessor ===
v493 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v130  <|@  <|@
f <@*|@fixed>@ <|@
tid v130 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v128 
=== Predecessor ===
v492 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v81 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
stamp: void
=== Inputs ===
=== Succesors ===
next: v608 
=== Usages ===
=== Predecessor ===
v83 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v608  <|@  <|@
f <@~|@floating>@ <|@
tid v668 <|@
result [v5|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a604 
=== Succesors ===
=== Usages ===
v608 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a604  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v608 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v668 
lastLocationAccess: - 
=== Succesors ===
next: v421 
=== Usages ===
v599 
=== Predecessor ===
v81 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v668 lastLocationAccess: - #next: v421  <|@  <|@
f <@~|@floating>@ <|@
tid v598 <|@
result meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
rawvalue: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
stableDimension: 0
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
stampKind: Klass*(compressed base: 140154094223360 shift: 0)
value: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}
=== Inputs ===
=== Succesors ===
=== Usages ===
v599 v600 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v599 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v608 
y: v598 
=== Succesors ===
=== Usages ===
v421 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v608 y: v598  <|@  <|@
f <@~|@floating>@ <|@
tid j532 <|@
result long[1300|0x514] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: 1300
stableDimension: 0
stamp: i64 [1300]
stampKind: i64
value: long[1300|0x514]
=== Inputs ===
=== Succesors ===
=== Usages ===
j518 j543 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v421 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v599 
=== Succesors ===
trueSuccessor: v418 
falseSuccessor: v420 
=== Usages ===
=== Predecessor ===
v608 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v599 #trueSuccessor: v418 #falseSuccessor: v420  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v418 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: a609 
=== Usages ===
=== Predecessor ===
v421 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a609  <|@  <|@
f <@~|@floating>@ <|@
tid v645 <|@
result [v1|QWORD[.] + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
a609 a615 a631 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a609 <|@
result v15|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: int[-50187|0xffffffffffff3bf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: n# int[]
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v645 
lastLocationAccess: - 
=== Succesors ===
next: i610 
=== Usages ===
a200 v647 
=== Predecessor ===
v418 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v645 lastLocationAccess: - #next: i610  <|@  <|@
f <@~|@floating>@ <|@
tid v647 <|@
result [v15|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a609 
=== Succesors ===
=== Usages ===
i610 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a609  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i610 <|@
result v16|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-52235|0xffffffffffff33f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v647 
lastLocationAccess: - 
=== Succesors ===
next: i611 
=== Usages ===
v217 
=== Predecessor ===
a609 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v647 lastLocationAccess: - #next: i611  <|@  <|@
f <@~|@floating>@ <|@
tid v646 <|@
result [v5|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a604 
=== Succesors ===
=== Usages ===
i611 i617 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a604  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i611 <|@
result v17|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v646 
lastLocationAccess: - 
=== Succesors ===
next: v433 
=== Usages ===
v217 j356 
=== Predecessor ===
i610 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v646 lastLocationAccess: - #next: v433  <|@  <|@
f <@~|@floating>@ <|@
tid v217 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i611 
y: i610 
=== Succesors ===
=== Usages ===
v433 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i611 y: i610  <|@  <|@
f <@*|@fixed>@ <|@
tid v433 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v217 
=== Succesors ===
trueSuccessor: v430 
falseSuccessor: v432 
=== Usages ===
=== Predecessor ===
i611 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v217 #trueSuccessor: v430 #falseSuccessor: v432  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v430 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: a612 
=== Usages ===
v224 
=== Predecessor ===
v433 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a612  <|@  <|@
f <@~|@floating>@ <|@
tid v649 <|@
result [v5|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a604 
=== Succesors ===
=== Usages ===
a612 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a604  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a612 <|@
result v18|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v649 
lastLocationAccess: - 
=== Succesors ===
next: v613 
=== Usages ===
a227 v669 
=== Predecessor ===
v430 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v649 lastLocationAccess: - #next: v613  <|@  <|@
f <@~|@floating>@ <|@
tid v669 <|@
result [v18|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a612 
=== Succesors ===
=== Usages ===
v613 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a612  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v613 <|@
result v19|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-58635|0xffffffffffff1af5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v669 
lastLocationAccess: - 
=== Succesors ===
next: i614 
=== Usages ===
v586 
=== Predecessor ===
a612 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v669 lastLocationAccess: - #next: i614  <|@  <|@
f <@~|@floating>@ <|@
tid a200 <|@
result v20|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 1]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a609 
=== Succesors ===
=== Usages ===
v648 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a609  <|@  <|@
f <@~|@floating>@ <|@
tid j356 <|@
result v17|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i611 
=== Succesors ===
=== Usages ===
v648 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i611  <|@  <|@
f <@~|@floating>@ <|@
tid v648 <|@
result [v20|QWORD[.] + v17|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a200 
index: j356 
=== Succesors ===
=== Usages ===
v224 i614 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a200 index: j356  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i614 <|@
result v21|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v648 
lastLocationAccess: - 
=== Succesors ===
next: v224 
=== Usages ===
?504 ?115 v252 
=== Predecessor ===
v613 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v648 lastLocationAccess: - #next: v224  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v224 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v430 
address: v648 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v233 
=== Usages ===
=== Predecessor ===
i614 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v430 address: v648 lastLocationAccess: - value: i3 stateAfter: - #next: v233  <|@  <|@
f <@~|@floating>@ <|@
tid v586 <|@
result v22|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v613 
=== Succesors ===
=== Usages ===
v650 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v613  <|@  <|@
f <@~|@floating>@ <|@
tid v650 <|@
result [v22|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v586 
index: - 
=== Succesors ===
=== Usages ===
v233 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v586 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v233 <|@
result v24|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v650 
lastLocationAccess: - 
=== Succesors ===
next: j235 
=== Usages ===
v651 v236 
=== Predecessor ===
v224 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v650 lastLocationAccess: - #next: j235  <|@  <|@
f <@~|@floating>@ <|@
tid v651 <|@
result [v24|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v233 
index: - 
=== Succesors ===
=== Usages ===
j235 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v233 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j235 <|@
result v25|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v651 
lastLocationAccess: - 
=== Succesors ===
next: i114 
=== Usages ===
v236 
=== Predecessor ===
v233 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v651 lastLocationAccess: - #next: i114  <|@  <|@
f <@~|@floating>@ <|@
tid a227 <|@
result v26|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a612 
=== Succesors ===
=== Usages ===
v236 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a612  <|@  <|@
tid v236 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j235 
metaspaceMethod: v233 
arguments: a227 a2 i3 a4 
=== Succesors ===
=== Usages ===
i114 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j235 metaspaceMethod: v233 arguments: a227 a2 i3 a4  <|@  <|@
tid ?120 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i6 
=== Succesors ===
=== Usages ===
?504 ?115 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i6  <|@  <|@
f <@~|@floating>@ <|@
tid a171 <|@
result v27|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a604 
=== Succesors ===
=== Usages ===
?115 ?504 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a604  <|@  <|@
tid ?504 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?120 
values: a171 a2 - - i614 
=== Succesors ===
=== Usages ===
i114 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?120 values: a171 a2 - - i614  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i114 <|@
result v28|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v236 
stateDuring: ?504 
=== Succesors ===
next: a615 
=== Usages ===
v94 ?115 
=== Predecessor ===
j235 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v236 stateDuring: ?504 #next: a615  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a615 <|@
result v29|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v645 
lastLocationAccess: - 
=== Succesors ===
next: i616 
=== Usages ===
a238 v652 
=== Predecessor ===
i114 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v645 lastLocationAccess: - #next: i616  <|@  <|@
tid ?115 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?120 
values: i114 a171 a2 - - i614 
=== Succesors ===
=== Usages ===
v674 i616 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?120 values: i114 a171 a2 - - i614  <|@  <|@
f <@~|@floating>@ <|@
tid v652 <|@
result [v29|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a615 
=== Succesors ===
=== Usages ===
i616 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a615  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i616 <|@
result v30|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-61707|0xffffffffffff0ef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?115 
guard: - 
address: v652 
lastLocationAccess: - 
=== Succesors ===
next: i617 
=== Usages ===
v245 
=== Predecessor ===
a615 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?115 guard: - address: v652 lastLocationAccess: - #next: i617  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i617 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v646 
lastLocationAccess: - 
=== Succesors ===
next: v445 
=== Usages ===
j357 v245 
=== Predecessor ===
i616 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v646 lastLocationAccess: - #next: v445  <|@  <|@
f <@~|@floating>@ <|@
tid v245 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i617 
y: i616 
=== Succesors ===
=== Usages ===
v445 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i617 y: i616  <|@  <|@
f <@*|@fixed>@ <|@
tid v445 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v245 
=== Succesors ===
trueSuccessor: v442 
falseSuccessor: v444 
=== Usages ===
=== Predecessor ===
i617 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v245 #trueSuccessor: v442 #falseSuccessor: v444  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v442 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v252 
=== Usages ===
v252 
=== Predecessor ===
v445 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v252  <|@  <|@
f <@~|@floating>@ <|@
tid a238 <|@
result v32|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a615 
=== Succesors ===
=== Usages ===
v653 a136 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a615  <|@  <|@
f <@~|@floating>@ <|@
tid j357 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i617 
=== Succesors ===
=== Usages ===
v653 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i617  <|@  <|@
f <@~|@floating>@ <|@
tid v653 <|@
result [v32|QWORD[.] + v31|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a238 
index: j357 
=== Succesors ===
=== Usages ===
v252 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a238 index: j357  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v252 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v442 
address: v653 
lastLocationAccess: - 
value: i614 
stateAfter: - 
=== Succesors ===
next: v97 
=== Usages ===
=== Predecessor ===
v442 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v442 address: v653 lastLocationAccess: - value: i614 stateAfter: - #next: v97  <|@  <|@
f <@~|@floating>@ <|@
tid v94 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i114 
y: i6 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i114 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
profileData: PROFILED designatedSuccessorProbability: 0.5999613527111213
stamp: void
=== Inputs ===
condition: v94 
=== Succesors ===
trueSuccessor: v96 
falseSuccessor: v95 
=== Usages ===
=== Predecessor ===
v252 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v94 #trueSuccessor: v96 #falseSuccessor: v95  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v96 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
stamp: void
=== Inputs ===
=== Succesors ===
next: v8 
=== Usages ===
=== Predecessor ===
v97 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v8  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
v96 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v32|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i133 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i46 i47 
=== Succesors ===
=== Usages ===
?11 v13 j358 ?29 v288 ?73 i47 ?505 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i46 i47  <|@  <|@
f <@~|@floating>@ <|@
tid a136 <|@
result v34|QWORD[.] <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
stamp: a# int[]
valueDescription: a java.lang.Object
=== Inputs ===
merge: v9 
values: a238 a336 
=== Succesors ===
=== Usages ===
v660 v661 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: a238 a336  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: true
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 1.0
loopType: SIMPLE_LOOP
nextEndIndex: 1
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: a618 
=== Usages ===
i133 v33 v42 v48 a136 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: a618  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a618 <|@
result v35|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.atoms
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
stamp: n java.util.regex.Pattern$Node[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v638 
lastLocationAccess: - 
=== Succesors ===
next: i619 
=== Usages ===
a255 v654 
=== Predecessor ===
v9 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v638 lastLocationAccess: - #next: i619  <|@  <|@
tid ?11 <|@
d <@d|@=== Debug Properties ===
bci: 3
bytecode: iload
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4910
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i133 
=== Succesors ===
=== Usages ===
v544 i619 a623 i626 v624 v629 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i133  <|@  <|@
f <@~|@floating>@ <|@
tid v654 <|@
result [v35|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a618 
=== Succesors ===
=== Usages ===
i619 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a618  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i619 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-65803|0xfffffffffffefef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?11 
guard: - 
address: v654 
lastLocationAccess: - 
=== Succesors ===
next: v453 
=== Usages ===
v288 
=== Predecessor ===
a618 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?11 guard: - address: v654 lastLocationAccess: - #next: v453  <|@  <|@
f <@~|@floating>@ <|@
tid v288 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i133 
y: i619 
=== Succesors ===
=== Usages ===
v453 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i133 y: i619  <|@  <|@
f <@*|@fixed>@ <|@
tid v453 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v288 
=== Succesors ===
trueSuccessor: v450 
falseSuccessor: v452 
=== Usages ===
=== Predecessor ===
i619 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v288 #trueSuccessor: v450 #falseSuccessor: v452  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v450 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
next: i620 
=== Usages ===
=== Predecessor ===
v453 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i620  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i620 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.size
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 6]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v637 
lastLocationAccess: - 
=== Succesors ===
next: v497 
=== Usages ===
v13 
=== Predecessor ===
v450 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v637 lastLocationAccess: - #next: v497  <|@  <|@
f <@~|@floating>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@406e677e
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i133 
y: i620 
=== Succesors ===
=== Usages ===
v497 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i133 y: i620  <|@  <|@
f <@*|@fixed>@ <|@
tid v497 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v13 
=== Succesors ===
trueSuccessor: v495 
falseSuccessor: v496 
=== Usages ===
=== Predecessor ===
i620 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v13 #trueSuccessor: v495 #falseSuccessor: v496  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v495 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 12]
stamp: void
=== Inputs ===
=== Succesors ===
next: a621 
=== Usages ===
=== Predecessor ===
v497 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a621  <|@  <|@
f <@~|@floating>@ <|@
tid a255 <|@
result v36|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 13]
op: Uncompress
stamp: a java.util.regex.Pattern$Node[]
=== Inputs ===
value: a618 
=== Succesors ===
=== Usages ===
v655 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a618  <|@  <|@
f <@~|@floating>@ <|@
tid j358 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i133 
=== Succesors ===
=== Usages ===
v655 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i133  <|@  <|@
f <@~|@floating>@ <|@
tid v655 <|@
result [v36|QWORD[.] + v33|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a255 
index: j358 
=== Succesors ===
=== Usages ===
a621 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a255 index: j358  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a621 <|@
result v37|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: Object
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v655 
lastLocationAccess: - 
=== Succesors ===
next: v24 
=== Usages ===
v359 a296 v659 v662 v671 
=== Predecessor ===
v495 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v655 lastLocationAccess: - #next: v24  <|@  <|@
f <@~|@floating>@ <|@
tid v359 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a621 
=== Succesors ===
=== Usages ===
v24 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a621  <|@  <|@
f <@*|@fixed>@ <|@
tid v24 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 19]
profileData: PROFILED designatedSuccessorProbability: 0.3750160837844817
stamp: void
=== Inputs ===
condition: v359 
=== Succesors ===
trueSuccessor: v23 
falseSuccessor: v22 
=== Usages ===
=== Predecessor ===
a621 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v359 #trueSuccessor: v23 #falseSuccessor: v22  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v23 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: a622 
=== Usages ===
=== Predecessor ===
v24 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a622  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a622 <|@
result v38|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Branch.conn
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 23]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v641 
lastLocationAccess: - 
=== Succesors ===
next: a623 
=== Usages ===
v656 
=== Predecessor ===
v23 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v641 lastLocationAccess: - #next: a623  <|@  <|@
f <@~|@floating>@ <|@
tid v656 <|@
result [v38|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a622 
=== Succesors ===
=== Usages ===
a623 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a622  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a623 <|@
result v39|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: int[-69899|0xfffffffffffeeef5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?11 
guard: - 
address: v656 
lastLocationAccess: - 
=== Succesors ===
next: v624 
=== Usages ===
a277 v670 
=== Predecessor ===
a622 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?11 guard: - address: v656 lastLocationAccess: - #next: v624  <|@  <|@
f <@~|@floating>@ <|@
tid v670 <|@
result [v39|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a623 
=== Succesors ===
=== Usages ===
v624 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a623  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v624 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-71435|0xfffffffffffee8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?11 
guard: - 
address: v670 
lastLocationAccess: - 
=== Succesors ===
next: v283 
=== Usages ===
v589 
=== Predecessor ===
a623 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?11 guard: - address: v670 lastLocationAccess: - #next: v283  <|@  <|@
f <@~|@floating>@ <|@
tid v589 <|@
result v41|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v624 
=== Succesors ===
=== Usages ===
v657 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v624  <|@  <|@
f <@~|@floating>@ <|@
tid v657 <|@
result [v41|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v589 
index: - 
=== Succesors ===
=== Usages ===
v283 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v589 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v283 <|@
result v43|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v657 
lastLocationAccess: - 
=== Succesors ===
next: j285 
=== Usages ===
v658 v286 
=== Predecessor ===
v624 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v657 lastLocationAccess: - #next: j285  <|@  <|@
f <@~|@floating>@ <|@
tid v658 <|@
result [v43|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v283 
index: - 
=== Succesors ===
=== Usages ===
j285 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v283 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j285 <|@
result v44|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v658 
lastLocationAccess: - 
=== Succesors ===
next: i28 
=== Usages ===
v286 
=== Predecessor ===
v283 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v658 lastLocationAccess: - #next: i28  <|@  <|@
f <@~|@floating>@ <|@
tid a277 <|@
result v45|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 26]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a623 
=== Succesors ===
=== Usages ===
v286 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a623  <|@  <|@
tid v286 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j285 
metaspaceMethod: v283 
arguments: a277 a2 i3 a4 
=== Succesors ===
=== Usages ===
i28 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j285 metaspaceMethod: v283 arguments: a277 a2 i3 a4  <|@  <|@
tid ?505 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i133 
=== Succesors ===
=== Usages ===
i28 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i133  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i28 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 32
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v286 
stateDuring: ?505 
=== Succesors ===
next: v501 
=== Usages ===
v30 
=== Predecessor ===
j285 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v286 stateDuring: ?505 #next: v501  <|@  <|@
f <@~|@floating>@ <|@
tid v30 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i28 
y: i6 
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i28 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v501 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v30 
=== Succesors ===
trueSuccessor: v500 
falseSuccessor: v33 
=== Usages ===
=== Predecessor ===
i28 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v30 #trueSuccessor: v500 #falseSuccessor: v33  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v500 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v499 
=== Usages ===
=== Predecessor ===
v501 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v499  <|@  <|@
tid ?29 <|@
d <@d|@=== Debug Properties ===
bci: 35
bytecode: ifeq
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
sourceFile: Pattern.java
sourceLine: 4912
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i6 a1 a2 i3 a4 i133 
=== Succesors ===
=== Usages ===
v499 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i6 a1 a2 i3 a4 i133  <|@  <|@
f <@*|@fixed>@ <|@
tid v499 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
reason: UnreachedCode
speculation: {0x0000000000000294[index: 20, len: 20, hash: 0xce791878]: UnreachedCode@6[HotSpotMethod<Pattern$Branch.match(Matcher, int, CharSequence)>, 58]}
stamp: void
=== Inputs ===
stateBefore: ?29 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v500 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?29  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v22 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 40]
stamp: void
=== Inputs ===
=== Succesors ===
next: v625 
=== Usages ===
=== Predecessor ===
v24 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v625  <|@  <|@
f <@~|@floating>@ <|@
tid v671 <|@
result [v37|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a621 
=== Succesors ===
=== Usages ===
v625 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a621  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v625 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v671 
lastLocationAccess: - 
=== Succesors ===
next: v465 
=== Usages ===
v600 
=== Predecessor ===
v22 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v671 lastLocationAccess: - #next: v465  <|@  <|@
f <@~|@floating>@ <|@
tid v600 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v625 
y: v598 
=== Succesors ===
=== Usages ===
v465 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v625 y: v598  <|@  <|@
f <@*|@fixed>@ <|@
tid v465 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v600 
=== Succesors ===
trueSuccessor: v462 
falseSuccessor: v464 
=== Usages ===
=== Predecessor ===
v625 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v600 #trueSuccessor: v462 #falseSuccessor: v464  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v462 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: i626 
=== Usages ===
=== Predecessor ===
v465 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i626  <|@  <|@
f <@~|@floating>@ <|@
tid v660 <|@
result [v34|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a136 
index: - 
=== Succesors ===
=== Usages ===
i626 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a136 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i626 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-77323|0xfffffffffffed1f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?11 
guard: - 
address: v660 
lastLocationAccess: - 
=== Succesors ===
next: i627 
=== Usages ===
v315 
=== Predecessor ===
v462 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?11 guard: - address: v660 lastLocationAccess: - #next: i627  <|@  <|@
f <@~|@floating>@ <|@
tid v659 <|@
result [v37|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a621 
=== Succesors ===
=== Usages ===
i627 i633 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a621  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i627 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 5]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v659 
lastLocationAccess: - 
=== Succesors ===
next: v473 
=== Usages ===
v315 j363 
=== Predecessor ===
i626 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v659 lastLocationAccess: - #next: v473  <|@  <|@
f <@~|@floating>@ <|@
tid v315 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i627 
y: i626 
=== Succesors ===
=== Usages ===
v473 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i627 y: i626  <|@  <|@
f <@*|@fixed>@ <|@
tid v473 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v315 
=== Succesors ===
trueSuccessor: v470 
falseSuccessor: v472 
=== Usages ===
=== Predecessor ===
i627 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v315 #trueSuccessor: v470 #falseSuccessor: v472  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v470 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: a628 
=== Usages ===
v322 
=== Predecessor ===
v473 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a628  <|@  <|@
f <@~|@floating>@ <|@
tid v662 <|@
result [v37|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a621 
=== Succesors ===
=== Usages ===
a628 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a621  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a628 <|@
result v49|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.regex.Pattern$Node
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$Node.next
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: n java.util.regex.Pattern$Node
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v662 
lastLocationAccess: - 
=== Succesors ===
next: v629 
=== Usages ===
a325 v672 
=== Predecessor ===
v470 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v662 lastLocationAccess: - #next: v629  <|@  <|@
f <@~|@floating>@ <|@
tid v672 <|@
result [v49|DWORD[_] * 8 + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a628 
=== Succesors ===
=== Usages ===
v629 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a628  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v629 <|@
result v50|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140154094223360 shift: 0)
barrierType: NONE
deoptReasonAndAction: int[-83723|0xfffffffffffeb8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Klass*!(compressed base: 140154094223360 shift: 0)
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?11 
guard: - 
address: v672 
lastLocationAccess: - 
=== Succesors ===
next: i630 
=== Usages ===
v596 
=== Predecessor ===
a628 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?11 guard: - address: v672 lastLocationAccess: - #next: i630  <|@  <|@
f <@~|@floating>@ <|@
tid j363 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i627 
=== Succesors ===
=== Usages ===
v661 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i627  <|@  <|@
f <@~|@floating>@ <|@
tid v661 <|@
result [v34|QWORD[.] + v48|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a136 
index: j363 
=== Succesors ===
=== Usages ===
v322 i630 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a136 index: j363  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i630 <|@
result v51|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4967) [bci: 8]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v661 
lastLocationAccess: - 
=== Succesors ===
next: v322 
=== Usages ===
?506 ?67 v350 
=== Predecessor ===
v629 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v661 lastLocationAccess: - #next: v322  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v322 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v470 
address: v661 
lastLocationAccess: - 
value: i3 
stateAfter: - 
=== Succesors ===
next: v331 
=== Usages ===
=== Predecessor ===
i630 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v470 address: v661 lastLocationAccess: - value: i3 stateAfter: - #next: v331  <|@  <|@
f <@~|@floating>@ <|@
tid v596 <|@
result v52|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140154094223360 shift: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v629 
=== Succesors ===
=== Usages ===
v663 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v629  <|@  <|@
f <@~|@floating>@ <|@
tid v663 <|@
result [v52|QWORD + 496] <|@
d <@d|@=== Debug Properties ===
displacement: 496
stamp: void*
stride: S1
=== Inputs ===
base: v596 
index: - 
=== Succesors ===
=== Usages ===
v331 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v596 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v331 <|@
result v54|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Method*!
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: Method*!
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v663 
lastLocationAccess: - 
=== Succesors ===
next: j333 
=== Usages ===
v664 v334 
=== Predecessor ===
v322 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v663 lastLocationAccess: - #next: j333  <|@  <|@
f <@~|@floating>@ <|@
tid v664 <|@
result [v54|QWORD + 64] <|@
d <@d|@=== Debug Properties ===
displacement: 64
stamp: void*
stride: S1
=== Inputs ===
base: v331 
index: - 
=== Succesors ===
=== Usages ===
j333 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: v331 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j333 <|@
result v55|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v664 
lastLocationAccess: - 
=== Succesors ===
next: i66 
=== Usages ===
v334 
=== Predecessor ===
v331 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v664 lastLocationAccess: - #next: i66  <|@  <|@
f <@~|@floating>@ <|@
tid a325 <|@
result v56|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 22]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a628 
=== Succesors ===
=== Usages ===
v334 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a628  <|@  <|@
tid v334 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Virtual
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/regex/Pattern$Node;, resolved>, UnresolvedJavaType<Ljava/util/regex/Matcher;>, HotSpotResolvedPrimitiveType<int>, UnresolvedJavaType<Ljava/lang/CharSequence;>]
stamp: void
targetMethod: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>
=== Inputs ===
computedAddress: j333 
metaspaceMethod: v331 
arguments: a325 a2 i3 a4 
=== Succesors ===
=== Usages ===
i66 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotIndirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotIndirectCallTargetNode>@ computedAddress: j333 metaspaceMethod: v331 arguments: a325 a2 i3 a4  <|@  <|@
tid ?73 <|@
d <@d|@=== Debug Properties ===
bci: 50
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$Branch.match(Matcher, int, CharSequence)>
localsSize: 5
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4914
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 a2 i3 a4 i133 
=== Succesors ===
=== Usages ===
?506 ?67 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1 a2 i3 a4 i133  <|@  <|@
f <@~|@floating>@ <|@
tid a296 <|@
result v57|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 46]
op: Uncompress
stamp: a java.util.regex.Pattern$Node
=== Inputs ===
value: a621 
=== Succesors ===
=== Usages ===
?67 ?506 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a621  <|@  <|@
tid ?506 <|@
d <@d|@=== Debug Properties ===
bci: 28
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?73 
values: a296 a2 - - i630 
=== Succesors ===
=== Usages ===
i66 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?73 values: a296 a2 - - i630  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i66 <|@
result v58|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 28
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
polymorphic: true
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Indirect#Pattern$Node.match
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v334 
stateDuring: ?506 
=== Succesors ===
next: a631 
=== Usages ===
?67 v40 
=== Predecessor ===
j333 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v334 stateDuring: ?506 #next: a631  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a631 <|@
result v59|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# int[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Matcher.locals
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: n# int[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v645 
lastLocationAccess: - 
=== Succesors ===
next: i632 
=== Usages ===
a336 v665 
=== Predecessor ===
i66 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v645 lastLocationAccess: - #next: i632  <|@  <|@
tid ?67 <|@
d <@d|@=== Debug Properties ===
bci: 31
bytecode: istore
code: ResolvedJavaMethodBytecode<Pattern$GroupHead.match(Matcher, int, CharSequence)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
sourceFile: Pattern.java
sourceLine: 4969
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?73 
values: i66 a296 a2 - - i630 
=== Succesors ===
=== Usages ===
v673 i632 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?73 values: i66 a296 a2 - - i630  <|@  <|@
f <@~|@floating>@ <|@
tid v665 <|@
result [v59|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a631 
=== Succesors ===
=== Usages ===
i632 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a631  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i632 <|@
result v60|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-86795|0xfffffffffffeacf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?67 
guard: - 
address: v665 
lastLocationAccess: - 
=== Succesors ===
next: i633 
=== Usages ===
v343 
=== Predecessor ===
a631 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?67 guard: - address: v665 lastLocationAccess: - #next: i633  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i633 <|@
result v61|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Pattern$GroupHead.localIndex
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 38]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v659 
lastLocationAccess: - 
=== Succesors ===
next: v485 
=== Usages ===
j364 v343 
=== Predecessor ===
i632 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v659 lastLocationAccess: - #next: v485  <|@  <|@
f <@~|@floating>@ <|@
tid v343 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@49d00c99
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i633 
y: i632 
=== Succesors ===
=== Usages ===
v485 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i633 y: i632  <|@  <|@
f <@*|@fixed>@ <|@
tid v485 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v343 
=== Succesors ===
trueSuccessor: v482 
falseSuccessor: v484 
=== Usages ===
=== Predecessor ===
i633 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v343 #trueSuccessor: v482 #falseSuccessor: v484  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v482 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v350 
=== Usages ===
v350 
=== Predecessor ===
v485 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v350  <|@  <|@
f <@~|@floating>@ <|@
tid a336 <|@
result v62|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 34]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
op: Uncompress
stamp: a# int[]
=== Inputs ===
value: a631 
=== Succesors ===
=== Usages ===
v666 a136 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a631  <|@  <|@
f <@~|@floating>@ <|@
tid j364 <|@
result v61|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i633 
=== Succesors ===
=== Usages ===
v666 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i633  <|@  <|@
f <@~|@floating>@ <|@
tid v666 <|@
result [v62|QWORD[.] + v61|DWORD * 4 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S4
=== Inputs ===
base: a336 
index: j364 
=== Succesors ===
=== Usages ===
v350 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a336 index: j364  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v350 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: int
location: Array: int
memoryOrder: PLAIN
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: v482 
address: v666 
lastLocationAccess: - 
value: i630 
stateAfter: - 
=== Succesors ===
next: v45 
=== Usages ===
=== Predecessor ===
v482 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: v482 address: v666 lastLocationAccess: - value: i630 stateAfter: - #next: v45  <|@  <|@
f <@~|@floating>@ <|@
tid v40 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i66 
y: i6 
=== Succesors ===
=== Usages ===
v45 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i66 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v45 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 53]
profileData: PROFILED designatedSuccessorProbability: 0.5999613527111213
stamp: void
=== Inputs ===
condition: v40 
=== Succesors ===
trueSuccessor: v44 
falseSuccessor: v42 
=== Usages ===
=== Predecessor ===
v350 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v40 #trueSuccessor: v44 #falseSuccessor: v42  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v44 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
stamp: void
=== Inputs ===
=== Succesors ===
next: v48 
=== Usages ===
=== Predecessor ===
v45 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v48  <|@  <|@
f <@~|@floating>@ <|@
tid i47 <|@
result v63|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 58]
stamp: i32
=== Inputs ===
x: i133 
y: i46 
=== Succesors ===
=== Usages ===
i133 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i133 y: i46  <|@  <|@
f <@*|@fixed>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v44 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v42 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v124 
=== Usages ===
=== Predecessor ===
v45 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v124  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v123 
=== Predecessor ===
v42 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v129 
=== Usages ===
=== Predecessor ===
v501 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v129  <|@  <|@
f <@*|@fixed>@ <|@
tid v129 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v128 
=== Predecessor ===
v33 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v128 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 38]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v129 v130 
=== Succesors ===
next: v49 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v129 v130 #next: v49  <|@  <|@
f <@*|@fixed>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4913) [bci: 39]
stamp: void
=== Inputs ===
memoryMap: - 
result: i46 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v128 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i46  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v484 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v673 
=== Usages ===
=== Predecessor ===
v485 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v673  <|@  <|@
f <@*|@fixed>@ <|@
tid v673 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 344
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?67 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v484 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?67  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v472 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v559 
=== Usages ===
=== Predecessor ===
v473 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v559  <|@  <|@
f <@~|@floating>@ <|@
tid i560 <|@
result int[-80923|0xfffffffffffec3e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -80923
stableDimension: 0
stamp: i32 [-80923]
stampKind: i32
value: int[-80923|0xfffffffffffec3e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i542 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v559 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v539 
=== Predecessor ===
v472 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-80923|0xfffffffffffec3e5], long[0|0x0]] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v464 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v555 
=== Usages ===
=== Predecessor ===
v465 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v555  <|@  <|@
f <@~|@floating>@ <|@
tid i556 <|@
result int[-76339|0xfffffffffffed5cd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -76339
stableDimension: 0
stamp: i32 [-76339]
stampKind: i32
value: int[-76339|0xfffffffffffed5cd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i542 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v555 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v539 
=== Predecessor ===
v464 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-76339|0xfffffffffffed5cd], long[1300|0x514]] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v496 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 9]
stamp: void
=== Inputs ===
=== Succesors ===
next: v549 
=== Usages ===
=== Predecessor ===
v497 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v549  <|@  <|@
f <@~|@floating>@ <|@
tid i550 <|@
result int[-126483|0xfffffffffffe11ed] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -126483
stableDimension: 0
stamp: i32 [-126483]
stampKind: i32
value: int[-126483|0xfffffffffffe11ed]
=== Inputs ===
=== Succesors ===
=== Usages ===
i542 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v549 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v539 
=== Predecessor ===
v496 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-126483|0xfffffffffffe11ed], long[20|0x14]] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v452 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
next: v547 
=== Usages ===
=== Predecessor ===
v453 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v547  <|@  <|@
f <@~|@floating>@ <|@
tid i548 <|@
result int[-67099|0xfffffffffffef9e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -67099
stableDimension: 0
stamp: i32 [-67099]
stampKind: i32
value: int[-67099|0xfffffffffffef9e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i542 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v547 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v539 
=== Predecessor ===
v452 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-67099|0xfffffffffffef9e5], long[0|0x0]] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i542 <|@
result v64|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i32 [-126483 - -67099] bits:1...10xxxxxxx111x0x101
valueDescription: i32
=== Inputs ===
merge: v539 
values: i548 i550 i556 i560 
=== Succesors ===
=== Usages ===
v544 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v539 values: i548 i550 i556 i560  <|@  <|@
f <@~|@floating>@ <|@
tid j543 <|@
result v65|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i64 [0 - 1300] bits:0...0x0x000x0x00
valueDescription: i64
=== Inputs ===
merge: v539 
values: j516 j152 j532 j516 
=== Succesors ===
=== Usages ===
v544 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v539 values: j516 j152 j532 j516  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v539 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v547 v549 v555 v559 
=== Succesors ===
next: v544 
=== Usages ===
i542 j543 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v547 v549 v555 v559 #next: v544  <|@  <|@
f <@*|@fixed>@ <|@
tid v544 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
stateBefore: ?11 
actionAndReason: i542 
speculation: j543 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v539 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?11 actionAndReason: i542 speculation: j543  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v95 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
stamp: void
=== Inputs ===
=== Succesors ===
next: v125 
=== Usages ===
=== Predecessor ===
v97 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v125  <|@  <|@
f <@*|@fixed>@ <|@
tid v125 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v123 
=== Predecessor ===
v95 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v123 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 56]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v124 v125 
=== Succesors ===
next: v50 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v124 v125 #next: v50  <|@  <|@
f <@*|@fixed>@ <|@
tid v50 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4915) [bci: 57]
stamp: void
=== Inputs ===
memoryMap: - 
result: i46 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v123 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i46  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v444 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v674 
=== Usages ===
=== Predecessor ===
v445 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v674  <|@  <|@
f <@*|@fixed>@ <|@
tid v674 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 246
mayConvertToGuard: true
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4970) [bci: 43]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
reason: BoundsCheckException
speculation: jdk.vm.ci.meta.SpeculationLog$NoSpeculationReason@21bb3a3d
stamp: void
=== Inputs ===
stateBefore: ?115 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v444 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?115  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v432 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$GroupHead.match(Pattern.java:4968) [bci: 20]
at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v537 
=== Usages ===
=== Predecessor ===
v433 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v537  <|@  <|@
f <@~|@floating>@ <|@
tid i538 <|@
result int[-55835|0xffffffffffff25e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -55835
stableDimension: 0
stamp: i32 [-55835]
stampKind: i32
value: int[-55835|0xffffffffffff25e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i517 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v537 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v513 
=== Predecessor ===
v432 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-55835|0xffffffffffff25e5], long[0|0x0]] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v420 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
stamp: void
=== Inputs ===
=== Succesors ===
next: v530 
=== Usages ===
=== Predecessor ===
v421 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v530  <|@  <|@
f <@~|@floating>@ <|@
tid i531 <|@
result int[-49715|0xffffffffffff3dcd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
rawvalue: -49715
stableDimension: 0
stamp: i32 [-49715]
stampKind: i32
value: int[-49715|0xffffffffffff3dcd]
=== Inputs ===
=== Succesors ===
=== Usages ===
i517 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v530 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v513 
=== Predecessor ===
v420 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-49715|0xffffffffffff3dcd], long[1300|0x514]] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i517 <|@
result v66|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i32 [-124435 - -49715] bits:1...1xx0xxxxx111x0x101
valueDescription: i32
=== Inputs ===
merge: v513 
values: i521 i523 i531 i538 
=== Succesors ===
=== Usages ===
v519 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v513 values: i521 i523 i531 i538  <|@  <|@
f <@~|@floating>@ <|@
tid j518 <|@
result v67|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: i64 [0 - 1300] bits:0...0x0x000x0x00
valueDescription: i64
=== Inputs ===
merge: v513 
values: j516 j152 j532 j516 
=== Succesors ===
=== Usages ===
v519 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v513 values: j516 j152 j532 j516  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v513 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v520 v522 v530 v537 
=== Succesors ===
next: v519 
=== Usages ===
i517 j518 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v520 v522 v530 v537 #next: v519  <|@  <|@
f <@*|@fixed>@ <|@
tid v519 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.regex.Pattern$Branch.match(Pattern.java:4911) [bci: 18]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i517 
speculation: j518 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v513 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i517 speculation: j518  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGTSlowdown"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v32|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-90139|0xfffffffffffe9fe5], long[0|0x0]] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-80923|0xfffffffffffec3e5], long[0|0x0]] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-55835|0xffffffffffff25e5], long[0|0x0]] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-126483|0xfffffffffffe11ed], long[20|0x14]] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-67099|0xfffffffffffef9e5], long[0|0x0]] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-76339|0xfffffffffffed5cd], long[1300|0x514]] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124435|0xfffffffffffe19ed], long[20|0x14]] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-49715|0xffffffffffff3dcd], long[1300|0x514]] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v32|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-90139|0xfffffffffffe9fe5], long[0|0x0]] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-80923|0xfffffffffffec3e5], long[0|0x0]] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-55835|0xffffffffffff25e5], long[0|0x0]] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-126483|0xfffffffffffe11ed], long[20|0x14]] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-67099|0xfffffffffffef9e5], long[0|0x0]] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-76339|0xfffffffffffed5cd], long[1300|0x514]] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124435|0xfffffffffffe19ed], long[20|0x14]] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-49715|0xffffffffffff3dcd], long[1300|0x514]] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v32|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-90139|0xfffffffffffe9fe5], long[0|0x0]] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-80923|0xfffffffffffec3e5], long[0|0x0]] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-55835|0xffffffffffff25e5], long[0|0x0]] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-126483|0xfffffffffffe11ed], long[20|0x14]] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-67099|0xfffffffffffef9e5], long[0|0x0]] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-76339|0xfffffffffffed5cd], long[1300|0x514]] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124435|0xfffffffffffe19ed], long[20|0x14]] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-49715|0xffffffffffff3dcd], long[1300|0x514]] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v32|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-90139|0xfffffffffffe9fe5], long[0|0x0]] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-80923|0xfffffffffffec3e5], long[0|0x0]] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-55835|0xffffffffffff25e5], long[0|0x0]] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-126483|0xfffffffffffe11ed], long[20|0x14]] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-67099|0xfffffffffffef9e5], long[0|0x0]] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-76339|0xfffffffffffed5cd], long[1300|0x514]] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124435|0xfffffffffffe19ed], long[20|0x14]] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-49715|0xffffffffffff3dcd], long[1300|0x514]] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v32|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr   -1  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr   -1  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr   -1  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-90139|0xfffffffffffe9fe5], long[0|0x0]] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-80923|0xfffffffffffec3e5], long[0|0x0]] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-55835|0xffffffffffff25e5], long[0|0x0]] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-126483|0xfffffffffffe11ed], long[20|0x14]] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-67099|0xfffffffffffef9e5], long[0|0x0]] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-76339|0xfffffffffffed5cd], long[1300|0x514]] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-124435|0xfffffffffffe19ed], long[20|0x14]] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-49715|0xffffffffffff3dcd], long[1300|0x514]] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr   -1  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   98  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  100  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  172  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  174  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  182  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  184  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr  186  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr  188  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  190  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  192  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr  194  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  196  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  198  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr  202  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  206  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  210  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  212  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  214  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  238  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v32|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  248  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  262  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  264  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  294  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  296  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  326  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  328  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  394  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  396  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  398  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  400  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  402  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  404  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  406  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  408  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  410  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  414  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  416  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  418  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr  424  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  426  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  428  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  430  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  432  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  434  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  436  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  454  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr  470  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  526  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  528  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  530  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  532  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr  534  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr  536  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  540  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  542  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  544  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  546  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr  550  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  552  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  554  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  630  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  632  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  634  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  636  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  638  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  640  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  642  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr  644  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  648  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  650  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  652  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr  654  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  656  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  658  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  670  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  690  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  692  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  722  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  724  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction JUMP ~outgoingValues: [int[-90139|0xfffffffffffe9fe5], long[0|0x0]] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  734  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  756  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  774  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  776  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  778  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction JUMP ~outgoingValues: [int[-80923|0xfffffffffffec3e5], long[0|0x0]] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  788  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  806  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  810  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction JUMP ~outgoingValues: [int[-55835|0xffffffffffff25e5], long[0|0x0]] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction JUMP ~outgoingValues: [int[-126483|0xfffffffffffe11ed], long[20|0x14]] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  830  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  848  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  850  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  852  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction JUMP ~outgoingValues: [int[-67099|0xfffffffffffef9e5], long[0|0x0]] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  862  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction JUMP ~outgoingValues: [int[-76339|0xfffffffffffed5cd], long[1300|0x514]] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  872  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr  890  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr  892  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  894  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction JUMP ~outgoingValues: [int[-124435|0xfffffffffffe19ed], long[20|0x14]] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  904  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction JUMP ~outgoingValues: [int[-49715|0xffffffffffff3dcd], long[1300|0x514]] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  914  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr  934  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   98  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  100  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  172  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  174  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  182  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  184  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr  186  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr  188  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  190  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  192  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr  194  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  196  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  198  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr  202  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  206  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  210  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  212  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  214  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  238  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v32|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  248  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  262  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  264  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  294  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  296  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  326  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  328  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  394  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  396  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  398  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  400  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  402  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  404  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  406  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  408  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  410  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  414  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  416  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  418  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr  424  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  426  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  428  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  430  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  432  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  434  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  436  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  454  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr  470  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  526  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  528  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  530  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  532  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr  534  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr  536  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  540  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  542  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  544  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  546  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr  550  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  552  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  554  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  630  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  632  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  634  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  636  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  638  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  640  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  642  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr  644  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  648  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  650  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  652  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr  654  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  656  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  658  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  670  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  690  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  692  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  722  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  724  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction JUMP ~outgoingValues: [int[-90139|0xfffffffffffe9fe5], long[0|0x0]] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  734  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  756  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  774  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  776  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  778  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction JUMP ~outgoingValues: [int[-80923|0xfffffffffffec3e5], long[0|0x0]] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  788  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  806  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  810  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction JUMP ~outgoingValues: [int[-55835|0xffffffffffff25e5], long[0|0x0]] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction JUMP ~outgoingValues: [int[-126483|0xfffffffffffe11ed], long[20|0x14]] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  830  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  848  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  850  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  852  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction JUMP ~outgoingValues: [int[-67099|0xfffffffffffef9e5], long[0|0x0]] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  862  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction JUMP ~outgoingValues: [int[-76339|0xfffffffffffed5cd], long[1300|0x514]] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  872  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr  890  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr  892  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  894  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction JUMP ~outgoingValues: [int[-124435|0xfffffffffffe19ed], long[20|0x14]] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  904  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction JUMP ~outgoingValues: [int[-49715|0xffffffffffff3dcd], long[1300|0x514]] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  914  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr  934  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|d fixed "[rax|d]" rax|d v25|q [0, 1[[202, 206[[422, 426[[548, 552[[652, 656[[688, 690[[720, 722[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 32[[196, 205[[416, 425[[542, 551[[646, 655[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 30[[194, 205[[414, 425[[540, 551[[644, 655[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v24|q [0, 1[[200, 205[[420, 425[[546, 551[[650, 655[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 24[[204, 205[[424, 425[[550, 551[[654, 655[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v26|q [0, 28[[192, 205[[412, 425[[538, 551[[642, 655[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 34[[198, 205[[418, 425[[544, 551[[648, 655[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  v0|q QWORD "[v0|q]" v0|q rsi|- [28, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 935[28 MustHaveRegister 36 MustHaveRegister 50 MustHaveRegister 260 MustHaveRegister 274 MustHaveRegister 471 LiveAtLoopEnd 522 MustHaveRegister 626 MustHaveRegister  "NoSpillStore"
  v1|q QWORD "[v1|q]" v1|q rdx|- [30, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 935[30 MustHaveRegister 96 MustHaveRegister 194 ShouldHaveRegister 208 MustHaveRegister 414 ShouldHaveRegister 428 MustHaveRegister 471 LiveAtLoopEnd 540 ShouldHaveRegister 644 ShouldHaveRegister  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d rcx|- [32, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 935[32 MustHaveRegister 178 MustHaveRegister 196 ShouldHaveRegister 398 MustHaveRegister 416 ShouldHaveRegister 471 LiveAtLoopEnd 542 ShouldHaveRegister 646 ShouldHaveRegister  "NoSpillStore"
  v3|q QWORD "[v3|q]" v3|q r8|- [34, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 935[34 MustHaveRegister 198 ShouldHaveRegister 418 ShouldHaveRegister 471 LiveAtLoopEnd 544 ShouldHaveRegister 648 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[v4|d]" v4|d -1 [36, 64[36 MustHaveRegister 38 MustHaveRegister 64 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[v5|d]" v5|d -1 [64, 212[64 MustHaveRegister 66 MustHaveRegister 78 MustHaveRegister 100 MustHaveRegister 170 MustHaveRegister 190 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d -1 [522, 524[522 MustHaveRegister 524 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[v7|d]" v7|d -1 [524, 536[524 MustHaveRegister 526 MustHaveRegister 536 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[v8|d]" v8|d -1 [526, 530[526 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[v9|q]" v9|q v8|d [530, 532[530 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v10|q QWORD "[v10|q]" v10|q -1 [528, 531[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[v11|q]" v11|q -1 [532, 546[532 MustHaveRegister 534 MustHaveRegister 546 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[v12|q]" v12|q -1 [534, 548[534 MustHaveRegister 548 ShouldHaveRegister  "NoSpillStore"
  v13|q QWORD "[v13|q]" v13|q v7|d [536, 538[536 MustHaveRegister 538 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[v14|d]" v14|d rax|d [552, 554[552 MustHaveRegister 554 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[v15|d]" v15|d -1 [96, 174[96 MustHaveRegister 98 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[v16|d]" v16|d -1 [98, 102[98 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v17|d DWORD "[v17|d]" v17|d -1 [100, 178[100 MustHaveRegister 102 ShouldHaveRegister 176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[v18|d]" v18|d -1 [170, 188[170 MustHaveRegister 172 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[v19|d]" v19|d -1 [172, 182[172 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v20|q QWORD "[v20|q]" v20|q v15|d [174, 178[174 MustHaveRegister 176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[v21|d]" v21|d -1 [176, 234[[830, 851[176 MustHaveRegister 234 MustHaveRegister  "NoSpillStore"
  v22|q QWORD "[v22|q]" v22|q v19|d [182, 184[182 MustHaveRegister 184 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[v23|q]" v23|q -1 [180, 183[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v24|q QWORD "[v24|q]" v24|q -1 [184, 200[184 MustHaveRegister 186 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v25|q QWORD "[v25|q]" v25|q -1 [186, 202[186 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[v26|q]" v26|q v18|d [188, 192[188 MustHaveRegister 192 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[v27|q]" v27|q v5|d [190, 216[[830, 851[190 MustHaveRegister  "NoSpillStore"
  v28|d DWORD "[v28|d]" v28|d rax|d [206, 236[[830, 851[206 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[v29|d]" v29|d -1 [208, 232[208 MustHaveRegister 210 MustHaveRegister 232 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[v30|d]" v30|d -1 [210, 214[210 MustHaveRegister 214 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[v31|d]" v31|d -1 [212, 234[212 MustHaveRegister 214 ShouldHaveRegister 234 MustHaveRegister  "NoSpillStore"
  v32|q QWORD "[v32|q]" v32|q v29|d [232, 247[232 MustHaveRegister 234 MustHaveRegister 246 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[v33|d]" v33|d v63|d [248, 468[[576, 660[[734, 755[[756, 777[[778, 788[[820, 830[[852, 893[262 MustHaveRegister 274 MustHaveRegister 294 MustHaveRegister 468 ShouldHaveRegister  "NoSpillStore"
  v34|q QWORD "[v34|q]" v34|q v32|q [248, 398[324 MustHaveRegister 396 MustHaveRegister 398 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[v35|d]" v35|d -1 [260, 292[260 MustHaveRegister 262 MustHaveRegister 292 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[v36|q]" v36|q v35|d [292, 294[292 MustHaveRegister 294 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[v37|d]" v37|d -1 [294, 432[294 MustHaveRegister 296 MustHaveRegister 308 MustHaveRegister 326 MustHaveRegister 392 MustHaveRegister 410 MustHaveRegister 432 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[v38|d]" v38|d -1 [626, 628[626 MustHaveRegister 628 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[v39|d]" v39|d -1 [628, 640[628 MustHaveRegister 630 MustHaveRegister 640 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[v40|d]" v40|d -1 [630, 634[630 MustHaveRegister 634 MustHaveRegister  "NoSpillStore"
  v41|q QWORD "[v41|q]" v41|q v40|d [634, 636[634 MustHaveRegister 636 MustHaveRegister  "NoSpillStore"
  v42|q QWORD "[v42|q]" v42|q -1 [632, 635[632 MustHaveRegister 634 MustHaveRegister  "NoSpillStore"
  v43|q QWORD "[v43|q]" v43|q -1 [636, 650[636 MustHaveRegister 638 MustHaveRegister 650 ShouldHaveRegister  "NoSpillStore"
  v44|q QWORD "[v44|q]" v44|q -1 [638, 652[638 MustHaveRegister 652 ShouldHaveRegister  "NoSpillStore"
  v45|q QWORD "[v45|q]" v45|q v39|d [640, 642[640 MustHaveRegister 642 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[v46|d]" v46|d rax|d [656, 658[656 MustHaveRegister 658 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[v47|d]" v47|d -1 [324, 328[324 MustHaveRegister 328 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[v48|d]" v48|d -1 [326, 398[326 MustHaveRegister 328 ShouldHaveRegister 396 MustHaveRegister 398 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[v49|d]" v49|d -1 [392, 408[392 MustHaveRegister 394 MustHaveRegister 408 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[v50|d]" v50|d -1 [394, 402[394 MustHaveRegister 402 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[v51|d]" v51|d -1 [396, 454[[734, 755[396 MustHaveRegister 454 MustHaveRegister  "NoSpillStore"
  v52|q QWORD "[v52|q]" v52|q v50|d [402, 404[402 MustHaveRegister 404 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[v53|q]" v53|q -1 [400, 403[400 MustHaveRegister 402 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[v54|q]" v54|q -1 [404, 420[404 MustHaveRegister 406 MustHaveRegister 420 ShouldHaveRegister  "NoSpillStore"
  v55|q QWORD "[v55|q]" v55|q -1 [406, 422[406 MustHaveRegister 422 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[v56|q]" v56|q v49|d [408, 412[408 MustHaveRegister 412 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[v57|q]" v57|q v37|d [410, 436[[734, 755[410 MustHaveRegister  "NoSpillStore"
  v58|d DWORD "[v58|d]" v58|d rax|d [426, 456[[734, 755[426 MustHaveRegister 456 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[v59|d]" v59|d -1 [428, 452[428 MustHaveRegister 430 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[v60|d]" v60|d -1 [430, 434[430 MustHaveRegister 434 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[v61|d]" v61|d -1 [432, 454[432 MustHaveRegister 434 ShouldHaveRegister 454 MustHaveRegister  "NoSpillStore"
  v62|q QWORD "[v62|q]" v62|q v59|d [452, 471[452 MustHaveRegister 454 MustHaveRegister 470 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[v63|d]" v63|d v33|d [468, 471[468 MustHaveRegister 470 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[v64|d]" v64|d -1 [872, 888[888 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[v65|q]" v65|q -1 [872, 890[890 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[v66|d]" v66|d -1 [914, 930[930 MustHaveRegister  "NoSpillStore"
  v67|q QWORD "[v67|q]" v67|q -1 [914, 932[932 MustHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|d fixed "[rax|d]" rax|d v25|q [0, 1[[202, 206[[422, 426[[548, 552[[652, 656[[688, 690[[720, 722[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 32[[196, 205[[416, 425[[542, 551[[646, 655[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 30[[194, 205[[414, 425[[540, 551[[644, 655[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v24|q [0, 1[[200, 205[[420, 425[[546, 551[[650, 655[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 24[[204, 205[[424, 425[[550, 551[[654, 655[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v26|q [0, 28[[192, 205[[412, 425[[538, 551[[642, 655[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 34[[198, 205[[418, 425[[544, 551[[648, 655[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [28, 104[28 MustHaveRegister 36 MustHaveRegister 50 MustHaveRegister  "SpillInDominator"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [30, 193[30 MustHaveRegister 96 MustHaveRegister  "SpillInDominator"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [32, 195[32 MustHaveRegister 178 MustHaveRegister  "SpillInDominator"
  v3|q QWORD "[r8|q]" v3|q r8|- [34, 197[34 MustHaveRegister  "SpillInDominator"
  v4|d DWORD "[rbx|d]" v4|d -1 [36, 64[36 MustHaveRegister 38 MustHaveRegister 64 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r10|d]" v5|d -1 [64, 203[64 MustHaveRegister 66 MustHaveRegister 78 MustHaveRegister 100 MustHaveRegister 170 MustHaveRegister 190 MustHaveRegister  "OneSpillStore"
  v6|d DWORD "[rcx|d]" v6|d -1 [522, 524[522 MustHaveRegister 524 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rcx|d]" v7|d -1 [524, 536[524 MustHaveRegister 526 MustHaveRegister 536 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[r8|d]" v8|d -1 [526, 530[526 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[r8|q]" v9|q v8|d [530, 532[530 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v10|q QWORD "[rbx|q]" v10|q -1 [528, 531[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rbx|q]" v11|q -1 [532, 546[532 MustHaveRegister 534 MustHaveRegister 546 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rax|q]" v12|q -1 [534, 548[534 MustHaveRegister 548 ShouldHaveRegister  "NoSpillStore"
  v13|q QWORD "[rcx|q]" v13|q v7|d [536, 538[536 MustHaveRegister 538 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[rax|d]" v14|d rax|d [552, 554[552 MustHaveRegister 554 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[rbx|d]" v15|d -1 [96, 174[96 MustHaveRegister 98 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[rax|d]" v16|d -1 [98, 102[98 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v17|d DWORD "[r11|d]" v17|d -1 [100, 178[100 MustHaveRegister 102 ShouldHaveRegister 176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[rax|d]" v18|d -1 [170, 188[170 MustHaveRegister 172 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d -1 [172, 182[172 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v20|q QWORD "[rbx|q]" v20|q v15|d [174, 178[174 MustHaveRegister 176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[rdi|d]" v21|d -1 [176, 203[176 MustHaveRegister  "OneSpillStore"
  v22|q QWORD "[r9|q]" v22|q v19|d [182, 184[182 MustHaveRegister 184 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[rbx|q]" v23|q -1 [180, 183[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v24|q QWORD "[rbx|q]" v24|q -1 [184, 200[184 MustHaveRegister 186 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v25|q QWORD "[r11|q]" v25|q -1 [186, 202[186 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[rax|q]" v26|q v18|d [188, 192[188 MustHaveRegister 192 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[r9|q]" v27|q v5|d [190, 203[190 MustHaveRegister  "OneSpillStore"
  v28|d DWORD "[rax|d]" v28|d rax|d [206, 236[[830, 851[206 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[rsi|d]" v29|d -1 [208, 232[208 MustHaveRegister 210 MustHaveRegister 232 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[rcx|d]" v30|d -1 [210, 214[210 MustHaveRegister 214 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[r8|d]" v31|d -1 [212, 234[212 MustHaveRegister 214 ShouldHaveRegister 234 MustHaveRegister  "NoSpillStore"
  v32|q QWORD "[rsi|q]" v32|q v29|d [232, 247[232 MustHaveRegister 234 MustHaveRegister 246 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[r10|d]" v33|d v63|d [248, 330[262 MustHaveRegister 274 MustHaveRegister 294 MustHaveRegister  "SpillInDominator"
  v34|q QWORD "[rcx|q]" v34|q v32|q [248, 398[324 MustHaveRegister 396 MustHaveRegister 398 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[rbx|d]" v35|d -1 [260, 292[260 MustHaveRegister 262 MustHaveRegister 292 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[rbx|q]" v36|q v35|d [292, 294[292 MustHaveRegister 294 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[r9|d]" v37|d -1 [294, 423[294 MustHaveRegister 296 MustHaveRegister 308 MustHaveRegister 326 MustHaveRegister 392 MustHaveRegister 410 MustHaveRegister  "OneSpillStore"
  v38|d DWORD "[rdx|d]" v38|d -1 [626, 628[626 MustHaveRegister 628 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[rdx|d]" v39|d -1 [628, 640[628 MustHaveRegister 630 MustHaveRegister 640 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rcx|d]" v40|d -1 [630, 634[630 MustHaveRegister 634 MustHaveRegister  "NoSpillStore"
  v41|q QWORD "[rcx|q]" v41|q v40|d [634, 636[634 MustHaveRegister 636 MustHaveRegister  "NoSpillStore"
  v42|q QWORD "[r8|q]" v42|q -1 [632, 635[632 MustHaveRegister 634 MustHaveRegister  "NoSpillStore"
  v43|q QWORD "[rbx|q]" v43|q -1 [636, 650[636 MustHaveRegister 638 MustHaveRegister 650 ShouldHaveRegister  "NoSpillStore"
  v44|q QWORD "[rax|q]" v44|q -1 [638, 652[638 MustHaveRegister 652 ShouldHaveRegister  "NoSpillStore"
  v45|q QWORD "[rdx|q]" v45|q v39|d [640, 642[640 MustHaveRegister 642 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[rax|d]" v46|d rax|d [656, 658[656 MustHaveRegister 658 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rbx|d]" v47|d -1 [324, 328[324 MustHaveRegister 328 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[rax|d]" v48|d -1 [326, 398[326 MustHaveRegister 328 ShouldHaveRegister 396 MustHaveRegister 398 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[rbx|d]" v49|d -1 [392, 408[392 MustHaveRegister 394 MustHaveRegister 408 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[rdi|d]" v50|d -1 [394, 402[394 MustHaveRegister 402 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[rbp|d]" v51|d -1 [396, 423[396 MustHaveRegister  "OneSpillStore"
  v52|q QWORD "[rdi|q]" v52|q v50|d [402, 404[402 MustHaveRegister 404 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[rcx|q]" v53|q -1 [400, 403[400 MustHaveRegister 402 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[rax|q]" v54|q -1 [404, 420[404 MustHaveRegister 406 MustHaveRegister 420 ShouldHaveRegister  "NoSpillStore"
  v55|q QWORD "[rdi|q]" v55|q -1 [406, 422[406 MustHaveRegister 422 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[rbx|q]" v56|q v49|d [408, 412[408 MustHaveRegister 412 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[r13|q]" v57|q v37|d [410, 423[410 MustHaveRegister  "OneSpillStore"
  v58|d DWORD "[rax|d]" v58|d rax|d [426, 456[[734, 755[426 MustHaveRegister 456 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[rsi|d]" v59|d -1 [428, 452[428 MustHaveRegister 430 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[rcx|d]" v60|d -1 [430, 434[430 MustHaveRegister 434 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [432, 454[432 MustHaveRegister 434 ShouldHaveRegister 454 MustHaveRegister  "NoSpillStore"
  v62|q QWORD "[rsi|q]" v62|q v59|d [452, 471[452 MustHaveRegister 454 MustHaveRegister 470 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r10|d]" v63|d v33|d [468, 471[468 MustHaveRegister 470 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d -1 [872, 888[888 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[r11|q]" v65|q -1 [872, 890[890 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r10|d]" v66|d -1 [914, 930[930 MustHaveRegister  "NoSpillStore"
  v67|q QWORD "[r11|q]" v67|q -1 [914, 932[932 MustHaveRegister  "NoSpillStore"
  v68|q QWORD "[vstack:4|q]" v0|q v0|q [104, 191[ "SpillInDominator"
  v69|q QWORD "[r13|q]" v1|q v1|q [193, 203[194 ShouldHaveRegister  "SpillInDominator"
  v70|d DWORD "[r14|d]" v2|d v2|d [195, 203[196 ShouldHaveRegister  "SpillInDominator"
  v71|q QWORD "[rax|q]" v3|q v3|q [197, 201[198 ShouldHaveRegister  "SpillInDominator"
  v72|d DWORD "[vstack:2|d]" v5|d v5|d [203, 211[ "OneSpillStore"
  v73|q QWORD "[vstack:4|q]" v0|q v0|q [191, 203[ "SpillInDominator"
  v74|d DWORD "[vstack:3|d]" v21|d v21|d [203, 216[ "OneSpillStore"
  v75|q QWORD "[vstack:6|q]" v27|q v27|q [203, 216[ "OneSpillStore"
  v76|q QWORD "[vstack:4|q]" v0|q v0|q [203, 248[ "SpillInDominator"
  v77|q QWORD "[vstack:1|q]" v1|q v1|q [203, 207[ "SpillInDominator"
  v78|d DWORD "[vstack:5|d]" v2|d v2|d [203, 248[ "SpillInDominator"
  v79|q QWORD "[vstack:0|q]" v3|q v3|q [201, 248[ "SpillInDominator"
  v80|q QWORD "[r8|q]" v3|q v3|q [248, 417[ "SpillInDominator"
  v81|q QWORD "[rdx|q]" v1|q v1|q [207, 413[208 MustHaveRegister  "SpillInDominator"
  v82|d DWORD "[r10|d]" v5|d v5|d [211, 212[212 MustHaveRegister  "OneSpillStore"
  v83|d DWORD "[rdi|d]" v21|d v21|d [216, 234[[830, 851[234 MustHaveRegister  "OneSpillStore"
  v84|q QWORD "[rsi|q]" v0|q v0|q [248, 330[260 MustHaveRegister 274 MustHaveRegister  "SpillInDominator"
  v85|d DWORD "[r11|d]" v2|d v2|d [248, 423[398 MustHaveRegister 416 ShouldHaveRegister  "SpillInDominator"
  v86|q QWORD "[r9|q]" v27|q v27|q [830, 851[ "OneSpillStore"
  v87|q QWORD "[rbx|q]" v1|q v1|q [413, 419[414 ShouldHaveRegister  "SpillInDominator"
  v88|q QWORD "[vstack:4|q]" v0|q v0|q [330, 411[ "SpillInDominator"
  v89|d DWORD "[vstack:8|d]" v33|d v33|d [330, 423[ "SpillInDominator"
  v90|d DWORD "[vstack:5|d]" v2|d v2|d [423, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[471 LiveAtLoopEnd 542 ShouldHaveRegister 646 ShouldHaveRegister  "SpillInDominator"
  v91|q QWORD "[r10|q]" v3|q v3|q [417, 423[418 ShouldHaveRegister  "SpillInDominator"
  v92|d DWORD "[vstack:9|d]" v37|d v37|d [423, 431[ "OneSpillStore"
  v93|d DWORD "[vstack:8|d]" v33|d v33|d [423, 468[[576, 660[[734, 755[[756, 777[[778, 788[[820, 830[[852, 872[468 ShouldHaveRegister  "SpillInDominator"
  v94|q QWORD "[vstack:4|q]" v0|q v0|q [411, 423[ "SpillInDominator"
  v95|d DWORD "[vstack:10|d]" v51|d v51|d [423, 436[ "OneSpillStore"
  v96|q QWORD "[vstack:11|q]" v57|q v57|q [423, 436[ "OneSpillStore"
  v97|q QWORD "[vstack:4|q]" v0|q v0|q [423, 472[471 LiveAtLoopEnd  "SpillInDominator"
  v98|q QWORD "[vstack:1|q]" v1|q v1|q [419, 427[ "SpillInDominator"
  v99|q QWORD "[vstack:0|q]" v3|q v3|q [423, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[471 LiveAtLoopEnd 544 ShouldHaveRegister 648 ShouldHaveRegister  "SpillInDominator"
  v100|q QWORD "[rdx|q]" v1|q v1|q [427, 539[428 MustHaveRegister 471 LiveAtLoopEnd  "SpillInDominator"
  v101|d DWORD "[r9|d]" v37|d v37|d [431, 432[432 MustHaveRegister  "OneSpillStore"
  v102|d DWORD "[rbp|d]" v51|d v51|d [436, 454[[734, 755[454 MustHaveRegister  "OneSpillStore"
  v103|d DWORD "[r8|d]" v33|d v33|d [872, 893[ "SpillInDominator"
  v104|q QWORD "[r8|q]" v3|q v3|q [914, 935[ "SpillInDominator"
  v105|q QWORD "[rsi|q]" v0|q v0|q [472, 537[522 MustHaveRegister  "SpillInDominator"
  v106|d DWORD "[rcx|d]" v2|d v2|d [914, 935[ "SpillInDominator"
  v107|q QWORD "[r13|q]" v57|q v57|q [734, 755[ "OneSpillStore"
  v108|q QWORD "[r11|q]" v1|q v1|q [539, 549[540 ShouldHaveRegister  "SpillInDominator"
  v109|q QWORD "[vstack:4|q]" v0|q v0|q [537, 549[ "SpillInDominator"
  v110|q QWORD "[vstack:4|q]" v0|q v0|q [549, 556[ "SpillInDominator"
  v111|q QWORD "[vstack:1|q]" v1|q v1|q [549, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[644 ShouldHaveRegister  "SpillInDominator"
  v112|q QWORD "[rsi|q]" v0|q v0|q [576, 641[626 MustHaveRegister  "SpillInDominator"
  v113|q QWORD "[rdx|q]" v1|q v1|q [914, 935[ "SpillInDominator"
  v114|q QWORD "[vstack:4|q]" v0|q v0|q [641, 653[ "SpillInDominator"
  v115|q QWORD "[vstack:4|q]" v0|q v0|q [653, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[ "SpillInDominator"
  v116|q QWORD "[rsi|q]" v0|q v0|q [914, 935[ "SpillInDominator"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   98  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  100  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  172  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  174  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  182  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  184  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr  186  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr  188  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  190  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v73|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  192  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v69|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  194  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  196  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  198  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v79|QWORD[.] = MOVE input: v71|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  202  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v75|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = MOVE input: v70|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v76|QWORD[.] = STACKMOVE (input: v73|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = MOVE input: v21|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v72|DWORD[_] = MOVE input: v5|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v77|QWORD[.] = MOVE input: v69|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  206  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|QWORD[.] = MOVE input: v77|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  208  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  210  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD[_] = MOVE input: v72|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  212  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  214  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  238  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v32|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  248  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  262  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  264  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  294  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  296  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  326  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  328  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  394  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  396  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  398  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  400  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  402  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  404  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  406  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  408  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  410  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v94|QWORD[.] = MOVE input: v88|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  412  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD[.] = MOVE input: v81|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  414  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  416  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|QWORD[.] = MOVE input: v80|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  418  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v98|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  420  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v96|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v85|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v97|QWORD[.] = STACKMOVE (input: v94|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v91|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = STACKMOVE (input: v89|DWORD, ~backupSlot: vstack:12|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = MOVE input: v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v92|DWORD[_] = MOVE input: v37|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  424  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  426  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|QWORD[.] = MOVE input: v98|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  428  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  430  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v101|DWORD[_] = MOVE input: v92|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  432  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  434  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  436  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  454  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr  470  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  526  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  528  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  530  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  532  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr  534  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr  536  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v109|QWORD[.] = MOVE input: v105|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  538  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = MOVE input: v100|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  542  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  544  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  546  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v108|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|QWORD[.] = STACKMOVE (input: v109|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr  550  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  552  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  554  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  630  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  632  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  634  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  636  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  638  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  640  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v114|QWORD[.] = MOVE input: v112|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  642  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr  644  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  648  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  650  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  652  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v115|QWORD[.] = STACKMOVE (input: v114|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr  654  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  656  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  658  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  670  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  690  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  692  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  722  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  724  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction JUMP ~outgoingValues: [int[-90139|0xfffffffffffe9fe5], long[0|0x0]] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  734  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  756  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  774  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  776  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  778  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction JUMP ~outgoingValues: [int[-80923|0xfffffffffffec3e5], long[0|0x0]] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  788  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  806  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  810  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction JUMP ~outgoingValues: [int[-55835|0xffffffffffff25e5], long[0|0x0]] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction JUMP ~outgoingValues: [int[-126483|0xfffffffffffe11ed], long[20|0x14]] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  830  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  848  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  850  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  852  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction JUMP ~outgoingValues: [int[-67099|0xfffffffffffef9e5], long[0|0x0]] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  862  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction JUMP ~outgoingValues: [int[-76339|0xfffffffffffed5cd], long[1300|0x514]] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  872  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr  890  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr  892  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  894  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction JUMP ~outgoingValues: [int[-124435|0xfffffffffffe19ed], long[20|0x14]] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  904  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction JUMP ~outgoingValues: [int[-49715|0xffffffffffff3dcd], long[1300|0x514]] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  914  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr  934  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|d fixed "[rax|d]" rax|d v25|q [0, 1[[202, 206[[422, 426[[548, 552[[652, 656[[688, 690[[720, 722[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 32[[196, 205[[416, 425[[542, 551[[646, 655[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 30[[194, 205[[414, 425[[540, 551[[644, 655[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v24|q [0, 1[[200, 205[[420, 425[[546, 551[[650, 655[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 24[[204, 205[[424, 425[[550, 551[[654, 655[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v26|q [0, 28[[192, 205[[412, 425[[538, 551[[642, 655[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 34[[198, 205[[418, 425[[544, 551[[648, 655[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [28, 104[28 MustHaveRegister 36 MustHaveRegister 50 MustHaveRegister  "StoreAtDefinition"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [30, 193[30 MustHaveRegister 96 MustHaveRegister  "StoreAtDefinition"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [32, 195[32 MustHaveRegister 178 MustHaveRegister  "StoreAtDefinition"
  v3|q QWORD "[r8|q]" v3|q r8|- [34, 197[34 MustHaveRegister  "StoreAtDefinition"
  v4|d DWORD "[rbx|d]" v4|d -1 [36, 64[36 MustHaveRegister 38 MustHaveRegister 64 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r10|d]" v5|d -1 [64, 203[64 MustHaveRegister 66 MustHaveRegister 78 MustHaveRegister 100 MustHaveRegister 170 MustHaveRegister 190 MustHaveRegister  "OneSpillStore"
  v6|d DWORD "[rcx|d]" v6|d -1 [522, 524[522 MustHaveRegister 524 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rcx|d]" v7|d -1 [524, 536[524 MustHaveRegister 526 MustHaveRegister 536 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[r8|d]" v8|d -1 [526, 530[526 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[r8|q]" v9|q v8|d [530, 532[530 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v10|q QWORD "[rbx|q]" v10|q -1 [528, 531[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rbx|q]" v11|q -1 [532, 546[532 MustHaveRegister 534 MustHaveRegister 546 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rax|q]" v12|q -1 [534, 548[534 MustHaveRegister 548 ShouldHaveRegister  "NoSpillStore"
  v13|q QWORD "[rcx|q]" v13|q v7|d [536, 538[536 MustHaveRegister 538 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[rax|d]" v14|d rax|d [552, 554[552 MustHaveRegister 554 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[rbx|d]" v15|d -1 [96, 174[96 MustHaveRegister 98 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[rax|d]" v16|d -1 [98, 102[98 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v17|d DWORD "[r11|d]" v17|d -1 [100, 178[100 MustHaveRegister 102 ShouldHaveRegister 176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[rax|d]" v18|d -1 [170, 188[170 MustHaveRegister 172 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d -1 [172, 182[172 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v20|q QWORD "[rbx|q]" v20|q v15|d [174, 178[174 MustHaveRegister 176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[rdi|d]" v21|d -1 [176, 203[176 MustHaveRegister  "OneSpillStore"
  v22|q QWORD "[r9|q]" v22|q v19|d [182, 184[182 MustHaveRegister 184 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[rbx|q]" v23|q -1 [180, 183[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v24|q QWORD "[rbx|q]" v24|q -1 [184, 200[184 MustHaveRegister 186 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v25|q QWORD "[r11|q]" v25|q -1 [186, 202[186 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[rax|q]" v26|q v18|d [188, 192[188 MustHaveRegister 192 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[r9|q]" v27|q v5|d [190, 203[190 MustHaveRegister  "OneSpillStore"
  v28|d DWORD "[rax|d]" v28|d rax|d [206, 236[[830, 851[206 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[rsi|d]" v29|d -1 [208, 232[208 MustHaveRegister 210 MustHaveRegister 232 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[rcx|d]" v30|d -1 [210, 214[210 MustHaveRegister 214 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[r8|d]" v31|d -1 [212, 234[212 MustHaveRegister 214 ShouldHaveRegister 234 MustHaveRegister  "NoSpillStore"
  v32|q QWORD "[rsi|q]" v32|q v29|d [232, 247[232 MustHaveRegister 234 MustHaveRegister 246 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[r10|d]" v33|d v63|d [248, 330[262 MustHaveRegister 274 MustHaveRegister 294 MustHaveRegister  "StoreAtDefinition"
  v34|q QWORD "[rcx|q]" v34|q v32|q [248, 398[324 MustHaveRegister 396 MustHaveRegister 398 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[rbx|d]" v35|d -1 [260, 292[260 MustHaveRegister 262 MustHaveRegister 292 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[rbx|q]" v36|q v35|d [292, 294[292 MustHaveRegister 294 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[r9|d]" v37|d -1 [294, 423[294 MustHaveRegister 296 MustHaveRegister 308 MustHaveRegister 326 MustHaveRegister 392 MustHaveRegister 410 MustHaveRegister  "OneSpillStore"
  v38|d DWORD "[rdx|d]" v38|d -1 [626, 628[626 MustHaveRegister 628 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[rdx|d]" v39|d -1 [628, 640[628 MustHaveRegister 630 MustHaveRegister 640 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rcx|d]" v40|d -1 [630, 634[630 MustHaveRegister 634 MustHaveRegister  "NoSpillStore"
  v41|q QWORD "[rcx|q]" v41|q v40|d [634, 636[634 MustHaveRegister 636 MustHaveRegister  "NoSpillStore"
  v42|q QWORD "[r8|q]" v42|q -1 [632, 635[632 MustHaveRegister 634 MustHaveRegister  "NoSpillStore"
  v43|q QWORD "[rbx|q]" v43|q -1 [636, 650[636 MustHaveRegister 638 MustHaveRegister 650 ShouldHaveRegister  "NoSpillStore"
  v44|q QWORD "[rax|q]" v44|q -1 [638, 652[638 MustHaveRegister 652 ShouldHaveRegister  "NoSpillStore"
  v45|q QWORD "[rdx|q]" v45|q v39|d [640, 642[640 MustHaveRegister 642 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[rax|d]" v46|d rax|d [656, 658[656 MustHaveRegister 658 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rbx|d]" v47|d -1 [324, 328[324 MustHaveRegister 328 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[rax|d]" v48|d -1 [326, 398[326 MustHaveRegister 328 ShouldHaveRegister 396 MustHaveRegister 398 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[rbx|d]" v49|d -1 [392, 408[392 MustHaveRegister 394 MustHaveRegister 408 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[rdi|d]" v50|d -1 [394, 402[394 MustHaveRegister 402 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[rbp|d]" v51|d -1 [396, 423[396 MustHaveRegister  "OneSpillStore"
  v52|q QWORD "[rdi|q]" v52|q v50|d [402, 404[402 MustHaveRegister 404 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[rcx|q]" v53|q -1 [400, 403[400 MustHaveRegister 402 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[rax|q]" v54|q -1 [404, 420[404 MustHaveRegister 406 MustHaveRegister 420 ShouldHaveRegister  "NoSpillStore"
  v55|q QWORD "[rdi|q]" v55|q -1 [406, 422[406 MustHaveRegister 422 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[rbx|q]" v56|q v49|d [408, 412[408 MustHaveRegister 412 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[r13|q]" v57|q v37|d [410, 423[410 MustHaveRegister  "OneSpillStore"
  v58|d DWORD "[rax|d]" v58|d rax|d [426, 456[[734, 755[426 MustHaveRegister 456 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[rsi|d]" v59|d -1 [428, 452[428 MustHaveRegister 430 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[rcx|d]" v60|d -1 [430, 434[430 MustHaveRegister 434 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [432, 454[432 MustHaveRegister 434 ShouldHaveRegister 454 MustHaveRegister  "NoSpillStore"
  v62|q QWORD "[rsi|q]" v62|q v59|d [452, 471[452 MustHaveRegister 454 MustHaveRegister 470 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r10|d]" v63|d v33|d [468, 471[468 MustHaveRegister 470 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d -1 [872, 888[888 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[r11|q]" v65|q -1 [872, 890[890 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r10|d]" v66|d -1 [914, 930[930 MustHaveRegister  "NoSpillStore"
  v67|q QWORD "[r11|q]" v67|q -1 [914, 932[932 MustHaveRegister  "NoSpillStore"
  v68|q QWORD "[vstack:4|q]" v0|q v0|q [104, 191[ "StoreAtDefinition"
  v69|q QWORD "[r13|q]" v1|q v1|q [193, 203[194 ShouldHaveRegister  "StoreAtDefinition"
  v70|d DWORD "[r14|d]" v2|d v2|d [195, 203[196 ShouldHaveRegister  "StoreAtDefinition"
  v71|q QWORD "[rax|q]" v3|q v3|q [197, 201[198 ShouldHaveRegister  "StoreAtDefinition"
  v72|d DWORD "[vstack:2|d]" v5|d v5|d [203, 211[ "OneSpillStore"
  v73|q QWORD "[vstack:4|q]" v0|q v0|q [191, 203[ "StoreAtDefinition"
  v74|d DWORD "[vstack:3|d]" v21|d v21|d [203, 216[ "OneSpillStore"
  v75|q QWORD "[vstack:6|q]" v27|q v27|q [203, 216[ "OneSpillStore"
  v76|q QWORD "[vstack:4|q]" v0|q v0|q [203, 248[ "StoreAtDefinition"
  v77|q QWORD "[vstack:1|q]" v1|q v1|q [203, 207[ "StoreAtDefinition"
  v78|d DWORD "[vstack:5|d]" v2|d v2|d [203, 248[ "StoreAtDefinition"
  v79|q QWORD "[vstack:0|q]" v3|q v3|q [201, 248[ "StoreAtDefinition"
  v80|q QWORD "[r8|q]" v3|q v3|q [248, 417[ "StoreAtDefinition"
  v81|q QWORD "[rdx|q]" v1|q v1|q [207, 413[208 MustHaveRegister  "StoreAtDefinition"
  v82|d DWORD "[r10|d]" v5|d v5|d [211, 212[212 MustHaveRegister  "OneSpillStore"
  v83|d DWORD "[rdi|d]" v21|d v21|d [216, 234[[830, 851[234 MustHaveRegister  "OneSpillStore"
  v84|q QWORD "[rsi|q]" v0|q v0|q [248, 330[260 MustHaveRegister 274 MustHaveRegister  "StoreAtDefinition"
  v85|d DWORD "[r11|d]" v2|d v2|d [248, 423[398 MustHaveRegister 416 ShouldHaveRegister  "StoreAtDefinition"
  v86|q QWORD "[r9|q]" v27|q v27|q [830, 851[ "OneSpillStore"
  v87|q QWORD "[rbx|q]" v1|q v1|q [413, 419[414 ShouldHaveRegister  "StoreAtDefinition"
  v88|q QWORD "[vstack:4|q]" v0|q v0|q [330, 411[ "StoreAtDefinition"
  v89|d DWORD "[vstack:8|d]" v33|d v33|d [330, 423[ "StoreAtDefinition"
  v90|d DWORD "[vstack:5|d]" v2|d v2|d [423, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[471 LiveAtLoopEnd 542 ShouldHaveRegister 646 ShouldHaveRegister  "StoreAtDefinition"
  v91|q QWORD "[r10|q]" v3|q v3|q [417, 423[418 ShouldHaveRegister  "StoreAtDefinition"
  v92|d DWORD "[vstack:9|d]" v37|d v37|d [423, 431[ "OneSpillStore"
  v93|d DWORD "[vstack:8|d]" v33|d v33|d [423, 468[[576, 660[[734, 755[[756, 777[[778, 788[[820, 830[[852, 872[468 ShouldHaveRegister  "StoreAtDefinition"
  v94|q QWORD "[vstack:4|q]" v0|q v0|q [411, 423[ "StoreAtDefinition"
  v95|d DWORD "[vstack:10|d]" v51|d v51|d [423, 436[ "OneSpillStore"
  v96|q QWORD "[vstack:11|q]" v57|q v57|q [423, 436[ "OneSpillStore"
  v97|q QWORD "[vstack:4|q]" v0|q v0|q [423, 472[471 LiveAtLoopEnd  "StoreAtDefinition"
  v98|q QWORD "[vstack:1|q]" v1|q v1|q [419, 427[ "StoreAtDefinition"
  v99|q QWORD "[vstack:0|q]" v3|q v3|q [423, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[471 LiveAtLoopEnd 544 ShouldHaveRegister 648 ShouldHaveRegister  "StoreAtDefinition"
  v100|q QWORD "[rdx|q]" v1|q v1|q [427, 539[428 MustHaveRegister 471 LiveAtLoopEnd  "StoreAtDefinition"
  v101|d DWORD "[r9|d]" v37|d v37|d [431, 432[432 MustHaveRegister  "OneSpillStore"
  v102|d DWORD "[rbp|d]" v51|d v51|d [436, 454[[734, 755[454 MustHaveRegister  "OneSpillStore"
  v103|d DWORD "[r8|d]" v33|d v33|d [872, 893[ "StoreAtDefinition"
  v104|q QWORD "[r8|q]" v3|q v3|q [914, 935[ "StoreAtDefinition"
  v105|q QWORD "[rsi|q]" v0|q v0|q [472, 537[522 MustHaveRegister  "StoreAtDefinition"
  v106|d DWORD "[rcx|d]" v2|d v2|d [914, 935[ "StoreAtDefinition"
  v107|q QWORD "[r13|q]" v57|q v57|q [734, 755[ "OneSpillStore"
  v108|q QWORD "[r11|q]" v1|q v1|q [539, 549[540 ShouldHaveRegister  "StoreAtDefinition"
  v109|q QWORD "[vstack:4|q]" v0|q v0|q [537, 549[ "StoreAtDefinition"
  v110|q QWORD "[vstack:4|q]" v0|q v0|q [549, 556[ "StoreAtDefinition"
  v111|q QWORD "[vstack:1|q]" v1|q v1|q [549, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[644 ShouldHaveRegister  "StoreAtDefinition"
  v112|q QWORD "[rsi|q]" v0|q v0|q [576, 641[626 MustHaveRegister  "StoreAtDefinition"
  v113|q QWORD "[rdx|q]" v1|q v1|q [914, 935[ "StoreAtDefinition"
  v114|q QWORD "[vstack:4|q]" v0|q v0|q [641, 653[ "StoreAtDefinition"
  v115|q QWORD "[vstack:4|q]" v0|q v0|q [653, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[ "StoreAtDefinition"
  v116|q QWORD "[rsi|q]" v0|q v0|q [914, 935[ "StoreAtDefinition"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   98  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  100  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  172  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  174  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  182  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  184  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr  186  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr  188  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  190  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v73|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  192  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v69|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  194  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  196  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  198  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v79|QWORD[.] = MOVE input: v71|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  202  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v75|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = MOVE input: v70|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v76|QWORD[.] = STACKMOVE (input: v73|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = MOVE input: v21|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v72|DWORD[_] = MOVE input: v5|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v77|QWORD[.] = MOVE input: v69|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  206  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|QWORD[.] = MOVE input: v77|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  208  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  210  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD[_] = MOVE input: v72|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  212  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  214  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  238  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [int[1|0x1], v32|QWORD[.]] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  248  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  262  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  264  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  294  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  296  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  326  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  328  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  394  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  396  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  398  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  400  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  402  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  404  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  406  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  408  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  410  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v94|QWORD[.] = MOVE input: v88|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  412  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD[.] = MOVE input: v81|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  414  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  416  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|QWORD[.] = MOVE input: v80|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  418  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v98|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  420  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v96|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v85|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v97|QWORD[.] = STACKMOVE (input: v94|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v91|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = STACKMOVE (input: v89|DWORD, ~backupSlot: vstack:12|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = MOVE input: v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v92|DWORD[_] = MOVE input: v37|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  424  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  426  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|QWORD[.] = MOVE input: v98|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  428  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  430  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v101|DWORD[_] = MOVE input: v92|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  432  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  434  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  436  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  454  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr  470  <|@ instruction JUMP ~outgoingValues: [v63|DWORD, v62|QWORD[.]] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  526  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  528  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  530  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  532  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr  534  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr  536  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v109|QWORD[.] = MOVE input: v105|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  538  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = MOVE input: v100|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  542  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  544  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  546  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v108|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|QWORD[.] = STACKMOVE (input: v109|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr  550  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  552  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  554  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  630  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  632  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  634  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  636  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  638  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  640  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v114|QWORD[.] = MOVE input: v112|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  642  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr  644  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  648  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  650  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  652  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v115|QWORD[.] = STACKMOVE (input: v114|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr  654  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  656  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  658  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  670  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  690  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  692  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  722  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  724  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr  732  <|@ instruction JUMP ~outgoingValues: [int[-90139|0xfffffffffffe9fe5], long[0|0x0]] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  734  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  756  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  774  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  776  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  778  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr  786  <|@ instruction JUMP ~outgoingValues: [int[-80923|0xfffffffffffec3e5], long[0|0x0]] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  788  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  806  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  810  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr  818  <|@ instruction JUMP ~outgoingValues: [int[-55835|0xffffffffffff25e5], long[0|0x0]] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction JUMP ~outgoingValues: [int[-126483|0xfffffffffffe11ed], long[20|0x14]] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  830  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  848  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  850  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  852  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr  860  <|@ instruction JUMP ~outgoingValues: [int[-67099|0xfffffffffffef9e5], long[0|0x0]] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  862  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr  870  <|@ instruction JUMP ~outgoingValues: [int[-76339|0xfffffffffffed5cd], long[1300|0x514]] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  872  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr  890  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr  892  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  894  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr  902  <|@ instruction JUMP ~outgoingValues: [int[-124435|0xfffffffffffe19ed], long[20|0x14]] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  904  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction JUMP ~outgoingValues: [int[-49715|0xffffffffffff3dcd], long[1300|0x514]] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  914  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr  934  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|d fixed "[rax|d]" rax|d v25|q [0, 1[[202, 206[[422, 426[[548, 552[[652, 656[[688, 690[[720, 722[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- v2|d [0, 32[[196, 205[[416, 425[[542, 551[[646, 655[ "NoOptimization"
  rdx|- fixed "[rdx|-]" rdx|- v1|q [0, 30[[194, 205[[414, 425[[540, 551[[644, 655[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- v24|q [0, 1[[200, 205[[420, 425[[546, 551[[650, 655[ "NoOptimization"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 24[[204, 205[[424, 425[[550, 551[[654, 655[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v26|q [0, 28[[192, 205[[412, 425[[538, 551[[642, 655[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r8|- fixed "[r8|-]" r8|- v3|q [0, 34[[198, 205[[418, 425[[544, 551[[648, 655[ "NoOptimization"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[204, 205[[424, 425[[550, 551[[654, 655[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [28, 104[28 MustHaveRegister 36 MustHaveRegister 50 MustHaveRegister  "StoreAtDefinition"
  v1|q QWORD "[rdx|q]" v1|q rdx|- [30, 193[30 MustHaveRegister 96 MustHaveRegister  "StoreAtDefinition"
  v2|d DWORD "[rcx|d]" v2|d rcx|- [32, 195[32 MustHaveRegister 178 MustHaveRegister  "StoreAtDefinition"
  v3|q QWORD "[r8|q]" v3|q r8|- [34, 197[34 MustHaveRegister  "StoreAtDefinition"
  v4|d DWORD "[rbx|d]" v4|d -1 [36, 64[36 MustHaveRegister 38 MustHaveRegister 64 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r10|d]" v5|d -1 [64, 203[64 MustHaveRegister 66 MustHaveRegister 78 MustHaveRegister 100 MustHaveRegister 170 MustHaveRegister 190 MustHaveRegister  "OneSpillStore"
  v6|d DWORD "[rcx|d]" v6|d -1 [522, 524[522 MustHaveRegister 524 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[rcx|d]" v7|d -1 [524, 536[524 MustHaveRegister 526 MustHaveRegister 536 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[r8|d]" v8|d -1 [526, 530[526 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[r8|q]" v9|q v8|d [530, 532[530 MustHaveRegister 532 MustHaveRegister  "NoSpillStore"
  v10|q QWORD "[rbx|q]" v10|q -1 [528, 531[528 MustHaveRegister 530 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rbx|q]" v11|q -1 [532, 546[532 MustHaveRegister 534 MustHaveRegister 546 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rax|q]" v12|q -1 [534, 548[534 MustHaveRegister 548 ShouldHaveRegister  "NoSpillStore"
  v13|q QWORD "[rcx|q]" v13|q v7|d [536, 538[536 MustHaveRegister 538 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[rax|d]" v14|d rax|d [552, 554[552 MustHaveRegister 554 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[rbx|d]" v15|d -1 [96, 174[96 MustHaveRegister 98 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[rax|d]" v16|d -1 [98, 102[98 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v17|d DWORD "[r11|d]" v17|d -1 [100, 178[100 MustHaveRegister 102 ShouldHaveRegister 176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v18|d DWORD "[rax|d]" v18|d -1 [170, 188[170 MustHaveRegister 172 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d -1 [172, 182[172 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v20|q QWORD "[rbx|q]" v20|q v15|d [174, 178[174 MustHaveRegister 176 MustHaveRegister 178 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[rdi|d]" v21|d -1 [176, 203[176 MustHaveRegister  "OneSpillStore"
  v22|q QWORD "[r9|q]" v22|q v19|d [182, 184[182 MustHaveRegister 184 MustHaveRegister  "NoSpillStore"
  v23|q QWORD "[rbx|q]" v23|q -1 [180, 183[180 MustHaveRegister 182 MustHaveRegister  "NoSpillStore"
  v24|q QWORD "[rbx|q]" v24|q -1 [184, 200[184 MustHaveRegister 186 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v25|q QWORD "[r11|q]" v25|q -1 [186, 202[186 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v26|q QWORD "[rax|q]" v26|q v18|d [188, 192[188 MustHaveRegister 192 ShouldHaveRegister  "NoSpillStore"
  v27|q QWORD "[r9|q]" v27|q v5|d [190, 203[190 MustHaveRegister  "OneSpillStore"
  v28|d DWORD "[rax|d]" v28|d rax|d [206, 236[[830, 851[206 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v29|d DWORD "[rsi|d]" v29|d -1 [208, 232[208 MustHaveRegister 210 MustHaveRegister 232 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[rcx|d]" v30|d -1 [210, 214[210 MustHaveRegister 214 MustHaveRegister  "NoSpillStore"
  v31|d DWORD "[r8|d]" v31|d -1 [212, 234[212 MustHaveRegister 214 ShouldHaveRegister 234 MustHaveRegister  "NoSpillStore"
  v32|q QWORD "[rsi|q]" v32|q v29|d [232, 247[232 MustHaveRegister 234 MustHaveRegister 246 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[r10|d]" v33|d v63|d [248, 330[262 MustHaveRegister 274 MustHaveRegister 294 MustHaveRegister  "StoreAtDefinition"
  v34|q QWORD "[rcx|q]" v34|q v32|q [248, 398[324 MustHaveRegister 396 MustHaveRegister 398 MustHaveRegister  "NoSpillStore"
  v35|d DWORD "[rbx|d]" v35|d -1 [260, 292[260 MustHaveRegister 262 MustHaveRegister 292 MustHaveRegister  "NoSpillStore"
  v36|q QWORD "[rbx|q]" v36|q v35|d [292, 294[292 MustHaveRegister 294 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[r9|d]" v37|d -1 [294, 423[294 MustHaveRegister 296 MustHaveRegister 308 MustHaveRegister 326 MustHaveRegister 392 MustHaveRegister 410 MustHaveRegister  "OneSpillStore"
  v38|d DWORD "[rdx|d]" v38|d -1 [626, 628[626 MustHaveRegister 628 MustHaveRegister  "NoSpillStore"
  v39|d DWORD "[rdx|d]" v39|d -1 [628, 640[628 MustHaveRegister 630 MustHaveRegister 640 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rcx|d]" v40|d -1 [630, 634[630 MustHaveRegister 634 MustHaveRegister  "NoSpillStore"
  v41|q QWORD "[rcx|q]" v41|q v40|d [634, 636[634 MustHaveRegister 636 MustHaveRegister  "NoSpillStore"
  v42|q QWORD "[r8|q]" v42|q -1 [632, 635[632 MustHaveRegister 634 MustHaveRegister  "NoSpillStore"
  v43|q QWORD "[rbx|q]" v43|q -1 [636, 650[636 MustHaveRegister 638 MustHaveRegister 650 ShouldHaveRegister  "NoSpillStore"
  v44|q QWORD "[rax|q]" v44|q -1 [638, 652[638 MustHaveRegister 652 ShouldHaveRegister  "NoSpillStore"
  v45|q QWORD "[rdx|q]" v45|q v39|d [640, 642[640 MustHaveRegister 642 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[rax|d]" v46|d rax|d [656, 658[656 MustHaveRegister 658 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rbx|d]" v47|d -1 [324, 328[324 MustHaveRegister 328 MustHaveRegister  "NoSpillStore"
  v48|d DWORD "[rax|d]" v48|d -1 [326, 398[326 MustHaveRegister 328 ShouldHaveRegister 396 MustHaveRegister 398 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[rbx|d]" v49|d -1 [392, 408[392 MustHaveRegister 394 MustHaveRegister 408 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[rdi|d]" v50|d -1 [394, 402[394 MustHaveRegister 402 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[rbp|d]" v51|d -1 [396, 423[396 MustHaveRegister  "OneSpillStore"
  v52|q QWORD "[rdi|q]" v52|q v50|d [402, 404[402 MustHaveRegister 404 MustHaveRegister  "NoSpillStore"
  v53|q QWORD "[rcx|q]" v53|q -1 [400, 403[400 MustHaveRegister 402 MustHaveRegister  "NoSpillStore"
  v54|q QWORD "[rax|q]" v54|q -1 [404, 420[404 MustHaveRegister 406 MustHaveRegister 420 ShouldHaveRegister  "NoSpillStore"
  v55|q QWORD "[rdi|q]" v55|q -1 [406, 422[406 MustHaveRegister 422 ShouldHaveRegister  "NoSpillStore"
  v56|q QWORD "[rbx|q]" v56|q v49|d [408, 412[408 MustHaveRegister 412 ShouldHaveRegister  "NoSpillStore"
  v57|q QWORD "[r13|q]" v57|q v37|d [410, 423[410 MustHaveRegister  "OneSpillStore"
  v58|d DWORD "[rax|d]" v58|d rax|d [426, 456[[734, 755[426 MustHaveRegister 456 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[rsi|d]" v59|d -1 [428, 452[428 MustHaveRegister 430 MustHaveRegister 452 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[rcx|d]" v60|d -1 [430, 434[430 MustHaveRegister 434 MustHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d -1 [432, 454[432 MustHaveRegister 434 ShouldHaveRegister 454 MustHaveRegister  "NoSpillStore"
  v62|q QWORD "[rsi|q]" v62|q v59|d [452, 471[452 MustHaveRegister 454 MustHaveRegister 470 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r10|d]" v63|d v33|d [468, 471[468 MustHaveRegister 470 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d -1 [872, 888[888 MustHaveRegister  "NoSpillStore"
  v65|q QWORD "[r11|q]" v65|q -1 [872, 890[890 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r10|d]" v66|d -1 [914, 930[930 MustHaveRegister  "NoSpillStore"
  v67|q QWORD "[r11|q]" v67|q -1 [914, 932[932 MustHaveRegister  "NoSpillStore"
  v68|q QWORD "[vstack:4|q]" v0|q v0|q [104, 191[ "StoreAtDefinition"
  v69|q QWORD "[r13|q]" v1|q v1|q [193, 203[194 ShouldHaveRegister  "StoreAtDefinition"
  v70|d DWORD "[r14|d]" v2|d v2|d [195, 203[196 ShouldHaveRegister  "StoreAtDefinition"
  v71|q QWORD "[rax|q]" v3|q v3|q [197, 201[198 ShouldHaveRegister  "StoreAtDefinition"
  v72|d DWORD "[vstack:2|d]" v5|d v5|d [203, 211[ "OneSpillStore"
  v73|q QWORD "[vstack:4|q]" v0|q v0|q [191, 203[ "StoreAtDefinition"
  v74|d DWORD "[vstack:3|d]" v21|d v21|d [203, 216[ "OneSpillStore"
  v75|q QWORD "[vstack:6|q]" v27|q v27|q [203, 216[ "OneSpillStore"
  v76|q QWORD "[vstack:4|q]" v0|q v0|q [203, 248[ "StoreAtDefinition"
  v77|q QWORD "[vstack:1|q]" v1|q v1|q [203, 207[ "StoreAtDefinition"
  v78|d DWORD "[vstack:5|d]" v2|d v2|d [203, 248[ "StoreAtDefinition"
  v79|q QWORD "[vstack:0|q]" v3|q v3|q [201, 248[ "StoreAtDefinition"
  v80|q QWORD "[r8|q]" v3|q v3|q [248, 417[ "StoreAtDefinition"
  v81|q QWORD "[rdx|q]" v1|q v1|q [207, 413[208 MustHaveRegister  "StoreAtDefinition"
  v82|d DWORD "[r10|d]" v5|d v5|d [211, 212[212 MustHaveRegister  "OneSpillStore"
  v83|d DWORD "[rdi|d]" v21|d v21|d [216, 234[[830, 851[234 MustHaveRegister  "OneSpillStore"
  v84|q QWORD "[rsi|q]" v0|q v0|q [248, 330[260 MustHaveRegister 274 MustHaveRegister  "StoreAtDefinition"
  v85|d DWORD "[r11|d]" v2|d v2|d [248, 423[398 MustHaveRegister 416 ShouldHaveRegister  "StoreAtDefinition"
  v86|q QWORD "[r9|q]" v27|q v27|q [830, 851[ "OneSpillStore"
  v87|q QWORD "[rbx|q]" v1|q v1|q [413, 419[414 ShouldHaveRegister  "StoreAtDefinition"
  v88|q QWORD "[vstack:4|q]" v0|q v0|q [330, 411[ "StoreAtDefinition"
  v89|d DWORD "[vstack:8|d]" v33|d v33|d [330, 423[ "StoreAtDefinition"
  v90|d DWORD "[vstack:5|d]" v2|d v2|d [423, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[471 LiveAtLoopEnd 542 ShouldHaveRegister 646 ShouldHaveRegister  "StoreAtDefinition"
  v91|q QWORD "[r10|q]" v3|q v3|q [417, 423[418 ShouldHaveRegister  "StoreAtDefinition"
  v92|d DWORD "[vstack:9|d]" v37|d v37|d [423, 431[ "OneSpillStore"
  v93|d DWORD "[vstack:8|d]" v33|d v33|d [423, 468[[576, 660[[734, 755[[756, 777[[778, 788[[820, 830[[852, 872[468 ShouldHaveRegister  "StoreAtDefinition"
  v94|q QWORD "[vstack:4|q]" v0|q v0|q [411, 423[ "StoreAtDefinition"
  v95|d DWORD "[vstack:10|d]" v51|d v51|d [423, 436[ "OneSpillStore"
  v96|q QWORD "[vstack:11|q]" v57|q v57|q [423, 436[ "OneSpillStore"
  v97|q QWORD "[vstack:4|q]" v0|q v0|q [423, 472[471 LiveAtLoopEnd  "StoreAtDefinition"
  v98|q QWORD "[vstack:1|q]" v1|q v1|q [419, 427[ "StoreAtDefinition"
  v99|q QWORD "[vstack:0|q]" v3|q v3|q [423, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[471 LiveAtLoopEnd 544 ShouldHaveRegister 648 ShouldHaveRegister  "StoreAtDefinition"
  v100|q QWORD "[rdx|q]" v1|q v1|q [427, 539[428 MustHaveRegister 471 LiveAtLoopEnd  "StoreAtDefinition"
  v101|d DWORD "[r9|d]" v37|d v37|d [431, 432[432 MustHaveRegister  "OneSpillStore"
  v102|d DWORD "[rbp|d]" v51|d v51|d [436, 454[[734, 755[454 MustHaveRegister  "OneSpillStore"
  v103|d DWORD "[r8|d]" v33|d v33|d [872, 893[ "StoreAtDefinition"
  v104|q QWORD "[r8|q]" v3|q v3|q [914, 935[ "StoreAtDefinition"
  v105|q QWORD "[rsi|q]" v0|q v0|q [472, 537[522 MustHaveRegister  "StoreAtDefinition"
  v106|d DWORD "[rcx|d]" v2|d v2|d [914, 935[ "StoreAtDefinition"
  v107|q QWORD "[r13|q]" v57|q v57|q [734, 755[ "OneSpillStore"
  v108|q QWORD "[r11|q]" v1|q v1|q [539, 549[540 ShouldHaveRegister  "StoreAtDefinition"
  v109|q QWORD "[vstack:4|q]" v0|q v0|q [537, 549[ "StoreAtDefinition"
  v110|q QWORD "[vstack:4|q]" v0|q v0|q [549, 556[ "StoreAtDefinition"
  v111|q QWORD "[vstack:1|q]" v1|q v1|q [549, 556[[576, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[644 ShouldHaveRegister  "StoreAtDefinition"
  v112|q QWORD "[rsi|q]" v0|q v0|q [576, 641[626 MustHaveRegister  "StoreAtDefinition"
  v113|q QWORD "[rdx|q]" v1|q v1|q [914, 935[ "StoreAtDefinition"
  v114|q QWORD "[vstack:4|q]" v0|q v0|q [641, 653[ "StoreAtDefinition"
  v115|q QWORD "[vstack:4|q]" v0|q v0|q [653, 660[[724, 755[[756, 777[[778, 809[[810, 851[[852, 893[[894, 914[ "StoreAtDefinition"
  v116|q QWORD "[rsi|q]" v0|q v0|q [914, 935[ "StoreAtDefinition"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   98  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  100  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v68|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  172  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  174  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  182  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  184  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr  186  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr  188  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  190  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v73|QWORD[.] = MOVE input: v68|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  192  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v69|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  194  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  196  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  198  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v79|QWORD[.] = MOVE input: v71|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  202  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v75|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = MOVE input: v70|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v76|QWORD[.] = STACKMOVE (input: v73|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = MOVE input: v21|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v72|DWORD[_] = MOVE input: v5|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v77|QWORD[.] = MOVE input: v69|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  206  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|QWORD[.] = MOVE input: v77|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  208  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  210  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD[_] = MOVE input: v72|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  212  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  214  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = MOVE input: v74|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  238  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v34|QWORD[.] = MOVE input: v32|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVE input: int[1|0x1] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v80|QWORD[.] = MOVE input: v79|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = MOVE input: v78|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v84|QWORD[.] = MOVE input: v76|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  248  <|@ instruction [v33|DWORD, v34|QWORD[.]] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  262  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  264  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  294  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  296  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  326  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  328  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v88|QWORD[.] = MOVE input: v84|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  394  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  396  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  398  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  400  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  402  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  404  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  406  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  408  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  410  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v94|QWORD[.] = MOVE input: v88|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  412  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD[.] = MOVE input: v81|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  414  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  416  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|QWORD[.] = MOVE input: v80|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  418  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v98|QWORD[.] = MOVE input: v87|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  420  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v96|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v85|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v97|QWORD[.] = STACKMOVE (input: v94|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v91|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = STACKMOVE (input: v89|DWORD, ~backupSlot: vstack:12|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = MOVE input: v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v92|DWORD[_] = MOVE input: v37|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  424  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  426  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|QWORD[.] = MOVE input: v98|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  428  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  430  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v101|DWORD[_] = MOVE input: v92|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  432  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  434  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  436  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = MOVE input: v95|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  454  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|QWORD[.] = MOVE input: v62|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v80|QWORD[.] = MOVE input: v99|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v84|QWORD[.] = MOVE input: v97|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  470  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  526  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  528  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  530  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  532  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr  534  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr  536  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v109|QWORD[.] = MOVE input: v105|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  538  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = MOVE input: v100|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  542  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  544  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  546  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v108|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v110|QWORD[.] = STACKMOVE (input: v109|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr  550  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  552  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  554  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v80|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v85|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v81|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  630  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  632  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  634  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  636  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  638  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  640  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction v114|QWORD[.] = MOVE input: v112|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  642  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr  644  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  648  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  650  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  652  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v115|QWORD[.] = STACKMOVE (input: v114|QWORD[.], ~backupSlot: vstack:7|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr  654  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  656  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  658  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  670  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  690  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  692  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  722  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  724  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v115|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|QWORD[.] = MOVE input: v99|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v113|QWORD[.] = MOVE input: v111|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v116|QWORD[.] = MOVE input: v115|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  732  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  734  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v107|QWORD[.] = MOVE input: v96|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = MOVE input: v95|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v100|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  756  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  774  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  776  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  778  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v80|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v85|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v81|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v115|QWORD[.] = MOVE input: v84|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: v93|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  786  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  788  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  806  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  810  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v115|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|QWORD[.] = MOVE input: v99|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v113|QWORD[.] = MOVE input: v111|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v116|QWORD[.] = MOVE input: v115|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  818  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v80|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v85|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v81|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v115|QWORD[.] = MOVE input: v84|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: v93|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  828  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  830  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v86|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = MOVE input: v74|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v81|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  848  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  850  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  852  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v80|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v85|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v81|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v115|QWORD[.] = MOVE input: v84|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: v93|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  860  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  862  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = MOVE input: v33|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v80|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v85|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v81|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v115|QWORD[.] = MOVE input: v84|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: v93|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  870  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  872  <|@ instruction [v64|DWORD, v65|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr  890  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr  892  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  894  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v115|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|QWORD[.] = MOVE input: v99|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v113|QWORD[.] = MOVE input: v111|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v116|QWORD[.] = MOVE input: v115|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  902  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  904  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v99|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v111|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v115|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|QWORD[.] = MOVE input: v99|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v113|QWORD[.] = MOVE input: v111|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v116|QWORD[.] = MOVE input: v115|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  912  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  914  <|@ instruction [v66|DWORD, v67|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr  934  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:4|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   30  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   32  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   34  <|@ instruction v3|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:0|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   36  <|@ instruction v4|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [v4|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction CMPCONSTBRANCH x: [v0|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction v5|DWORD[_] = MOV input: [v4|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction TESTBRANCH (x: v5|DWORD[_], y: v5|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction CMPCONSTBRANCH x: [v5|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v15|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   98  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v16|DWORD = MOV input: [v15|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  100  <|@ instruction v17|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v16|DWORD, y: v17|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction v18|DWORD[_] = MOV input: [v5|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  172  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v19|DWORD = MOV input: [v18|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  174  <|@ instruction v20|QWORD[.] = UNCOMPRESSPOINTER (input: v15|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction v21|DWORD = MOV input: [v20|QWORD[.] + v17|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [v20|QWORD[.] + v17|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction v23|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  182  <|@ instruction v22|QWORD = UNCOMPRESSPOINTER (input: v19|DWORD, ~baseRegister: v23|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  184  <|@ instruction v24|QWORD = MOV input: [v22|QWORD + 496] size: QWORD <|@ <|@
      nr  186  <|@ instruction v25|QWORD = MOV input: [v24|QWORD + 64] size: QWORD <|@ <|@
      nr  188  <|@ instruction v26|QWORD[.] = UNCOMPRESSPOINTER (input: v18|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  190  <|@ instruction v27|QWORD[.] = UNCOMPRESSPOINTER (input: v5|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  192  <|@ instruction rsi|QWORD[.] = MOVE input: v26|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v69|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  194  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = MOVE input: v2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  196  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  198  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rbx|QWORD = MOVE input: v24|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  202  <|@ instruction rax|QWORD = MOVE input: v25|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v75|QWORD[.] = MOVE input: v27|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = MOVE input: v21|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v72|DWORD[_] = MOVE input: v5|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  206  <|@ instruction v28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|QWORD[.] = MOVE input: v77|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  208  <|@ instruction v29|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  210  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction v30|DWORD = MOV input: [v29|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v82|DWORD[_] = MOVE input: v72|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  212  <|@ instruction v31|DWORD = MOV input: [v5|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  214  <|@ instruction CMPBRANCH (x: v30|DWORD, y: v31|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = MOVE input: v74|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction v32|QWORD[.] = UNCOMPRESSPOINTER (input: v29|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction MOV (x: [v32|QWORD[.] + v31|DWORD * 4 + 16], y: v21|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction TESTBRANCH (x: v28|DWORD, y: v28|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  238  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v34|QWORD[.] = MOVE input: v32|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVE input: int[1|0x1] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v80|QWORD[.] = MOVE input: v79|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = MOVE input: v78|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v84|QWORD[.] = MOVE input: v76|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:8|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction v35|DWORD[_] = MOV input: [v0|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  262  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v35|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  264  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: v33|DWORD, y: [v0|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction v36|QWORD[.] = UNCOMPRESSPOINTER (input: v35|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  294  <|@ instruction v37|DWORD[_] = MOV input: [v36|QWORD[.] + v33|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  296  <|@ instruction TESTBRANCH (x: v37|DWORD[_], y: v37|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction CMPCONSTBRANCH x: [v37|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v47|DWORD = MOV input: [v34|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  326  <|@ instruction v48|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  328  <|@ instruction CMPBRANCH (x: v47|DWORD, y: v48|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction v49|DWORD[_] = MOV input: [v37|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  394  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v50|DWORD = MOV input: [v49|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  396  <|@ instruction v51|DWORD = MOV input: [v34|QWORD[.] + v48|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  398  <|@ instruction MOV (x: [v34|QWORD[.] + v48|DWORD * 4 + 16], y: v2|DWORD) size: DWORD <|@ <|@
      nr  400  <|@ instruction v53|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  402  <|@ instruction v52|QWORD = UNCOMPRESSPOINTER (input: v50|DWORD, ~baseRegister: v53|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  404  <|@ instruction v54|QWORD = MOV input: [v52|QWORD + 496] size: QWORD <|@ <|@
      nr  406  <|@ instruction v55|QWORD = MOV input: [v54|QWORD + 64] size: QWORD <|@ <|@
      nr  408  <|@ instruction v56|QWORD[.] = UNCOMPRESSPOINTER (input: v49|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  410  <|@ instruction v57|QWORD[.] = UNCOMPRESSPOINTER (input: v37|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  412  <|@ instruction rsi|QWORD[.] = MOVE input: v56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v87|QWORD[.] = MOVE input: v81|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  414  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  416  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|QWORD[.] = MOVE input: v80|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  418  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  420  <|@ instruction rbx|QWORD = MOVE input: v54|QWORD moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction rax|QWORD = MOVE input: v55|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v96|QWORD[.] = MOVE input: v57|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = MOVE input: v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v92|DWORD[_] = MOVE input: v37|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  424  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  426  <|@ instruction v58|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|QWORD[.] = MOVE input: v98|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  428  <|@ instruction v59|DWORD[_] = MOV input: [v1|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  430  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v60|DWORD = MOV input: [v59|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction v101|DWORD[_] = MOVE input: v92|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  432  <|@ instruction v61|DWORD = MOV input: [v37|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  434  <|@ instruction CMPBRANCH (x: v60|DWORD, y: v61|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  436  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = MOVE input: v95|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction v62|QWORD[.] = UNCOMPRESSPOINTER (input: v59|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  454  <|@ instruction MOV (x: [v62|QWORD[.] + v61|DWORD * 4 + 16], y: v51|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction TESTBRANCH (x: v58|DWORD, y: v58|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction v63|DWORD = INC value: v33|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|QWORD[.] = MOVE input: v62|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v80|QWORD[.] = MOVE input: v99|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v84|QWORD[.] = MOVE input: v97|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  470  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction v6|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v7|DWORD[_] = MOV input: [v6|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  526  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction v8|DWORD = MOV input: [v7|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  528  <|@ instruction v10|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  530  <|@ instruction v9|QWORD = UNCOMPRESSPOINTER (input: v8|DWORD, ~baseRegister: v10|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  532  <|@ instruction v11|QWORD = MOV input: [v9|QWORD + 496] size: QWORD <|@ <|@
      nr  534  <|@ instruction v12|QWORD = MOV input: [v11|QWORD + 64] size: QWORD <|@ <|@
      nr  536  <|@ instruction v13|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  538  <|@ instruction rsi|QWORD[.] = MOVE input: v13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v108|QWORD[.] = MOVE input: v100|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  542  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  544  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  546  <|@ instruction rbx|QWORD = MOVE input: v11|QWORD moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rax|QWORD = MOVE input: v12|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  550  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  552  <|@ instruction v14|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  554  <|@ instruction TESTBRANCH (x: v14|DWORD, y: v14|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction v38|DWORD[_] = MOV input: [v0|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v39|DWORD[_] = MOV input: [v38|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  630  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction v40|DWORD = MOV input: [v39|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  632  <|@ instruction v42|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  634  <|@ instruction v41|QWORD = UNCOMPRESSPOINTER (input: v40|DWORD, ~baseRegister: v42|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  636  <|@ instruction v43|QWORD = MOV input: [v41|QWORD + 496] size: QWORD <|@ <|@
      nr  638  <|@ instruction v44|QWORD = MOV input: [v43|QWORD + 64] size: QWORD <|@ <|@
      nr  640  <|@ instruction v45|QWORD[.] = UNCOMPRESSPOINTER (input: v39|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  642  <|@ instruction rsi|QWORD[.] = MOVE input: v45|QWORD[.] moveKind: QWORD <|@ <|@
      nr  644  <|@ instruction rdx|QWORD[.] = MOVE input: v1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction rcx|DWORD = MOVE input: v2|DWORD moveKind: DWORD <|@ <|@
      nr  648  <|@ instruction r8|QWORD[.] = MOVE input: v3|QWORD[.] moveKind: QWORD <|@ <|@
      nr  650  <|@ instruction rbx|QWORD = MOVE input: v43|QWORD moveKind: QWORD <|@ <|@
      nr  652  <|@ instruction rax|QWORD = MOVE input: v44|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  654  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  656  <|@ instruction v46|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  658  <|@ instruction TESTBRANCH (x: v46|DWORD, y: v46|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  670  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  690  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  692  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  722  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  724  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|QWORD[.] = MOVE input: v99|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v113|QWORD[.] = MOVE input: v111|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v116|QWORD[.] = MOVE input: v115|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  732  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  734  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v107|QWORD[.] = MOVE input: v96|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = MOVE input: v95|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v58|DWORD 
locals: v57|QWORD[.] v1|QWORD[.] - - v51|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  756  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  774  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  776  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  778  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: v93|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  786  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  788  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  806  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  810  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|QWORD[.] = MOVE input: v99|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v113|QWORD[.] = MOVE input: v111|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v116|QWORD[.] = MOVE input: v115|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  818  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: v93|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  828  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  830  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v86|QWORD[.] = MOVE input: v75|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = MOVE input: v74|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  848  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  850  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: v28|DWORD 
locals: v27|QWORD[.] v1|QWORD[.] - - v21|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  852  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: v93|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  860  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  862  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v65|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = MOVE input: v93|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  870  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  872  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v64|DWORD) size: DWORD <|@ <|@
      nr  890  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v65|QWORD) size: QWORD <|@ <|@
      nr  892  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] v33|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  894  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|QWORD[.] = MOVE input: v99|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v113|QWORD[.] = MOVE input: v111|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v116|QWORD[.] = MOVE input: v115|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  902  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  904  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction v67|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v104|QWORD[.] = MOVE input: v99|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v106|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v113|QWORD[.] = MOVE input: v111|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v116|QWORD[.] = MOVE input: v115|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  912  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  914  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v66|DWORD) size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v67|QWORD) size: QWORD <|@ <|@
      nr  934  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: v0|QWORD[.] v1|QWORD[.] v2|DWORD v3|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:4|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:0|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   98  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  100  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  172  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: vstack:4|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  174  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  182  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  184  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  186  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  188  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  190  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  192  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  194  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  196  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  198  <|@ instruction r8|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  202  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:6|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:3|DWORD = MOVE input: rdi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:6|QWORD[.] vstack:1|QWORD[.] - - vstack:3|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  208  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  210  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:6|QWORD[.] rdx|QWORD[.] - - vstack:3|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:2|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  212  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  214  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:3|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  238  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:8|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  262  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  264  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  294  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  296  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  326  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  328  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  394  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:4|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  396  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  398  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  400  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  402  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  404  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  406  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  408  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  410  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  414  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  416  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  418  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:11|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:10|DWORD = MOVE input: rbp|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:9|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  424  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:11|QWORD[.] vstack:1|QWORD[.] - - vstack:10|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  428  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  430  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:11|QWORD[.] rdx|QWORD[.] - - vstack:10|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD[_] = MOVE input: vstack:9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  432  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  434  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  436  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD = MOVE input: vstack:10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction r10|DWORD = INC value: vstack:8|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  470  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  526  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  528  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  530  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  532  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  534  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  536  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  542  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr  544  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  554  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  630  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  632  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  634  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  636  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  638  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  640  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  642  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  644  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr  648  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr  654  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  658  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  670  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  690  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  692  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  722  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  724  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  732  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  734  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: vstack:11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD = MOVE input: vstack:10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] vstack:1|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  756  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  774  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  776  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  778  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  786  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  788  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  806  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  810  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  818  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  828  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  830  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:3|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  848  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  850  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] vstack:1|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  852  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  860  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  862  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  870  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  872  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  890  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  892  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  894  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  902  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  904  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  912  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  914  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  934  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:4|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction vstack:0|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction NOP <|@ <|@
      nr   50  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction NOP <|@ <|@
      nr   56  <|@ instruction NOP <|@ <|@
      nr   58  <|@ instruction NOP <|@ <|@
      nr   60  <|@ instruction NOP <|@ <|@
      nr   62  <|@ instruction NOP <|@ <|@
      nr   64  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   66  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction NOP <|@ <|@
      nr   74  <|@ instruction NOP <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction NOP <|@ <|@
      nr   84  <|@ instruction NOP <|@ <|@
      nr   86  <|@ instruction NOP <|@ <|@
      nr   88  <|@ instruction NOP <|@ <|@
      nr   90  <|@ instruction NOP <|@ <|@
      nr   92  <|@ instruction NOP <|@ <|@
      nr   94  <|@ instruction NOP <|@ <|@
      nr   96  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr   98  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  100  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction NOP <|@ <|@
      nr  110  <|@ instruction NOP <|@ <|@
      nr  112  <|@ instruction NOP <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction NOP <|@ <|@
      nr  164  <|@ instruction NOP <|@ <|@
      nr  166  <|@ instruction NOP <|@ <|@
      nr  168  <|@ instruction NOP <|@ <|@
      nr  170  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  172  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: vstack:4|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  174  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  176  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  180  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  182  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  184  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  186  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  188  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  190  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  192  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  194  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  196  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  198  <|@ instruction r8|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  202  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:6|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:3|DWORD = MOVE input: rdi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  204  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:6|QWORD[.] vstack:1|QWORD[.] - - vstack:3|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  208  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  210  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:6|QWORD[.] rdx|QWORD[.] - - vstack:3|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction r10|DWORD[_] = MOVE input: vstack:2|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  212  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  214  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:3|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction NOP <|@ <|@
      nr  224  <|@ instruction NOP <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  234  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  238  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:8|DWORD = MOVE input: r10|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ instruction NOP <|@ <|@
      nr  254  <|@ instruction NOP <|@ <|@
      nr  256  <|@ instruction NOP <|@ <|@
      nr  258  <|@ instruction NOP <|@ <|@
      nr  260  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  262  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  264  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  294  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  296  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  326  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  328  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  330  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  332  <|@ instruction NOP <|@ <|@
      nr  334  <|@ instruction NOP <|@ <|@
      nr  336  <|@ instruction NOP <|@ <|@
      nr  338  <|@ instruction NOP <|@ <|@
      nr  340  <|@ instruction NOP <|@ <|@
      nr  342  <|@ instruction NOP <|@ <|@
      nr  344  <|@ instruction NOP <|@ <|@
      nr  346  <|@ instruction NOP <|@ <|@
      nr  348  <|@ instruction NOP <|@ <|@
      nr  350  <|@ instruction NOP <|@ <|@
      nr  352  <|@ instruction NOP <|@ <|@
      nr  354  <|@ instruction NOP <|@ <|@
      nr  356  <|@ instruction NOP <|@ <|@
      nr  358  <|@ instruction NOP <|@ <|@
      nr  360  <|@ instruction NOP <|@ <|@
      nr  362  <|@ instruction NOP <|@ <|@
      nr  364  <|@ instruction NOP <|@ <|@
      nr  366  <|@ instruction NOP <|@ <|@
      nr  368  <|@ instruction NOP <|@ <|@
      nr  370  <|@ instruction NOP <|@ <|@
      nr  372  <|@ instruction NOP <|@ <|@
      nr  374  <|@ instruction NOP <|@ <|@
      nr  376  <|@ instruction NOP <|@ <|@
      nr  378  <|@ instruction NOP <|@ <|@
      nr  380  <|@ instruction NOP <|@ <|@
      nr  382  <|@ instruction NOP <|@ <|@
      nr  384  <|@ instruction NOP <|@ <|@
      nr  386  <|@ instruction NOP <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  394  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:4|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  396  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  398  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  400  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  402  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  404  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  406  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  408  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  410  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  412  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  414  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  416  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  418  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  420  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction vstack:11|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:10|DWORD = MOVE input: rbp|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction vstack:9|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  424  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:11|QWORD[.] vstack:1|QWORD[.] - - vstack:10|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  428  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  430  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:11|QWORD[.] rdx|QWORD[.] - - vstack:10|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD[_] = MOVE input: vstack:9|DWORD[_] moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  432  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  434  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  436  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD = MOVE input: vstack:10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction NOP <|@ <|@
      nr  444  <|@ instruction NOP <|@ <|@
      nr  446  <|@ instruction NOP <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  454  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  456  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction r10|DWORD = INC value: vstack:8|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  470  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  472  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  474  <|@ instruction NOP <|@ <|@
      nr  476  <|@ instruction NOP <|@ <|@
      nr  478  <|@ instruction NOP <|@ <|@
      nr  480  <|@ instruction NOP <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  524  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  526  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  528  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  530  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  532  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  534  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  536  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  538  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  540  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  542  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr  544  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  554  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  556  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  558  <|@ instruction NOP <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  566  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  576  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  578  <|@ instruction NOP <|@ <|@
      nr  580  <|@ instruction NOP <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction NOP <|@ <|@
      nr  592  <|@ instruction NOP <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ instruction NOP <|@ <|@
      nr  608  <|@ instruction NOP <|@ <|@
      nr  610  <|@ instruction NOP <|@ <|@
      nr  612  <|@ instruction NOP <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  628  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  630  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  632  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  634  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  636  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  638  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  640  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  642  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  644  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  646  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr  648  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr  654  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  658  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  660  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  670  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction NOP <|@ <|@
      nr  676  <|@ instruction NOP <|@ <|@
      nr  678  <|@ instruction NOP <|@ <|@
      nr  680  <|@ instruction NOP <|@ <|@
      nr  682  <|@ instruction NOP <|@ <|@
      nr  684  <|@ instruction NOP <|@ <|@
      nr  686  <|@ instruction NOP <|@ <|@
      nr  688  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  690  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  692  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  694  <|@ instruction NOP <|@ <|@
      nr  696  <|@ instruction NOP <|@ <|@
      nr  698  <|@ instruction NOP <|@ <|@
      nr  700  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  702  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  704  <|@ instruction NOP <|@ <|@
      nr  706  <|@ instruction NOP <|@ <|@
      nr  708  <|@ instruction NOP <|@ <|@
      nr  710  <|@ instruction NOP <|@ <|@
      nr  712  <|@ instruction NOP <|@ <|@
      nr  714  <|@ instruction NOP <|@ <|@
      nr  716  <|@ instruction NOP <|@ <|@
      nr  718  <|@ instruction NOP <|@ <|@
      nr  720  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  722  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  724  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  726  <|@ instruction NOP <|@ <|@
      nr  728  <|@ instruction NOP <|@ <|@
      nr  730  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  732  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  734  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r13|QWORD[.] = MOVE input: vstack:11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rbp|DWORD = MOVE input: vstack:10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction NOP <|@ <|@
      nr  750  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  752  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  754  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] vstack:1|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  756  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction NOP <|@ <|@
      nr  766  <|@ instruction NOP <|@ <|@
      nr  768  <|@ instruction NOP <|@ <|@
      nr  770  <|@ instruction NOP <|@ <|@
      nr  772  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  774  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  776  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  778  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  786  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  788  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction NOP <|@ <|@
      nr  796  <|@ instruction NOP <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  806  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  808  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  810  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction NOP <|@ <|@
      nr  816  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  818  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  820  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  822  <|@ instruction NOP <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  828  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  830  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: vstack:3|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction NOP <|@ <|@
      nr  840  <|@ instruction NOP <|@ <|@
      nr  842  <|@ instruction NOP <|@ <|@
      nr  844  <|@ instruction NOP <|@ <|@
      nr  846  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  848  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  850  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] vstack:1|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  852  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  854  <|@ instruction NOP <|@ <|@
      nr  856  <|@ instruction NOP <|@ <|@
      nr  858  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  860  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  862  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  870  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  872  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  874  <|@ instruction NOP <|@ <|@
      nr  876  <|@ instruction NOP <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction NOP <|@ <|@
      nr  886  <|@ instruction NOP <|@ <|@
      nr  888  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  890  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  892  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  894  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  902  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  904  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  906  <|@ instruction NOP <|@ <|@
      nr  908  <|@ instruction NOP <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  912  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  914  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction NOP <|@ <|@
      nr  926  <|@ instruction NOP <|@ <|@
      nr  928  <|@ instruction NOP <|@ <|@
      nr  930  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  932  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  934  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackSlot numbering"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction vstack:4|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction vstack:1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction vstack:5|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction vstack:0|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: vstack:4|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  352  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  356  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  360  <|@ instruction r8|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction vstack:6|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction vstack:3|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction vstack:2|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:6|QWORD[.] vstack:1|QWORD[.] - - vstack:3|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:6|QWORD[.] rdx|QWORD[.] - - vstack:3|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: vstack:2|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: vstack:3|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  430  <|@ instruction vstack:8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:4|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction vstack:11|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction vstack:10|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction vstack:9|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: vstack:11|QWORD[.] vstack:1|QWORD[.] - - vstack:10|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: vstack:11|QWORD[.] rdx|QWORD[.] - - vstack:10|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: vstack:9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: vstack:10|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: vstack:8|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  768  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction r11|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr  772  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  182  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr   54  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: vstack:11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: vstack:10|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] vstack:1|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] vstack:8|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  856  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1000  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1002  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1006  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  888  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: vstack:6|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: vstack:3|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] vstack:1|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOVE input: vstack:8|DWORD moveKind: DWORD <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: vstack:4|QWORD[.] vstack:1|QWORD[.] vstack:5|DWORD vstack:0|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   86  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr   88  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD <|@ <|@
      nr   92  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1022  <|@ instruction r8|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1024  <|@ instruction rcx|DWORD = MOVE input: vstack:5|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1026  <|@ instruction rdx|QWORD[.] = MOVE input: vstack:1|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1028  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:4|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before stack slot allocation"
  vstack:0|q QWORD "[vstack:0|q]" vstack:0|q -1 [34, 1022[ "NOT_SUPPORTED"
  vstack:1|q QWORD "[vstack:1|q]" vstack:1|q -1 [30, 1026[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[vstack:2|d]" vstack:2|d -1 [368, 378[ "NOT_SUPPORTED"
  vstack:3|d DWORD "[vstack:3|d]" vstack:3|d -1 [366, 966[ "NOT_SUPPORTED"
  vstack:4|q QWORD "[vstack:4|q]" vstack:4|q -1 [28, 1028[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[vstack:5|d]" vstack:5|d -1 [32, 1024[ "NOT_SUPPORTED"
  vstack:6|q QWORD "[vstack:6|q]" vstack:6|q -1 [364, 964[ "NOT_SUPPORTED"
  vstack:8|d DWORD "[vstack:8|d]" vstack:8|d -1 [430, 904[ "NOT_SUPPORTED"
  vstack:9|d DWORD "[vstack:9|d]" vstack:9|d -1 [714, 724[ "NOT_SUPPORTED"
  vstack:10|d DWORD "[vstack:10|d]" vstack:10|d -1 [712, 822[ "NOT_SUPPORTED"
  vstack:11|q QWORD "[vstack:11|q]" vstack:11|q -1 [710, 820[ "NOT_SUPPORTED"
end_intervals
begin_intervals
  name "After stack slot allocation"
  vstack:0|q QWORD "[stack:64|q]" vstack:0|q -1 [34, 1022[ "NOT_SUPPORTED"
  vstack:1|q QWORD "[stack:56|q]" vstack:1|q -1 [30, 1026[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[stack:76|d]" vstack:2|d -1 [368, 378[ "NOT_SUPPORTED"
  vstack:3|d DWORD "[stack:32|d]" vstack:3|d -1 [366, 966[ "NOT_SUPPORTED"
  vstack:4|q QWORD "[stack:48|q]" vstack:4|q -1 [28, 1028[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[stack:28|d]" vstack:5|d -1 [32, 1024[ "NOT_SUPPORTED"
  vstack:6|q QWORD "[stack:72|q]" vstack:6|q -1 [364, 964[ "NOT_SUPPORTED"
  vstack:8|d DWORD "[stack:36|d]" vstack:8|d -1 [430, 904[ "NOT_SUPPORTED"
  vstack:9|d DWORD "[stack:76|d]" vstack:9|d -1 [714, 724[ "NOT_SUPPORTED"
  vstack:10|d DWORD "[stack:40|d]" vstack:10|d -1 [712, 822[ "NOT_SUPPORTED"
  vstack:11|q QWORD "[stack:88|q]" vstack:11|q -1 [710, 820[ "NOT_SUPPORTED"
end_intervals
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: stack:48|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  352  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  356  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  360  <|@ instruction r8|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:72|QWORD[.] stack:56|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:72|QWORD[.] rdx|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  430  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:88|QWORD[.] stack:56|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:88|QWORD[.] rdx|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: stack:36|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  768  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  772  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  182  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   54  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  856  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1000  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1002  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1006  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  888  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   86  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   88  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   92  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1022  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1024  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1026  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1028  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: stack:48|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  352  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  356  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  360  <|@ instruction r8|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:72|QWORD[.] stack:56|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:72|QWORD[.] rdx|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  430  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:88|QWORD[.] stack:56|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:88|QWORD[.] rdx|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: stack:36|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  768  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  770  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  772  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  182  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   54  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  856  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1000  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1002  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr 1004  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1006  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  888  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  872  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   86  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   88  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   92  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1022  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1024  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr 1026  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1028  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: stack:48|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  352  <|@ instruction rdx|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  356  <|@ instruction rcx|DWORD = MOVE input: r14|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  360  <|@ instruction r8|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:72|QWORD[.] stack:56|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:72|QWORD[.] rdx|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  430  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  698  <|@ instruction rdx|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  704  <|@ instruction r8|QWORD[.] = MOVE input: r10|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:88|QWORD[.] stack:56|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:88|QWORD[.] rdx|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: stack:36|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  182  <|@ instruction rdx|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   54  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: stack:48|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:72|QWORD[.] stack:56|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:72|QWORD[.] rdx|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  430  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:88|QWORD[.] stack:56|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:88|QWORD[.] rdx|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: stack:36|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: stack:48|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:72|QWORD[.] stack:56|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:72|QWORD[.] rdx|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  430  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:88|QWORD[.] stack:56|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:88|QWORD[.] rdx|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: stack:36|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: stack:48|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:72|QWORD[.] stack:56|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:72|QWORD[.] rdx|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  430  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:88|QWORD[.] stack:56|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:88|QWORD[.] rdx|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: stack:36|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: stack:48|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:72|QWORD[.] stack:56|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:72|QWORD[.] rdx|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:88|QWORD[.] stack:56|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:88|QWORD[.] rdx|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: stack:36|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  430  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: stack:48|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:72|QWORD[.] stack:56|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:72|QWORD[.] rdx|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:88|QWORD[.] stack:56|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:88|QWORD[.] rdx|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: stack:36|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  430  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: stack:48|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:72|QWORD[.] stack:56|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:72|QWORD[.] rdx|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:88|QWORD[.] stack:56|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:88|QWORD[.] rdx|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: stack:36|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  430  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@reference-map: [rax:0, rdx:0, rbx:0, r8:0, r10:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: stack:48|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@reference-map: [stack:20, stack:24, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:72|QWORD[.] stack:56|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:72|QWORD[.] rdx|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@reference-map: [rcx:0, rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@reference-map: [rcx:0, rdx:0, rbx:0, r8:0, r9:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@reference-map: [stack:8, stack:20, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:88|QWORD[.] stack:56|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:88|QWORD[.] rdx|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: stack:36|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  430  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@reference-map: [rcx:0, rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@reference-map: [rcx:0, rdx:0, rsi:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@reference-map: [stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@reference-map: [rsi:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@reference-map: [stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@reference-map: [r13:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@reference-map: [stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@reference-map: [stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@reference-map: [stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@reference-map: [r9:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction NOP <|@ <|@
      nr    4  <|@ instruction NOP <|@ <|@
      nr    6  <|@ instruction NOP <|@ <|@
      nr    8  <|@ instruction NOP <|@ <|@
      nr   10  <|@ instruction NOP <|@ <|@
      nr   12  <|@ instruction NOP <|@ <|@
      nr   14  <|@ instruction NOP <|@ <|@
      nr   16  <|@ instruction NOP <|@ <|@
      nr   18  <|@ instruction NOP <|@ <|@
      nr   20  <|@ instruction NOP <|@ <|@
      nr   22  <|@ instruction NOP <|@ <|@
      nr   24  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   26  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD <|@ <|@
      nr   28  <|@ instruction stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   30  <|@ instruction stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   32  <|@ instruction stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   34  <|@ instruction stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr   36  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr   38  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction NOP <|@ <|@
      nr   66  <|@ instruction NOP <|@ <|@
      nr   68  <|@ instruction NOP <|@ <|@
      nr   70  <|@ instruction NOP <|@ <|@
      nr   72  <|@ instruction CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B5" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction NOP <|@ <|@
      nr  100  <|@ instruction NOP <|@ <|@
      nr  102  <|@ instruction NOP <|@ <|@
      nr  104  <|@ instruction NOP <|@ <|@
      nr  106  <|@ instruction NOP <|@ <|@
      nr  108  <|@ instruction r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  110  <|@ instruction TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B9" "B36" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  224  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  226  <|@ instruction NOP <|@ <|@
      nr  228  <|@ instruction NOP <|@ <|@
      nr  230  <|@ instruction NOP <|@ <|@
      nr  232  <|@ instruction NOP <|@ <|@
      nr  234  <|@ instruction CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B35" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction NOP <|@ <|@
      nr  240  <|@ instruction NOP <|@ <|@
      nr  242  <|@ instruction NOP <|@ <|@
      nr  244  <|@ instruction NOP <|@ <|@
      nr  246  <|@ instruction NOP <|@ <|@
      nr  248  <|@ instruction NOP <|@ <|@
      nr  250  <|@ instruction NOP <|@ <|@
      nr  252  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0] <|@ <|@
      nr  254  <|@ st <@st|@reference-map: [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  256  <|@ instruction r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B34" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  260  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  262  <|@ instruction NOP <|@ <|@
      nr  264  <|@ instruction NOP <|@ <|@
      nr  266  <|@ instruction NOP <|@ <|@
      nr  268  <|@ instruction NOP <|@ <|@
      nr  270  <|@ instruction NOP <|@ <|@
      nr  272  <|@ instruction NOP <|@ <|@
      nr  274  <|@ instruction NOP <|@ <|@
      nr  276  <|@ instruction NOP <|@ <|@
      nr  278  <|@ instruction NOP <|@ <|@
      nr  280  <|@ instruction NOP <|@ <|@
      nr  282  <|@ instruction NOP <|@ <|@
      nr  284  <|@ instruction NOP <|@ <|@
      nr  286  <|@ instruction NOP <|@ <|@
      nr  288  <|@ instruction NOP <|@ <|@
      nr  290  <|@ instruction NOP <|@ <|@
      nr  292  <|@ instruction NOP <|@ <|@
      nr  294  <|@ instruction NOP <|@ <|@
      nr  296  <|@ instruction NOP <|@ <|@
      nr  298  <|@ instruction NOP <|@ <|@
      nr  300  <|@ instruction NOP <|@ <|@
      nr  302  <|@ instruction NOP <|@ <|@
      nr  304  <|@ instruction NOP <|@ <|@
      nr  306  <|@ instruction NOP <|@ <|@
      nr  308  <|@ instruction NOP <|@ <|@
      nr  310  <|@ instruction NOP <|@ <|@
      nr  312  <|@ instruction NOP <|@ <|@
      nr  314  <|@ instruction NOP <|@ <|@
      nr  316  <|@ instruction NOP <|@ <|@
      nr  318  <|@ instruction NOP <|@ <|@
      nr  320  <|@ instruction NOP <|@ <|@
      nr  322  <|@ instruction NOP <|@ <|@
      nr  324  <|@ instruction NOP <|@ <|@
      nr  326  <|@ instruction rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  328  <|@ st <@st|@reference-map: [rax:0, rdx:0, rbx:0, r8:0, r10:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: stack:48|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  330  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  332  <|@ instruction rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  334  <|@ instruction MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  336  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  338  <|@ instruction r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  340  <|@ instruction rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD <|@ <|@
      nr  342  <|@ instruction r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  344  <|@ instruction rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  346  <|@ instruction r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  348  <|@ instruction rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD <|@ <|@
      nr  350  <|@ instruction r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  354  <|@ instruction r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  362  <|@ instruction rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD <|@ <|@
      nr  364  <|@ instruction stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD <|@ <|@
      nr  366  <|@ instruction stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD <|@ <|@
      nr  368  <|@ instruction stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD <|@ <|@
      nr  370  <|@ st <@st|@reference-map: [stack:20, stack:24, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:72|QWORD[.] stack:56|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  372  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  374  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  376  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:72|QWORD[.] rdx|QWORD[.] - - stack:32|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  378  <|@ instruction r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  380  <|@ instruction r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  382  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B32" 
    xhandlers
    flags 
    probability 4603804574209637939
    begin_IR
      LIR
      nr  384  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  386  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  388  <|@ instruction NOP <|@ <|@
      nr  390  <|@ instruction NOP <|@ <|@
      nr  392  <|@ instruction NOP <|@ <|@
      nr  394  <|@ instruction NOP <|@ <|@
      nr  396  <|@ instruction NOP <|@ <|@
      nr  398  <|@ instruction NOP <|@ <|@
      nr  400  <|@ instruction NOP <|@ <|@
      nr  402  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  404  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD <|@ <|@
      nr  406  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" 
    xhandlers
    flags 
    probability 4600426410396547919
    begin_IR
      LIR
      nr  408  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  410  <|@ instruction NOP <|@ <|@
      nr  412  <|@ instruction NOP <|@ <|@
      nr  414  <|@ instruction NOP <|@ <|@
      nr  416  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  418  <|@ instruction r10|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  426  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B15" "B29" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  446  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  448  <|@ instruction NOP <|@ <|@
      nr  450  <|@ instruction NOP <|@ <|@
      nr  452  <|@ instruction NOP <|@ <|@
      nr  454  <|@ instruction NOP <|@ <|@
      nr  456  <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B16" "B18" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  458  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  460  <|@ instruction NOP <|@ <|@
      nr  462  <|@ instruction NOP <|@ <|@
      nr  464  <|@ instruction NOP <|@ <|@
      nr  466  <|@ instruction NOP <|@ <|@
      nr  468  <|@ instruction NOP <|@ <|@
      nr  470  <|@ instruction NOP <|@ <|@
      nr  472  <|@ instruction NOP <|@ <|@
      nr  474  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  476  <|@ instruction r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  478  <|@ instruction TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B19" "B28" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  580  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  582  <|@ instruction NOP <|@ <|@
      nr  584  <|@ instruction NOP <|@ <|@
      nr  586  <|@ instruction NOP <|@ <|@
      nr  588  <|@ instruction NOP <|@ <|@
      nr  590  <|@ instruction CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed} <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B20" "B27" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  592  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  594  <|@ instruction NOP <|@ <|@
      nr  596  <|@ instruction NOP <|@ <|@
      nr  598  <|@ instruction NOP <|@ <|@
      nr  600  <|@ instruction NOP <|@ <|@
      nr  602  <|@ instruction NOP <|@ <|@
      nr  604  <|@ instruction NOP <|@ <|@
      nr  606  <|@ st <@st|@reference-map: [rcx:0, rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3] <|@ <|@
      nr  608  <|@ instruction rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  610  <|@ instruction CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B21" "B26" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  612  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  614  <|@ instruction NOP <|@ <|@
      nr  616  <|@ instruction NOP <|@ <|@
      nr  618  <|@ instruction NOP <|@ <|@
      nr  620  <|@ instruction NOP <|@ <|@
      nr  622  <|@ instruction NOP <|@ <|@
      nr  624  <|@ instruction NOP <|@ <|@
      nr  626  <|@ instruction NOP <|@ <|@
      nr  628  <|@ instruction NOP <|@ <|@
      nr  630  <|@ instruction NOP <|@ <|@
      nr  632  <|@ instruction NOP <|@ <|@
      nr  634  <|@ instruction NOP <|@ <|@
      nr  636  <|@ instruction NOP <|@ <|@
      nr  638  <|@ instruction NOP <|@ <|@
      nr  640  <|@ instruction NOP <|@ <|@
      nr  642  <|@ instruction NOP <|@ <|@
      nr  644  <|@ instruction NOP <|@ <|@
      nr  646  <|@ instruction NOP <|@ <|@
      nr  648  <|@ instruction NOP <|@ <|@
      nr  650  <|@ instruction NOP <|@ <|@
      nr  652  <|@ instruction NOP <|@ <|@
      nr  654  <|@ instruction NOP <|@ <|@
      nr  656  <|@ instruction NOP <|@ <|@
      nr  658  <|@ instruction NOP <|@ <|@
      nr  660  <|@ instruction NOP <|@ <|@
      nr  662  <|@ instruction NOP <|@ <|@
      nr  664  <|@ instruction NOP <|@ <|@
      nr  666  <|@ instruction NOP <|@ <|@
      nr  668  <|@ instruction NOP <|@ <|@
      nr  670  <|@ instruction NOP <|@ <|@
      nr  672  <|@ instruction NOP <|@ <|@
      nr  674  <|@ instruction rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr  676  <|@ st <@st|@reference-map: [rcx:0, rdx:0, rbx:0, r8:0, r9:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  678  <|@ instruction rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD <|@ <|@
      nr  680  <|@ instruction MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD <|@ <|@
      nr  682  <|@ instruction rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  684  <|@ instruction rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  686  <|@ instruction rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD <|@ <|@
      nr  688  <|@ instruction rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD <|@ <|@
      nr  690  <|@ instruction rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  692  <|@ instruction r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  694  <|@ instruction rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  696  <|@ instruction rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  700  <|@ instruction rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD <|@ <|@
      nr  702  <|@ instruction r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD <|@ <|@
      nr  706  <|@ instruction rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD <|@ <|@
      nr  708  <|@ instruction rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD <|@ <|@
      nr  710  <|@ instruction stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD <|@ <|@
      nr  712  <|@ instruction stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD <|@ <|@
      nr  714  <|@ instruction stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD <|@ <|@
      nr  716  <|@ st <@st|@reference-map: [stack:8, stack:20, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28]
locals: stack:88|QWORD[.] stack:56|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50] <|@ <|@
      nr  718  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  720  <|@ instruction rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD <|@ <|@
      nr  722  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: stack:88|QWORD[.] rdx|QWORD[.] - - stack:40|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50] <|@ <|@
      nr  724  <|@ instruction r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD <|@ <|@
      nr  726  <|@ instruction r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr  728  <|@ instruction CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors "B22" "B23" 
    xhandlers
    flags 
    loop_index 0
    loop_depth 1
    probability 4600425871253046120
    begin_IR
      LIR
      nr  730  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  732  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  734  <|@ instruction NOP <|@ <|@
      nr  736  <|@ instruction NOP <|@ <|@
      nr  738  <|@ instruction NOP <|@ <|@
      nr  740  <|@ instruction NOP <|@ <|@
      nr  742  <|@ instruction NOP <|@ <|@
      nr  744  <|@ instruction NOP <|@ <|@
      nr  746  <|@ instruction NOP <|@ <|@
      nr  748  <|@ instruction rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  750  <|@ instruction MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD <|@ <|@
      nr  752  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4597272599825698647
    begin_IR
      LIR
      nr  754  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  756  <|@ instruction NOP <|@ <|@
      nr  758  <|@ instruction NOP <|@ <|@
      nr  760  <|@ instruction NOP <|@ <|@
      nr  762  <|@ instruction NOP <|@ <|@
      nr  764  <|@ instruction r10|DWORD = INC value: stack:36|DWORD size: DWORD <|@ <|@
      nr  766  <|@ instruction rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr  774  <|@ instruction JUMP ~outgoingValues: [] destination: B22 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B22" 
    successors "B14" "B30" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4603578759668388221
    begin_IR
      LIR
      nr  428  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  420  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  422  <|@ instruction r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  424  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr  430  <|@ instruction stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  432  <|@ instruction NOP <|@ <|@
      nr  434  <|@ instruction NOP <|@ <|@
      nr  436  <|@ instruction NOP <|@ <|@
      nr  438  <|@ instruction NOP <|@ <|@
      nr  440  <|@ instruction NOP <|@ <|@
      nr  442  <|@ instruction rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD <|@ <|@
      nr  444  <|@ st <@st|@reference-map: [rcx:0, rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] rdx|QWORD[.] r11|DWORD r8|QWORD[.] r10|DWORD 
>@ <|@ instruction CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B4" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction NOP <|@ <|@
      nr  116  <|@ instruction NOP <|@ <|@
      nr  118  <|@ instruction NOP <|@ <|@
      nr  120  <|@ instruction NOP <|@ <|@
      nr  122  <|@ instruction NOP <|@ <|@
      nr  124  <|@ instruction NOP <|@ <|@
      nr  126  <|@ instruction NOP <|@ <|@
      nr  128  <|@ instruction NOP <|@ <|@
      nr  130  <|@ instruction NOP <|@ <|@
      nr  132  <|@ instruction NOP <|@ <|@
      nr  134  <|@ instruction NOP <|@ <|@
      nr  136  <|@ instruction NOP <|@ <|@
      nr  138  <|@ instruction NOP <|@ <|@
      nr  140  <|@ instruction NOP <|@ <|@
      nr  142  <|@ instruction NOP <|@ <|@
      nr  144  <|@ instruction NOP <|@ <|@
      nr  146  <|@ instruction NOP <|@ <|@
      nr  148  <|@ instruction NOP <|@ <|@
      nr  150  <|@ instruction NOP <|@ <|@
      nr  152  <|@ instruction NOP <|@ <|@
      nr  154  <|@ instruction NOP <|@ <|@
      nr  156  <|@ instruction NOP <|@ <|@
      nr  158  <|@ instruction NOP <|@ <|@
      nr  160  <|@ instruction NOP <|@ <|@
      nr  162  <|@ instruction rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  164  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr  166  <|@ st <@st|@reference-map: [rcx:0, rdx:0, rsi:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] stack:28|DWORD stack:64|QWORD[.] - 
>@ <|@ instruction r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0] <|@ <|@
      nr  168  <|@ instruction rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  170  <|@ instruction r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  172  <|@ instruction rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD <|@ <|@
      nr  174  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  176  <|@ instruction rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  178  <|@ instruction rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  180  <|@ instruction r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  186  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  188  <|@ st <@st|@reference-map: [stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  190  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B25" 
    xhandlers
    flags 
    probability 4600427309098664858
    begin_IR
      LIR
      nr  214  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  216  <|@ instruction NOP <|@ <|@
      nr  218  <|@ instruction NOP <|@ <|@
      nr  220  <|@ instruction NOP <|@ <|@
      nr  222  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B7" 
    successors 
    xhandlers
    flags 
    probability 4603579478591197590
    begin_IR
      LIR
      nr  796  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  798  <|@ instruction NOP <|@ <|@
      nr  800  <|@ instruction NOP <|@ <|@
      nr  802  <|@ instruction NOP <|@ <|@
      nr  804  <|@ instruction NOP <|@ <|@
      nr  806  <|@ instruction NOP <|@ <|@
      nr  808  <|@ instruction NOP <|@ <|@
      nr  810  <|@ instruction NOP <|@ <|@
      nr  812  <|@ instruction NOP <|@ <|@
      nr  814  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  816  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B33" 
    xhandlers
    flags 
    probability 4598175538767986967
    begin_IR
      LIR
      nr  930  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  932  <|@ instruction NOP <|@ <|@
      nr  934  <|@ instruction NOP <|@ <|@
      nr  936  <|@ instruction NOP <|@ <|@
      nr  938  <|@ instruction JUMP ~outgoingValues: [] destination: B32 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B23" "B32" 
    successors 
    xhandlers
    flags 
    probability 4600877500335545556
    begin_IR
      LIR
      nr  940  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  942  <|@ instruction NOP <|@ <|@
      nr  944  <|@ instruction NOP <|@ <|@
      nr  946  <|@ instruction NOP <|@ <|@
      nr  948  <|@ instruction NOP <|@ <|@
      nr  950  <|@ instruction NOP <|@ <|@
      nr  952  <|@ instruction NOP <|@ <|@
      nr  954  <|@ instruction NOP <|@ <|@
      nr  956  <|@ instruction NOP <|@ <|@
      nr  958  <|@ instruction rax|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr  960  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" 
    successors "B17" "B24" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  480  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  482  <|@ instruction NOP <|@ <|@
      nr  484  <|@ instruction NOP <|@ <|@
      nr  486  <|@ instruction NOP <|@ <|@
      nr  488  <|@ instruction NOP <|@ <|@
      nr  490  <|@ instruction NOP <|@ <|@
      nr  492  <|@ instruction NOP <|@ <|@
      nr  494  <|@ instruction NOP <|@ <|@
      nr  496  <|@ instruction NOP <|@ <|@
      nr  498  <|@ instruction NOP <|@ <|@
      nr  500  <|@ instruction NOP <|@ <|@
      nr  502  <|@ instruction NOP <|@ <|@
      nr  504  <|@ instruction NOP <|@ <|@
      nr  506  <|@ instruction NOP <|@ <|@
      nr  508  <|@ instruction NOP <|@ <|@
      nr  510  <|@ instruction NOP <|@ <|@
      nr  512  <|@ instruction NOP <|@ <|@
      nr  514  <|@ instruction NOP <|@ <|@
      nr  516  <|@ instruction NOP <|@ <|@
      nr  518  <|@ instruction NOP <|@ <|@
      nr  520  <|@ instruction NOP <|@ <|@
      nr  522  <|@ instruction NOP <|@ <|@
      nr  524  <|@ instruction NOP <|@ <|@
      nr  526  <|@ instruction NOP <|@ <|@
      nr  528  <|@ instruction NOP <|@ <|@
      nr  530  <|@ instruction rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD <|@ <|@
      nr  532  <|@ st <@st|@reference-map: [rsi:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3] <|@ <|@
      nr  534  <|@ st <@st|@reference-map: [rdx:0, rsi:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: rsi|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3] <|@ <|@
      nr  536  <|@ instruction r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000] <|@ <|@
      nr  538  <|@ instruction rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0 <|@ <|@
      nr  540  <|@ instruction rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD <|@ <|@
      nr  542  <|@ instruction rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD <|@ <|@
      nr  544  <|@ instruction rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3 <|@ <|@
      nr  546  <|@ instruction rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr  548  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr  550  <|@ instruction rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  552  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr  554  <|@ st <@st|@reference-map: [stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32] <|@ <|@
      nr  556  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B25" 
    xhandlers
    flags 
    probability 4597273678112702245
    begin_IR
      LIR
      nr  786  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  788  <|@ instruction NOP <|@ <|@
      nr  790  <|@ instruction NOP <|@ <|@
      nr  792  <|@ instruction NOP <|@ <|@
      nr  794  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B21" 
    successors "B33" 
    xhandlers
    flags 
    probability 4594571943425652601
    begin_IR
      LIR
      nr  776  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  778  <|@ instruction NOP <|@ <|@
      nr  780  <|@ instruction NOP <|@ <|@
      nr  782  <|@ instruction NOP <|@ <|@
      nr  784  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B33 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction NOP <|@ <|@
      nr   44  <|@ instruction NOP <|@ <|@
      nr   46  <|@ instruction NOP <|@ <|@
      nr   48  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   50  <|@ instruction r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5] <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B37"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" "B36" "B35" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr 1032  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   52  <|@ instruction r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD <|@ <|@
      nr   56  <|@ instruction rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD <|@ <|@
      nr   58  <|@ instruction rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD <|@ <|@
      nr 1034  <|@ instruction NOP <|@ <|@
      nr 1036  <|@ instruction NOP <|@ <|@
      nr 1038  <|@ instruction NOP <|@ <|@
      nr 1040  <|@ instruction NOP <|@ <|@
      nr 1042  <|@ instruction NOP <|@ <|@
      nr 1044  <|@ instruction NOP <|@ <|@
      nr 1046  <|@ instruction NOP <|@ <|@
      nr 1048  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr 1050  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr 1052  <|@ st <@st|@reference-map: [rdx:0, rsi:0, r8:0]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0]
locals: rsi|QWORD[.] rdx|QWORD[.] rcx|DWORD r8|QWORD[.] - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B20" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  818  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  820  <|@ instruction r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD <|@ <|@
      nr  822  <|@ instruction rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD <|@ <|@
      nr  824  <|@ instruction NOP <|@ <|@
      nr  826  <|@ instruction NOP <|@ <|@
      nr  828  <|@ instruction NOP <|@ <|@
      nr  830  <|@ instruction NOP <|@ <|@
      nr  832  <|@ instruction NOP <|@ <|@
      nr  834  <|@ instruction NOP <|@ <|@
      nr  836  <|@ instruction NOP <|@ <|@
      nr  838  <|@ instruction MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD <|@ <|@
      nr  840  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  842  <|@ st <@st|@reference-map: [r13:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r13|QWORD[.] stack:56|QWORD[.] - - rbp|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  558  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  560  <|@ instruction NOP <|@ <|@
      nr  562  <|@ instruction NOP <|@ <|@
      nr  564  <|@ instruction NOP <|@ <|@
      nr  566  <|@ instruction NOP <|@ <|@
      nr  568  <|@ instruction NOP <|@ <|@
      nr  570  <|@ instruction NOP <|@ <|@
      nr  572  <|@ instruction NOP <|@ <|@
      nr  574  <|@ instruction MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD <|@ <|@
      nr  576  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  578  <|@ st <@st|@reference-map: [stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] stack:36|DWORD 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  844  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  846  <|@ instruction NOP <|@ <|@
      nr  848  <|@ instruction NOP <|@ <|@
      nr  850  <|@ instruction NOP <|@ <|@
      nr  852  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  854  <|@ instruction r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5] <|@ <|@
      nr  858  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B30" "B29" "B28" "B27" 
    successors 
    xhandlers
    flags 
    probability 2364389804369510400
    begin_IR
      LIR
      nr  908  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  904  <|@ instruction r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  910  <|@ instruction NOP <|@ <|@
      nr  912  <|@ instruction NOP <|@ <|@
      nr  914  <|@ instruction NOP <|@ <|@
      nr  916  <|@ instruction NOP <|@ <|@
      nr  918  <|@ instruction NOP <|@ <|@
      nr  920  <|@ instruction NOP <|@ <|@
      nr  922  <|@ instruction NOP <|@ <|@
      nr  924  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  926  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  928  <|@ st <@st|@reference-map: [stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] r8|DWORD 
>@ <|@ instruction DEOPT info [bci:3] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  192  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  194  <|@ instruction NOP <|@ <|@
      nr  196  <|@ instruction NOP <|@ <|@
      nr  198  <|@ instruction NOP <|@ <|@
      nr  200  <|@ instruction NOP <|@ <|@
      nr  202  <|@ instruction NOP <|@ <|@
      nr  204  <|@ instruction NOP <|@ <|@
      nr  206  <|@ instruction NOP <|@ <|@
      nr  208  <|@ instruction MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD <|@ <|@
      nr  210  <|@ instruction MOV x: [r15|QWORD + 1168] y: 660 size: QWORD <|@ <|@
      nr  212  <|@ st <@st|@reference-map: [stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35]
stack: int[0|0x0] 
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:35] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B35"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  988  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  990  <|@ instruction NOP <|@ <|@
      nr  992  <|@ instruction NOP <|@ <|@
      nr  994  <|@ instruction NOP <|@ <|@
      nr  996  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  998  <|@ instruction r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5] <|@ <|@
      nr 1008  <|@ instruction JUMP ~outgoingValues: [] destination: B35 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B14" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  876  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  878  <|@ instruction NOP <|@ <|@
      nr  880  <|@ instruction NOP <|@ <|@
      nr  882  <|@ instruction NOP <|@ <|@
      nr  884  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  886  <|@ instruction r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed] <|@ <|@
      nr  890  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  962  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  964  <|@ instruction r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD <|@ <|@
      nr  966  <|@ instruction rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  968  <|@ instruction NOP <|@ <|@
      nr  970  <|@ instruction NOP <|@ <|@
      nr  972  <|@ instruction NOP <|@ <|@
      nr  974  <|@ instruction NOP <|@ <|@
      nr  976  <|@ instruction NOP <|@ <|@
      nr  978  <|@ instruction NOP <|@ <|@
      nr  980  <|@ instruction NOP <|@ <|@
      nr  982  <|@ instruction MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD <|@ <|@
      nr  984  <|@ instruction MOV x: [r15|QWORD + 1168] y: 0 size: QWORD <|@ <|@
      nr  986  <|@ st <@st|@reference-map: [r9:0, stack:32, stack:40, stack:48]
live-base-pointers: []
java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31]
stack: rax|DWORD 
locals: r9|QWORD[.] stack:56|QWORD[.] - - rdi|DWORD - 
java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50]
locals: stack:48|QWORD[.] stack:56|QWORD[.] stack:28|DWORD stack:64|QWORD[.] int[0|0x0] 
>@ <|@ instruction DEOPT info [bci:31, 50] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  892  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  894  <|@ instruction NOP <|@ <|@
      nr  896  <|@ instruction NOP <|@ <|@
      nr  898  <|@ instruction NOP <|@ <|@
      nr  900  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  902  <|@ instruction r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5] <|@ <|@
      nr  906  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B18" 
    successors "B31" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  860  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  862  <|@ instruction NOP <|@ <|@
      nr  864  <|@ instruction NOP <|@ <|@
      nr  866  <|@ instruction NOP <|@ <|@
      nr  868  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr  870  <|@ instruction r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd] <|@ <|@
      nr  874  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B31 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction NOP <|@ <|@
      nr   78  <|@ instruction NOP <|@ <|@
      nr   80  <|@ instruction NOP <|@ <|@
      nr   82  <|@ instruction r11|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr   84  <|@ instruction r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed] <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B3 -> B37 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B36"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B37" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr 1010  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr 1012  <|@ instruction NOP <|@ <|@
      nr 1014  <|@ instruction NOP <|@ <|@
      nr 1016  <|@ instruction NOP <|@ <|@
      nr 1018  <|@ instruction r11|QWORD = MOVE input: long[1300|0x514] <|@ <|@
      nr 1020  <|@ instruction r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd] <|@ <|@
      nr 1030  <|@ instruction JUMP ~outgoingValues: [] destination: B36 -> B37 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iconst_0      
     1: istore        4
     3: iload         4
     5: aload_0       
     6: getfield      #2          // size:int
     9: if_icmpge     64
    12: aload_0       
    13: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    16: iload         4
    18: aaload        
    19: ifnonnull     40
    22: aload_0       
    23: getfield      #3          // conn:java.util.regex.Pattern$Node
    26: getfield      #5          // java.util.regex.Pattern$Node.next:java.util.regex.Pattern$Node
    29: aload_1       
    30: iload_2       
    31: aload_3       
    32: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    35: ifeq          58
    38: iconst_1      
    39: ireturn       
    40: aload_0       
    41: getfield      #1          // atoms:java.util.regex.Pattern$Node[]
    44: iload         4
    46: aaload        
    47: aload_1       
    48: iload_2       
    49: aload_3       
    50: invokevirtual #6          // java.util.regex.Pattern$Node.match:(java.util.regex.Matcher, int, java.lang.CharSequence)boolean
    53: ifeq          58
    56: iconst_1      
    57: ireturn       
    58: iinc          
    61: goto          3
    64: iconst_0      
    65: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 448b560849bc0000002b787f00004d03d44d33e4493bc20f85e3ffffff66669089842400c0feff4883ec589041817f20000000000f85bb050000909090909090909090909048896c245048897424304889542428894c24444c894424208b5e14833cdd0c000000000f84da03000090909090837e10010f8c4f0500009090909090448b14dd100000004585d20f84870200009090909042813cd508000000addeadde0f8538050000909090909090908b5a408b04dd0c000000468b1cd510000000413bc30f867d0400009090909090909090909090909090909090909090909090909090909090909090428b04d50c000000448b0cc50800000048c1e303428b7c9b1042894c9b1048bb0000002b787f00004e8d0c0b498b99f00100004c8b5b4048c1e003458bca49c1e103488bf04c8bea448bf1498bc0498bc34c894c2418897c24404489542414ffd00f1f840000000000488b5424288b72408b0cf50c000000448b542414468b04d510000000413bc80f86f60300008b7c24409090909090909048c1e60342897c861085c00f8514020000909090488bce41ba01000000e9450100006666660f1f840000000000666666900f1f8400000000006666669090909090443b56100f8d8e0300009090909090909048c1e303468b4c93104585c90f84e80100009090909042813ccd08000000addeadde0f85b90300009090909090908b590c428b04cd100000003bd80f86d0020000909090909090909090909090909090909090909090909090909090909090428b1ccd0c0000008b3cdd080000008b6c811044895c811048b90000002b787f0000488d3c39488b87f0010000488b784048c1e303458be949c1e503488bf3488bda418bcb4d8bd0488bd8488bc74c896c2408896c243844894c2414ffd00f1f840000000000488b5424288b72408b0cf50c000000448b4c2414468b04cd10000000413bc80f86ca0100008b6c24389090909090909048c1e60342896c861085c00f856501000090909090448b54243c41ffc2488bce4c8b442420448b5c2444488b742430448954243c90909090908b5e14443b14dd0c0000000f82acfeffffe9880200009090909090909090909090909090909090909090909090908b4e188b0ccd0c000000448b04cd0800000048bb0000002b787f00004e8d0403498b98f0010000488b434048c1e103488bf14c8bda8b4c24444c8b442420ffd00f1f84000000000085c00f849c0100009090909090909090909090b801000000488b6c24504883c458493ba7500400000f875e020000c39090909090909090909090b801000000488b6c24504883c458493ba7500400000f874b020000c39090909090909090909090909090909090909090909090908b56188b14d50c0000008b0cd50800000049b80000002b787f0000498d0c08488b99f0010000488b434048c1e203488bf2488b5424288b4c24444c8b442420ffd00f1f84000000000085c00f8484000000909090e944ffffff909090e963ffffff90909049c7c30000000041bae59ffeff4c8b442420488b542428488b74243090909090909090458997840400004d899f90040000e8000000000f1f8400000000004c8b6c24088b6c24389090909090909041c78784040000e5a7feff49c7879004000000000000e8000000000f1f8400000000009090909090909041c78784040000ed0cfeff49c7879004000094020000e8000000000f1f84000000000090909049c7c30000000041bae5c3feff448b44243c90909090909090458997840400004d899f90040000e8000000000f1f8400000000009090909090909041c78784040000ed15feff49c7879004000094020000e8000000000f1f84000000000090909049c7c30000000041bae525ffffe9fcfeffff90909049c7c31400000041baed11feffeb884c8b4c24188b7c24409090909090909041c78784040000e509ffff49c7879004000000000000e8000000000f1f84000000000090909049c7c30000000041bae5f9feffe940ffffff90909049c7c31405000041bacdd5feffe92bffffff90909049c7c31400000041baed19feffe978feffff90909049c7c31405000041bacd3dffffe963feffff48896c2450e800000000e936fafffff4488d0d8efdffff49898f68040000e9e8f9fffff4488d0da1fdffff49898f68040000e9d4f9fffff441c78784040000f562ffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f53bffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f533ffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f51affff49c7879004000000000000e8000000000f1f84000000000041c78784040000f50effff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5d1feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5b8feff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5acfeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5fefeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f54effff49c7879004000000000000e8000000000f1f84000000000041c78784040000f548ffff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5eefeff49c7879004000000000000e8000000000f1f84000000000041c78784040000f5e8feff49c7879004000000000000e8000000000f1f840000000000e800000000f4e800000000f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f78b20335c8, value=140155947602048]:0x7f7899785080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 NOP  <||@
  Comment 59 4 NOP  <||@
  Comment 60 6 NOP  <||@
  Comment 61 8 NOP  <||@
  Comment 62 10 NOP  <||@
  Comment 63 12 NOP  <||@
  Comment 64 14 NOP  <||@
  Comment 65 16 NOP  <||@
  Comment 66 18 NOP  <||@
  Comment 67 20 NOP  <||@
  Comment 68 22 NOP  <||@
  Comment 69 24 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 74 26 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD  <||@
  Comment 74 28 stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 79 30 stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 84 32 stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 88 34 stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 93 36 rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD  <||@
  Comment 96 38 CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0]  <||@
  Comment 96 [rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 96 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 110 block B2 null  <||@
  Comment 110 62 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 110 64 NOP  <||@
  Comment 111 66 NOP  <||@
  Comment 112 68 NOP  <||@
  Comment 113 70 NOP  <||@
  Comment 114 72 CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null  <||@
  Comment 124 block B4 null  <||@
  Comment 124 96 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 124 98 NOP  <||@
  Comment 125 100 NOP  <||@
  Comment 126 102 NOP  <||@
  Comment 127 104 NOP  <||@
  Comment 128 106 NOP  <||@
  Comment 129 108 r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 137 110 TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD  <||@
  Comment 146 block B8 null  <||@
  Comment 146 224 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 146 226 NOP  <||@
  Comment 147 228 NOP  <||@
  Comment 148 230 NOP  <||@
  Comment 149 232 NOP  <||@
  Comment 150 234 CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 150 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 168 block B9 null  <||@
  Comment 168 236 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 168 238 NOP  <||@
  Comment 169 240 NOP  <||@
  Comment 170 242 NOP  <||@
  Comment 171 244 NOP  <||@
  Comment 172 246 NOP  <||@
  Comment 173 248 NOP  <||@
  Comment 174 250 NOP  <||@
  Comment 175 252 rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0]  <||@
  Comment 175 [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 175 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 178 254 rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 178 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 178 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 185 256 r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 193 258 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD  <||@
  Comment 202 block B10 null  <||@
  Comment 202 260 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 202 262 NOP  <||@
  Comment 203 264 NOP  <||@
  Comment 204 266 NOP  <||@
  Comment 205 268 NOP  <||@
  Comment 206 270 NOP  <||@
  Comment 207 272 NOP  <||@
  Comment 208 274 NOP  <||@
  Comment 209 276 NOP  <||@
  Comment 210 278 NOP  <||@
  Comment 211 280 NOP  <||@
  Comment 212 282 NOP  <||@
  Comment 213 284 NOP  <||@
  Comment 214 286 NOP  <||@
  Comment 215 288 NOP  <||@
  Comment 216 290 NOP  <||@
  Comment 217 292 NOP  <||@
  Comment 218 294 NOP  <||@
  Comment 219 296 NOP  <||@
  Comment 220 298 NOP  <||@
  Comment 221 300 NOP  <||@
  Comment 222 302 NOP  <||@
  Comment 223 304 NOP  <||@
  Comment 224 306 NOP  <||@
  Comment 225 308 NOP  <||@
  Comment 226 310 NOP  <||@
  Comment 227 312 NOP  <||@
  Comment 228 314 NOP  <||@
  Comment 229 316 NOP  <||@
  Comment 230 318 NOP  <||@
  Comment 231 320 NOP  <||@
  Comment 232 322 NOP  <||@
  Comment 233 324 NOP  <||@
  Comment 234 326 rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 242 328 r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0]  <||@
  Comment 242 [rax:0, rdx:0, rbx:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4 
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 242 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 250 330 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 254 332 rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD  <||@
  Comment 259 334 MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 264 336 rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 274 338 r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0  <||@
  Comment 278 340 rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD  <||@
  Comment 285 342 r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 289 344 rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 293 346 r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 300 348 rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD  <||@
  Comment 303 350 r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 306 354 r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 309 358 rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 312 362 rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD  <||@
  Comment 315 364 stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD  <||@
  Comment 320 366 stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD  <||@
  Comment 324 368 stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD  <||@
  Comment 329 370 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50]  <||@
  Comment 329 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 329 INLINE_INVOKE  <||@
  Comment 331 [stack:20, stack:24, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4               |5 
     locals:  |stack:72|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:32|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0]   <||@
  Comment 339 372 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 344 374 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 347 376 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50]  <||@
  Comment 347 [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:72|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:32|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0]   <||@
  Comment 347 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 354 378 r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD  <||@
  Comment 359 380 r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 367 382 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD  <||@
  Comment 376 block B11 null  <||@
  Comment 376 384 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 376 386 rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD  <||@
  Comment 380 388 NOP  <||@
  Comment 381 390 NOP  <||@
  Comment 382 392 NOP  <||@
  Comment 383 394 NOP  <||@
  Comment 384 396 NOP  <||@
  Comment 385 398 NOP  <||@
  Comment 386 400 NOP  <||@
  Comment 387 402 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 391 404 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD  <||@
  Comment 396 406 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD  <||@
  Comment 404 block B12 null  <||@
  Comment 404 408 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 404 410 NOP  <||@
  Comment 405 412 NOP  <||@
  Comment 406 414 NOP  <||@
  Comment 407 416 rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 410 418 r10|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 416 426 JUMP ~outgoingValues: [] destination: B12 -> B13  <||@
  Comment 421 block B14 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 421 446 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 448 448 NOP  <||@
  Comment 449 450 NOP  <||@
  Comment 450 452 NOP  <||@
  Comment 451 454 NOP  <||@
  Comment 452 456 CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD  <||@
  Comment 462 block B15 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 462 458 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 462 460 NOP  <||@
  Comment 463 462 NOP  <||@
  Comment 464 464 NOP  <||@
  Comment 465 466 NOP  <||@
  Comment 466 468 NOP  <||@
  Comment 467 470 NOP  <||@
  Comment 468 472 NOP  <||@
  Comment 469 474 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 473 476 r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD  <||@
  Comment 478 478 TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD  <||@
  Comment 487 block B18 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 487 580 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 487 582 NOP  <||@
  Comment 488 584 NOP  <||@
  Comment 489 586 NOP  <||@
  Comment 490 588 NOP  <||@
  Comment 491 590 CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 491 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 509 block B19 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 509 592 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 509 594 NOP  <||@
  Comment 510 596 NOP  <||@
  Comment 511 598 NOP  <||@
  Comment 512 600 NOP  <||@
  Comment 513 602 NOP  <||@
  Comment 514 604 NOP  <||@
  Comment 515 606 rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3]  <||@
  Comment 515 [rcx:0, rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |r10|DWORD   <||@
  Comment 515 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 518 608 rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 526 610 CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD  <||@
  Comment 534 block B20 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 534 612 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 534 614 NOP  <||@
  Comment 535 616 NOP  <||@
  Comment 536 618 NOP  <||@
  Comment 537 620 NOP  <||@
  Comment 538 622 NOP  <||@
  Comment 539 624 NOP  <||@
  Comment 540 626 NOP  <||@
  Comment 541 628 NOP  <||@
  Comment 542 630 NOP  <||@
  Comment 543 632 NOP  <||@
  Comment 544 634 NOP  <||@
  Comment 545 636 NOP  <||@
  Comment 546 638 NOP  <||@
  Comment 547 640 NOP  <||@
  Comment 548 642 NOP  <||@
  Comment 549 644 NOP  <||@
  Comment 550 646 NOP  <||@
  Comment 551 648 NOP  <||@
  Comment 552 650 NOP  <||@
  Comment 553 652 NOP  <||@
  Comment 554 654 NOP  <||@
  Comment 555 656 NOP  <||@
  Comment 556 658 NOP  <||@
  Comment 557 660 NOP  <||@
  Comment 558 662 NOP  <||@
  Comment 559 664 NOP  <||@
  Comment 560 666 NOP  <||@
  Comment 561 668 NOP  <||@
  Comment 562 670 NOP  <||@
  Comment 563 672 NOP  <||@
  Comment 564 674 rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 572 676 rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3]  <||@
  Comment 572 [rcx:0, rdx:0, rbx:0, r8:0, r9:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |stack:36|DWORD   <||@
  Comment 572 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 579 678 rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD  <||@
  Comment 583 680 MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD  <||@
  Comment 588 682 rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 598 684 rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0  <||@
  Comment 602 686 rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD  <||@
  Comment 609 688 rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD  <||@
  Comment 613 690 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 617 692 r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 624 694 rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD  <||@
  Comment 627 696 rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 630 700 rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 633 702 r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 636 706 rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD  <||@
  Comment 639 708 rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD  <||@
  Comment 642 710 stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD  <||@
  Comment 647 712 stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD  <||@
  Comment 651 714 stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD  <||@
  Comment 656 716 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50]  <||@
  Comment 656 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 656 INLINE_INVOKE  <||@
  Comment 658 [stack:8, stack:20, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4               |5 
     locals:  |stack:88|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:40|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 666 718 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 671 720 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 674 722 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50]  <||@
  Comment 674 [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:40|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 674 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 681 724 r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD  <||@
  Comment 686 726 r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 694 728 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD  <||@
  Comment 703 block B21 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 703 730 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 703 732 rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD  <||@
  Comment 707 734 NOP  <||@
  Comment 708 736 NOP  <||@
  Comment 709 738 NOP  <||@
  Comment 710 740 NOP  <||@
  Comment 711 742 NOP  <||@
  Comment 712 744 NOP  <||@
  Comment 713 746 NOP  <||@
  Comment 714 748 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 718 750 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD  <||@
  Comment 723 752 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD  <||@
  Comment 731 block B22 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 731 754 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 731 756 NOP  <||@
  Comment 732 758 NOP  <||@
  Comment 733 760 NOP  <||@
  Comment 734 762 NOP  <||@
  Comment 735 764 r10|DWORD = INC value: stack:36|DWORD size: DWORD  <||@
  Comment 743 766 rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 746 774 JUMP ~outgoingValues: [] destination: B22 -> B13  <||@
  Comment 746 block B13 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 746 428 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 746 420 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 751 422 r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 756 424 rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD  <||@
  Comment 761 430 stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 766 432 NOP  <||@
  Comment 767 434 NOP  <||@
  Comment 768 436 NOP  <||@
  Comment 769 438 NOP  <||@
  Comment 770 440 NOP  <||@
  Comment 771 442 rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD  <||@
  Comment 774 444 CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3]  <||@
  Comment 774 [rcx:0, rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |r10|DWORD   <||@
  Comment 774 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 793 block B5 null  <||@
  Comment 793 112 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 793 114 NOP  <||@
  Comment 794 116 NOP  <||@
  Comment 795 118 NOP  <||@
  Comment 796 120 NOP  <||@
  Comment 797 122 NOP  <||@
  Comment 798 124 NOP  <||@
  Comment 799 126 NOP  <||@
  Comment 800 128 NOP  <||@
  Comment 801 130 NOP  <||@
  Comment 802 132 NOP  <||@
  Comment 803 134 NOP  <||@
  Comment 804 136 NOP  <||@
  Comment 805 138 NOP  <||@
  Comment 806 140 NOP  <||@
  Comment 807 142 NOP  <||@
  Comment 808 144 NOP  <||@
  Comment 809 146 NOP  <||@
  Comment 810 148 NOP  <||@
  Comment 811 150 NOP  <||@
  Comment 812 152 NOP  <||@
  Comment 813 154 NOP  <||@
  Comment 814 156 NOP  <||@
  Comment 815 158 NOP  <||@
  Comment 816 160 NOP  <||@
  Comment 817 162 rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD  <||@
  Comment 820 164 rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 820 [rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2               |3                  |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |-   <||@
  Comment 820 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 827 166 r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0]  <||@
  Comment 827 [rcx:0, rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2               |3                  |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |-   <||@
  Comment 827 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 835 168 rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 845 170 r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0  <||@
  Comment 849 172 rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD  <||@
  Comment 856 174 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 860 176 rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 864 178 rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD  <||@
  Comment 867 180 r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 870 184 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 874 186 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 879 188 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32]  <||@
  Comment 879 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 879 INLINE_INVOKE  <||@
  Comment 881 [stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0]   <||@
  Comment 889 190 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD  <||@
  Comment 897 block B7 null  <||@
  Comment 897 214 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 897 216 NOP  <||@
  Comment 898 218 NOP  <||@
  Comment 899 220 NOP  <||@
  Comment 900 222 JUMP ~outgoingValues: [] destination: B7 -> B25  <||@
  Comment 900 block B25 null  <||@
  Comment 900 796 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 900 798 NOP  <||@
  Comment 901 800 NOP  <||@
  Comment 902 802 NOP  <||@
  Comment 903 804 NOP  <||@
  Comment 904 806 NOP  <||@
  Comment 905 808 NOP  <||@
  Comment 906 810 NOP  <||@
  Comment 907 812 NOP  <||@
  Comment 908 814 rax|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 913 816 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 922 POLL_RETURN_FAR  <||@
  Comment 936 block B32 null  <||@
  Comment 936 930 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 936 932 NOP  <||@
  Comment 937 934 NOP  <||@
  Comment 938 936 NOP  <||@
  Comment 939 938 JUMP ~outgoingValues: [] destination: B32 -> B33  <||@
  Comment 939 block B33 null  <||@
  Comment 939 940 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 939 942 NOP  <||@
  Comment 940 944 NOP  <||@
  Comment 941 946 NOP  <||@
  Comment 942 948 NOP  <||@
  Comment 943 950 NOP  <||@
  Comment 944 952 NOP  <||@
  Comment 945 954 NOP  <||@
  Comment 946 956 NOP  <||@
  Comment 947 958 rax|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 952 960 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 961 POLL_RETURN_FAR  <||@
  Comment 975 block B16 null  <||@
  Comment 975 480 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 975 482 NOP  <||@
  Comment 976 484 NOP  <||@
  Comment 977 486 NOP  <||@
  Comment 978 488 NOP  <||@
  Comment 979 490 NOP  <||@
  Comment 980 492 NOP  <||@
  Comment 981 494 NOP  <||@
  Comment 982 496 NOP  <||@
  Comment 983 498 NOP  <||@
  Comment 984 500 NOP  <||@
  Comment 985 502 NOP  <||@
  Comment 986 504 NOP  <||@
  Comment 987 506 NOP  <||@
  Comment 988 508 NOP  <||@
  Comment 989 510 NOP  <||@
  Comment 990 512 NOP  <||@
  Comment 991 514 NOP  <||@
  Comment 992 516 NOP  <||@
  Comment 993 518 NOP  <||@
  Comment 994 520 NOP  <||@
  Comment 995 522 NOP  <||@
  Comment 996 524 NOP  <||@
  Comment 997 526 NOP  <||@
  Comment 998 528 NOP  <||@
  Comment 999 530 rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD  <||@
  Comment 1002 532 rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3]  <||@
  Comment 1002 [rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1                  |2               |3                  |4              
     locals:  |rsi|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1002 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1009 534 rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3]  <||@
  Comment 1009 [rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1                  |2               |3                  |4              
     locals:  |rsi|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1009 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1016 536 r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1026 538 rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1030 540 rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD  <||@
  Comment 1037 542 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1041 544 rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 1045 546 rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1048 548 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 1053 550 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1057 552 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1062 554 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32]  <||@
  Comment 1062 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1062 INLINE_INVOKE  <||@
  Comment 1064 [stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1072 556 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD  <||@
  Comment 1080 block B24 null  <||@
  Comment 1080 786 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1080 788 NOP  <||@
  Comment 1081 790 NOP  <||@
  Comment 1082 792 NOP  <||@
  Comment 1083 794 JUMP ~outgoingValues: [] destination: B24 -> B25  <||@
  Comment 1088 block B23 null  <||@
  Comment 1088 776 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1088 778 NOP  <||@
  Comment 1089 780 NOP  <||@
  Comment 1090 782 NOP  <||@
  Comment 1091 784 JUMP ~outgoingValues: [] destination: B23 -> B33  <||@
  Comment 1096 block B1 null  <||@
  Comment 1096 40 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1096 42 NOP  <||@
  Comment 1097 44 NOP  <||@
  Comment 1098 46 NOP  <||@
  Comment 1099 48 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1106 50 r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5]  <||@
  Comment 1112 60 JUMP ~outgoingValues: [] destination: B1 -> B37  <||@
  Comment 1112 block B37 null  <||@
  Comment 1112 1032 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1112 52 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1117 56 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 1122 58 rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD  <||@
  Comment 1127 1034 NOP  <||@
  Comment 1128 1036 NOP  <||@
  Comment 1129 1038 NOP  <||@
  Comment 1130 1040 NOP  <||@
  Comment 1131 1042 NOP  <||@
  Comment 1132 1044 NOP  <||@
  Comment 1133 1046 NOP  <||@
  Comment 1134 1048 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 1141 1050 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 1148 1052 DEOPT info [bci:0]  <||@
  Comment 1148 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1153 [rdx:0, rsi:0, r8:0]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 1161 block B26 null  <||@
  Comment 1161 818 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1161 820 r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD  <||@
  Comment 1166 822 rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD  <||@
  Comment 1170 824 NOP  <||@
  Comment 1171 826 NOP  <||@
  Comment 1172 828 NOP  <||@
  Comment 1173 830 NOP  <||@
  Comment 1174 832 NOP  <||@
  Comment 1175 834 NOP  <||@
  Comment 1176 836 NOP  <||@
  Comment 1177 838 MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD  <||@
  Comment 1188 840 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 1199 842 DEOPT info [bci:31, 50]  <||@
  Comment 1199 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1204 [r13:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1                  |2  |3  |4          |5 
     locals:  |r13|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |rbp|DWORD  |- 
     stack:   |rax|DWORD     |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1212 block B17 null  <||@
  Comment 1212 558 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1212 560 NOP  <||@
  Comment 1213 562 NOP  <||@
  Comment 1214 564 NOP  <||@
  Comment 1215 566 NOP  <||@
  Comment 1216 568 NOP  <||@
  Comment 1217 570 NOP  <||@
  Comment 1218 572 NOP  <||@
  Comment 1219 574 MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD  <||@
  Comment 1230 576 MOV x: [r15|QWORD + 1168] y: 660 size: QWORD  <||@
  Comment 1241 578 DEOPT info [bci:35]  <||@
  Comment 1241 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1246 [stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD 
     stack:   |int[0|0x0]         |                   |                |                   |                 <||@
  Comment 1254 block B27 null  <||@
  Comment 1254 844 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1254 846 NOP  <||@
  Comment 1255 848 NOP  <||@
  Comment 1256 850 NOP  <||@
  Comment 1257 852 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1264 854 r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5]  <||@
  Comment 1270 858 JUMP ~outgoingValues: [] destination: B27 -> B31  <||@
  Comment 1270 block B31 null  <||@
  Comment 1270 908 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1270 904 r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 1275 910 NOP  <||@
  Comment 1276 912 NOP  <||@
  Comment 1277 914 NOP  <||@
  Comment 1278 916 NOP  <||@
  Comment 1279 918 NOP  <||@
  Comment 1280 920 NOP  <||@
  Comment 1281 922 NOP  <||@
  Comment 1282 924 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 1289 926 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 1296 928 DEOPT info [bci:3]  <||@
  Comment 1296 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1301 [stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4        
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |r8|DWORD   <||@
  Comment 1309 block B6 null  <||@
  Comment 1309 192 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1309 194 NOP  <||@
  Comment 1310 196 NOP  <||@
  Comment 1311 198 NOP  <||@
  Comment 1312 200 NOP  <||@
  Comment 1313 202 NOP  <||@
  Comment 1314 204 NOP  <||@
  Comment 1315 206 NOP  <||@
  Comment 1316 208 MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD  <||@
  Comment 1327 210 MOV x: [r15|QWORD + 1168] y: 660 size: QWORD  <||@
  Comment 1338 212 DEOPT info [bci:35]  <||@
  Comment 1338 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1343 [stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
     stack:   |int[0|0x0]         |                   |                |                   |             <||@
  Comment 1351 block B35 null  <||@
  Comment 1351 988 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1351 990 NOP  <||@
  Comment 1352 992 NOP  <||@
  Comment 1353 994 NOP  <||@
  Comment 1354 996 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1361 998 r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5]  <||@
  Comment 1367 1008 JUMP ~outgoingValues: [] destination: B35 -> B37  <||@
  Comment 1372 block B29 null  <||@
  Comment 1372 876 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1372 878 NOP  <||@
  Comment 1373 880 NOP  <||@
  Comment 1374 882 NOP  <||@
  Comment 1375 884 r11|QWORD = MOVE input: long[20|0x14]  <||@
  Comment 1382 886 r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed]  <||@
  Comment 1388 890 JUMP ~outgoingValues: [] destination: B29 -> B31  <||@
  Comment 1390 block B34 null  <||@
  Comment 1390 962 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1390 964 r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD  <||@
  Comment 1395 966 rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD  <||@
  Comment 1399 968 NOP  <||@
  Comment 1400 970 NOP  <||@
  Comment 1401 972 NOP  <||@
  Comment 1402 974 NOP  <||@
  Comment 1403 976 NOP  <||@
  Comment 1404 978 NOP  <||@
  Comment 1405 980 NOP  <||@
  Comment 1406 982 MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD  <||@
  Comment 1417 984 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 1428 986 DEOPT info [bci:31, 50]  <||@
  Comment 1428 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1433 [r9:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0            |1                  |2  |3  |4          |5 
     locals:  |r9|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |rdi|DWORD  |- 
     stack:   |rax|DWORD    |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0]   <||@
  Comment 1441 block B30 null  <||@
  Comment 1441 892 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1441 894 NOP  <||@
  Comment 1442 896 NOP  <||@
  Comment 1443 898 NOP  <||@
  Comment 1444 900 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1451 902 r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5]  <||@
  Comment 1457 906 JUMP ~outgoingValues: [] destination: B30 -> B31  <||@
  Comment 1462 block B28 null  <||@
  Comment 1462 860 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1462 862 NOP  <||@
  Comment 1463 864 NOP  <||@
  Comment 1464 866 NOP  <||@
  Comment 1465 868 r11|QWORD = MOVE input: long[1300|0x514]  <||@
  Comment 1472 870 r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd]  <||@
  Comment 1478 874 JUMP ~outgoingValues: [] destination: B28 -> B31  <||@
  Comment 1483 block B3 null  <||@
  Comment 1483 74 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1483 76 NOP  <||@
  Comment 1484 78 NOP  <||@
  Comment 1485 80 NOP  <||@
  Comment 1486 82 r11|QWORD = MOVE input: long[20|0x14]  <||@
  Comment 1493 84 r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed]  <||@
  Comment 1499 94 JUMP ~outgoingValues: [] destination: B3 -> B37  <||@
  Comment 1504 block B36 null  <||@
  Comment 1504 1010 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1504 1012 NOP  <||@
  Comment 1505 1014 NOP  <||@
  Comment 1506 1016 NOP  <||@
  Comment 1507 1018 r11|QWORD = MOVE input: long[1300|0x514]  <||@
  Comment 1514 1020 r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd]  <||@
  Comment 1520 1030 JUMP ~outgoingValues: [] destination: B36 -> B37  <||@
  Comment 1530 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 1555 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 1575 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 1603 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1608 [rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 1638 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1643 [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 1673 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1678 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 1708 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1713 [rax:0, rdx:0, rbx:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4 
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 1743 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1748 [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:72|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:32|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0]   <||@
  Comment 1778 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1783 [rcx:0, rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |r10|DWORD   <||@
  Comment 1813 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1818 [rcx:0, rdx:0, rbx:0, r8:0, r9:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1848 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1853 [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:40|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1883 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1888 [rcx:0, rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |r10|DWORD   <||@
  Comment 1918 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1923 [rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2               |3                  |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |-   <||@
  Comment 1953 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1958 [rcx:0, rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2               |3                  |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |-   <||@
  Comment 1988 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1993 [rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1                  |2               |3                  |4              
     locals:  |rsi|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 2023 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2028 [rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1                  |2               |3                  |4              
     locals:  |rsi|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 2036 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 2036 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 2042 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 2042 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-4111[java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence)]"
  method "HotSpotCompilation-4111[java.util.regex.Pattern$Branch.match(Matcher, int, CharSequence)]"
  date 1724269691467
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7f789a8fcd40 448b560849bc0000002b787f00004d03d44d33e4493bc20f852383e8fe66669089842400c0feff4883ec589041817f20000000000f85bb050000909090909090909090909048896c245048897424304889542428894c24444c894424208b5e14833cdd0c000000000f84da03000090909090837e10010f8c4f0500009090909090448b14dd100000004585d20f84870200009090909042813cd508000000a88e35000f8538050000909090909090908b5a408b04dd0c000000468b1cd510000000413bc30f867d0400009090909090909090909090909090909090909090909090909090909090909090428b04d50c000000448b0cc50800000048c1e303428b7c9b1042894c9b1048bb0000002b787f00004e8d0c0b498b99f00100004c8b5b4048c1e003458bca49c1e103488bf04c8bea448bf1498bc0498bc34c894c2418897c24404489542414ffd00f1f840000000000488b5424288b72408b0cf50c000000448b542414468b04d510000000413bc80f86f60300008b7c24409090909090909048c1e60342897c861085c00f8514020000909090488bce41ba01000000e9450100006666660f1f840000000000666666900f1f8400000000006666669090909090443b56100f8d8e0300009090909090909048c1e303468b4c93104585c90f84e80100009090909042813ccd08000000a88e35000f85b90300009090909090908b590c428b04cd100000003bd80f86d0020000909090909090909090909090909090909090909090909090909090909090428b1ccd0c0000008b3cdd080000008b6c811044895c811048b90000002b787f0000488d3c39488b87f0010000488b784048c1e303458be949c1e503488bf3488bda418bcb4d8bd0488bd8488bc74c896c2408896c243844894c2414ffd00f1f840000000000488b5424288b72408b0cf50c000000448b4c2414468b04cd10000000413bc80f86ca0100008b6c24389090909090909048c1e60342896c861085c00f856501000090909090448b54243c41ffc2488bce4c8b442420448b5c2444488b742430448954243c90909090908b5e14443b14dd0c0000000f82acfeffffe9880200009090909090909090909090909090909090909090909090908b4e188b0ccd0c000000448b04cd0800000048bb0000002b787f00004e8d0403498b98f0010000488b434048c1e103488bf14c8bda8b4c24444c8b442420ffd00f1f84000000000085c00f849c0100009090909090909090909090b801000000488b6c24504883c458493ba7500400000f875e020000c39090909090909090909090b801000000488b6c24504883c458493ba7500400000f874b020000c39090909090909090909090909090909090909090909090908b56188b14d50c0000008b0cd50800000049b80000002b787f0000498d0c08488b99f0010000488b434048c1e203488bf2488b5424288b4c24444c8b442420ffd00f1f84000000000085c00f8484000000909090e944ffffff909090e963ffffff90909049c7c30000000041bae59ffeff4c8b442420488b542428488b74243090909090909090458997840400004d899f90040000e8b9dfe8fe0f1f8400000000004c8b6c24088b6c24389090909090909041c78784040000e5a7feff49c7879004000000000000e886dfe8fe0f1f8400000000009090909090909041c78784040000ed0cfeff49c7879004000094020000e85cdfe8fe0f1f84000000000090909049c7c30000000041bae5c3feff448b44243c90909090909090458997840400004d899f90040000e825dfe8fe0f1f8400000000009090909090909041c78784040000ed15feff49c7879004000094020000e8fbdee8fe0f1f84000000000090909049c7c30000000041bae525ffffe9fcfeffff90909049c7c31400000041baed11feffeb884c8b4c24188b7c24409090909090909041c78784040000e509ffff49c7879004000000000000e8a1dee8fe0f1f84000000000090909049c7c30000000041bae5f9feffe940ffffff90909049c7c31405000041bacdd5feffe92bffffff90909049c7c31400000041baed19feffe978feffff90909049c7c31405000041bacd3dffffe963feffff48896c2450e8e1dee6fee936fafffff4488d0d8efdffff49898f68040000e9a8ece8fef4488d0da1fdffff49898f68040000e994ece8fef441c78784040000f562ffff49c7879004000000000000e8f2dde8fe0f1f84000000000041c78784040000f53bffff49c7879004000000000000e8cfdde8fe0f1f84000000000041c78784040000f533ffff49c7879004000000000000e8acdde8fe0f1f84000000000041c78784040000f51affff49c7879004000000000000e889dde8fe0f1f84000000000041c78784040000f50effff49c7879004000000000000e866dde8fe0f1f84000000000041c78784040000f5d1feff49c7879004000000000000e843dde8fe0f1f84000000000041c78784040000f5b8feff49c7879004000000000000e820dde8fe0f1f84000000000041c78784040000f5acfeff49c7879004000000000000e8fddce8fe0f1f84000000000041c78784040000f5fefeff49c7879004000000000000e8dadce8fe0f1f84000000000041c78784040000f54effff49c7879004000000000000e8b7dce8fe0f1f84000000000041c78784040000f548ffff49c7879004000000000000e894dce8fe0f1f84000000000041c78784040000f5eefeff49c7879004000000000000e871dce8fe0f1f84000000000041c78784040000f5e8feff49c7879004000000000000e84edce8fe0f1f840000000000e8c77dfcfef4e8e1d9e8fef4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f78b20335c8, value=140155947602048]:0x7f7899785080}  <||@
  Comment 32 [stack overflow check]  <||@
  Comment 32 VERIFIED_ENTRY  <||@
  Comment 44 FRAME_COMPLETE  <||@
  Comment 44 ENTRY_BARRIER_PATCH  <||@
  Comment 58 block B0 null  <||@
  Comment 58 0 [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 58 2 NOP  <||@
  Comment 59 4 NOP  <||@
  Comment 60 6 NOP  <||@
  Comment 61 8 NOP  <||@
  Comment 62 10 NOP  <||@
  Comment 63 12 NOP  <||@
  Comment 64 14 NOP  <||@
  Comment 65 16 NOP  <||@
  Comment 66 18 NOP  <||@
  Comment 67 20 NOP  <||@
  Comment 68 22 NOP  <||@
  Comment 69 24 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 74 26 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@21502579 slotKind: QWORD  <||@
  Comment 74 28 stack:48|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 79 30 stack:56|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 84 32 stack:28|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 88 34 stack:64|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 93 36 rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD  <||@
  Comment 96 38 CMPCONSTBRANCH x: [rbx|DWORD[_] * 8 + 12] trueDestinationProbability: 0.0 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 y: 0 size: DWORD inlinedY: null state [bci:0]  <||@
  Comment 96 [rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 96 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 110 block B2 null  <||@
  Comment 110 62 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 110 64 NOP  <||@
  Comment 111 66 NOP  <||@
  Comment 112 68 NOP  <||@
  Comment 113 70 NOP  <||@
  Comment 114 72 CMPCONSTBRANCH x: [rsi|QWORD[.] + 16] trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 y: 1 size: DWORD inlinedY: null  <||@
  Comment 124 block B4 null  <||@
  Comment 124 96 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 124 98 NOP  <||@
  Comment 125 100 NOP  <||@
  Comment 126 102 NOP  <||@
  Comment 127 104 NOP  <||@
  Comment 128 106 NOP  <||@
  Comment 129 108 r10|DWORD[_] = MOV input: [rbx|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 137 110 TESTBRANCH (x: r10|DWORD[_], y: r10|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B4 -> B5 falseDestination: B4 -> B8 size: DWORD  <||@
  Comment 146 block B8 null  <||@
  Comment 146 224 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 146 226 NOP  <||@
  Comment 147 228 NOP  <||@
  Comment 148 230 NOP  <||@
  Comment 149 232 NOP  <||@
  Comment 150 234 CMPCONSTBRANCH x: [r10|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B8 -> B9 falseDestination: B8 -> B36 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 150 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 168 block B9 null  <||@
  Comment 168 236 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 168 238 NOP  <||@
  Comment 169 240 NOP  <||@
  Comment 170 242 NOP  <||@
  Comment 171 244 NOP  <||@
  Comment 172 246 NOP  <||@
  Comment 173 248 NOP  <||@
  Comment 174 250 NOP  <||@
  Comment 175 252 rbx|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD state [bci:0]  <||@
  Comment 175 [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 175 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 178 254 rax|DWORD = MOV input: [rbx|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 178 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 178 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 185 256 r11|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 193 258 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B9 -> B10 falseDestination: B9 -> B35 size: DWORD  <||@
  Comment 202 block B10 null  <||@
  Comment 202 260 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 202 262 NOP  <||@
  Comment 203 264 NOP  <||@
  Comment 204 266 NOP  <||@
  Comment 205 268 NOP  <||@
  Comment 206 270 NOP  <||@
  Comment 207 272 NOP  <||@
  Comment 208 274 NOP  <||@
  Comment 209 276 NOP  <||@
  Comment 210 278 NOP  <||@
  Comment 211 280 NOP  <||@
  Comment 212 282 NOP  <||@
  Comment 213 284 NOP  <||@
  Comment 214 286 NOP  <||@
  Comment 215 288 NOP  <||@
  Comment 216 290 NOP  <||@
  Comment 217 292 NOP  <||@
  Comment 218 294 NOP  <||@
  Comment 219 296 NOP  <||@
  Comment 220 298 NOP  <||@
  Comment 221 300 NOP  <||@
  Comment 222 302 NOP  <||@
  Comment 223 304 NOP  <||@
  Comment 224 306 NOP  <||@
  Comment 225 308 NOP  <||@
  Comment 226 310 NOP  <||@
  Comment 227 312 NOP  <||@
  Comment 228 314 NOP  <||@
  Comment 229 316 NOP  <||@
  Comment 230 318 NOP  <||@
  Comment 231 320 NOP  <||@
  Comment 232 322 NOP  <||@
  Comment 233 324 NOP  <||@
  Comment 234 326 rax|DWORD[_] = MOV input: [r10|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 242 328 r9|DWORD = MOV input: [rax|DWORD[_] * 8 + 8] size: DWORD state [bci:0]  <||@
  Comment 242 [rax:0, rdx:0, rbx:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4 
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 242 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 250 330 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 254 332 rdi|DWORD = MOV input: [rbx|QWORD[.] + r11|DWORD * 4 + 16] size: DWORD  <||@
  Comment 259 334 MOV (x: [rbx|QWORD[.] + r11|DWORD * 4 + 16], y: rcx|DWORD) size: DWORD  <||@
  Comment 264 336 rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 274 338 r9|QWORD = UNCOMPRESSPOINTER (input: r9|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0  <||@
  Comment 278 340 rbx|QWORD = MOV input: [r9|QWORD + 496] size: QWORD  <||@
  Comment 285 342 r11|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 289 344 rax|QWORD[.] = UNCOMPRESSPOINTER (input: rax|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 293 346 r9|QWORD[.] = UNCOMPRESSPOINTER (input: r10|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 300 348 rsi|QWORD[.] = MOVE input: rax|QWORD[.] moveKind: QWORD  <||@
  Comment 303 350 r13|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 306 354 r14|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 309 358 rax|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 312 362 rax|QWORD = MOVE input: r11|QWORD moveKind: QWORD  <||@
  Comment 315 364 stack:72|QWORD[.] = MOVE input: r9|QWORD[.] moveKind: QWORD  <||@
  Comment 320 366 stack:32|DWORD = MOVE input: rdi|DWORD moveKind: DWORD  <||@
  Comment 324 368 stack:76|DWORD[_] = MOVE input: r10|DWORD[_] moveKind: DWORD  <||@
  Comment 329 370 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50]  <||@
  Comment 329 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 329 INLINE_INVOKE  <||@
  Comment 331 [stack:20, stack:24, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4               |5 
     locals:  |stack:72|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:32|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0]   <||@
  Comment 339 372 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 344 374 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 347 376 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50]  <||@
  Comment 347 [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:72|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:32|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0]   <||@
  Comment 347 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 354 378 r10|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD  <||@
  Comment 359 380 r8|DWORD = MOV input: [r10|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 367 382 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B10 -> B11 falseDestination: B10 -> B34 size: DWORD  <||@
  Comment 376 block B11 null  <||@
  Comment 376 384 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 376 386 rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD  <||@
  Comment 380 388 NOP  <||@
  Comment 381 390 NOP  <||@
  Comment 382 392 NOP  <||@
  Comment 383 394 NOP  <||@
  Comment 384 396 NOP  <||@
  Comment 385 398 NOP  <||@
  Comment 386 400 NOP  <||@
  Comment 387 402 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 391 404 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rdi|DWORD) size: DWORD  <||@
  Comment 396 406 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B11 -> B12 falseDestination: B11 -> B32 size: DWORD  <||@
  Comment 404 block B12 null  <||@
  Comment 404 408 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 404 410 NOP  <||@
  Comment 405 412 NOP  <||@
  Comment 406 414 NOP  <||@
  Comment 407 416 rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 410 418 r10|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 416 426 JUMP ~outgoingValues: [] destination: B12 -> B13  <||@
  Comment 421 block B14 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 421 446 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 448 448 NOP  <||@
  Comment 449 450 NOP  <||@
  Comment 450 452 NOP  <||@
  Comment 451 454 NOP  <||@
  Comment 452 456 CMPBRANCH (x: r10|DWORD, y: [rsi|QWORD[.] + 16]) trueDestinationProbability: 1.0 condition: < trueDestination: B14 -> B15 falseDestination: B14 -> B29 size: DWORD  <||@
  Comment 462 block B15 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 462 458 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 462 460 NOP  <||@
  Comment 463 462 NOP  <||@
  Comment 464 464 NOP  <||@
  Comment 465 466 NOP  <||@
  Comment 466 468 NOP  <||@
  Comment 467 470 NOP  <||@
  Comment 468 472 NOP  <||@
  Comment 469 474 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 473 476 r9|DWORD[_] = MOV input: [rbx|QWORD[.] + r10|DWORD * 4 + 16] size: DWORD  <||@
  Comment 478 478 TESTBRANCH (x: r9|DWORD[_], y: r9|DWORD[_]) trueDestinationProbability: 0.3750160837844817 condition: = trueDestination: B15 -> B16 falseDestination: B15 -> B18 size: DWORD  <||@
  Comment 487 block B18 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 487 580 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 487 582 NOP  <||@
  Comment 488 584 NOP  <||@
  Comment 489 586 NOP  <||@
  Comment 490 588 NOP  <||@
  Comment 491 590 CMPCONSTBRANCH x: [r9|DWORD[_] * 8 + 8] trueDestinationProbability: 1.0 condition: = trueDestination: B18 -> B19 falseDestination: B18 -> B28 y: -559030611 size: DWORD inlinedY: meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}  <||@
  Comment 491 {meta{HotSpotType<Ljava/util/regex/Pattern$GroupHead;, resolved>;compressed}}  <||@
  Comment 509 block B19 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 509 592 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 509 594 NOP  <||@
  Comment 510 596 NOP  <||@
  Comment 511 598 NOP  <||@
  Comment 512 600 NOP  <||@
  Comment 513 602 NOP  <||@
  Comment 514 604 NOP  <||@
  Comment 515 606 rbx|DWORD = MOV input: [rcx|QWORD[.] + 12] size: DWORD state [bci:3]  <||@
  Comment 515 [rcx:0, rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |r10|DWORD   <||@
  Comment 515 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 518 608 rax|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 526 610 CMPBRANCH (x: rbx|DWORD, y: rax|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B19 -> B20 falseDestination: B19 -> B27 size: DWORD  <||@
  Comment 534 block B20 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 534 612 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 534 614 NOP  <||@
  Comment 535 616 NOP  <||@
  Comment 536 618 NOP  <||@
  Comment 537 620 NOP  <||@
  Comment 538 622 NOP  <||@
  Comment 539 624 NOP  <||@
  Comment 540 626 NOP  <||@
  Comment 541 628 NOP  <||@
  Comment 542 630 NOP  <||@
  Comment 543 632 NOP  <||@
  Comment 544 634 NOP  <||@
  Comment 545 636 NOP  <||@
  Comment 546 638 NOP  <||@
  Comment 547 640 NOP  <||@
  Comment 548 642 NOP  <||@
  Comment 549 644 NOP  <||@
  Comment 550 646 NOP  <||@
  Comment 551 648 NOP  <||@
  Comment 552 650 NOP  <||@
  Comment 553 652 NOP  <||@
  Comment 554 654 NOP  <||@
  Comment 555 656 NOP  <||@
  Comment 556 658 NOP  <||@
  Comment 557 660 NOP  <||@
  Comment 558 662 NOP  <||@
  Comment 559 664 NOP  <||@
  Comment 560 666 NOP  <||@
  Comment 561 668 NOP  <||@
  Comment 562 670 NOP  <||@
  Comment 563 672 NOP  <||@
  Comment 564 674 rbx|DWORD[_] = MOV input: [r9|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 572 676 rdi|DWORD = MOV input: [rbx|DWORD[_] * 8 + 8] size: DWORD state [bci:3]  <||@
  Comment 572 [rcx:0, rdx:0, rbx:0, r8:0, r9:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |stack:36|DWORD   <||@
  Comment 572 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 579 678 rbp|DWORD = MOV input: [rcx|QWORD[.] + rax|DWORD * 4 + 16] size: DWORD  <||@
  Comment 583 680 MOV (x: [rcx|QWORD[.] + rax|DWORD * 4 + 16], y: r11|DWORD) size: DWORD  <||@
  Comment 588 682 rcx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 598 684 rdi|QWORD = UNCOMPRESSPOINTER (input: rdi|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0  <||@
  Comment 602 686 rax|QWORD = MOV input: [rdi|QWORD + 496] size: QWORD  <||@
  Comment 609 688 rdi|QWORD = MOV input: [rax|QWORD + 64] size: QWORD  <||@
  Comment 613 690 rbx|QWORD[.] = UNCOMPRESSPOINTER (input: rbx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 617 692 r13|QWORD[.] = UNCOMPRESSPOINTER (input: r9|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 624 694 rsi|QWORD[.] = MOVE input: rbx|QWORD[.] moveKind: QWORD  <||@
  Comment 627 696 rbx|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 630 700 rcx|DWORD = MOVE input: r11|DWORD moveKind: DWORD  <||@
  Comment 633 702 r10|QWORD[.] = MOVE input: r8|QWORD[.] moveKind: QWORD  <||@
  Comment 636 706 rbx|QWORD = MOVE input: rax|QWORD moveKind: QWORD  <||@
  Comment 639 708 rax|QWORD = MOVE input: rdi|QWORD moveKind: QWORD  <||@
  Comment 642 710 stack:88|QWORD[.] = MOVE input: r13|QWORD[.] moveKind: QWORD  <||@
  Comment 647 712 stack:40|DWORD = MOVE input: rbp|DWORD moveKind: DWORD  <||@
  Comment 651 714 stack:76|DWORD[_] = MOVE input: r9|DWORD[_] moveKind: DWORD  <||@
  Comment 656 716 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:28, 50]  <||@
  Comment 656 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 656 INLINE_INVOKE  <||@
  Comment 658 [stack:8, stack:20, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 28, duringCall: true, rethrow: false]
              |0                  |1                  |2  |3  |4               |5 
     locals:  |stack:88|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |stack:40|DWORD  |- 
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 666 718 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 671 720 rsi|DWORD[_] = MOV input: [rdx|QWORD[.] + 64] size: DWORD  <||@
  Comment 674 722 rcx|DWORD = MOV input: [rsi|DWORD[_] * 8 + 12] size: DWORD state [bci:31, 50]  <||@
  Comment 674 [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:40|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 674 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 681 724 r9|DWORD[_] = MOVE input: stack:76|DWORD[_] moveKind: DWORD  <||@
  Comment 686 726 r8|DWORD = MOV input: [r9|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 694 728 CMPBRANCH (x: rcx|DWORD, y: r8|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B20 -> B21 falseDestination: B20 -> B26 size: DWORD  <||@
  Comment 703 block B21 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 703 730 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 703 732 rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD  <||@
  Comment 707 734 NOP  <||@
  Comment 708 736 NOP  <||@
  Comment 709 738 NOP  <||@
  Comment 710 740 NOP  <||@
  Comment 711 742 NOP  <||@
  Comment 712 744 NOP  <||@
  Comment 713 746 NOP  <||@
  Comment 714 748 rsi|QWORD[.] = UNCOMPRESSPOINTER (input: rsi|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 718 750 MOV (x: [rsi|QWORD[.] + r8|DWORD * 4 + 16], y: rbp|DWORD) size: DWORD  <||@
  Comment 723 752 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5999613527111213 condition: = trueDestination: B21 -> B22 falseDestination: B21 -> B23 size: DWORD  <||@
  Comment 731 block B22 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 731 754 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 731 756 NOP  <||@
  Comment 732 758 NOP  <||@
  Comment 733 760 NOP  <||@
  Comment 734 762 NOP  <||@
  Comment 735 764 r10|DWORD = INC value: stack:36|DWORD size: DWORD  <||@
  Comment 743 766 rcx|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 746 774 JUMP ~outgoingValues: [] destination: B22 -> B13  <||@
  Comment 746 block B13 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 746 428 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 746 420 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 751 422 r11|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 756 424 rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD  <||@
  Comment 761 430 stack:36|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 766 432 NOP  <||@
  Comment 767 434 NOP  <||@
  Comment 768 436 NOP  <||@
  Comment 769 438 NOP  <||@
  Comment 770 440 NOP  <||@
  Comment 771 442 rbx|DWORD[_] = MOV input: [rsi|QWORD[.] + 20] size: DWORD  <||@
  Comment 774 444 CMPBRANCH (x: r10|DWORD, y: [rbx|DWORD[_] * 8 + 12]) trueDestinationProbability: 1.0 condition: |<| trueDestination: B13 -> B14 falseDestination: B13 -> B30 size: DWORD state [bci:3]  <||@
  Comment 774 [rcx:0, rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |r10|DWORD   <||@
  Comment 774 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 793 block B5 null  <||@
  Comment 793 112 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 793 114 NOP  <||@
  Comment 794 116 NOP  <||@
  Comment 795 118 NOP  <||@
  Comment 796 120 NOP  <||@
  Comment 797 122 NOP  <||@
  Comment 798 124 NOP  <||@
  Comment 799 126 NOP  <||@
  Comment 800 128 NOP  <||@
  Comment 801 130 NOP  <||@
  Comment 802 132 NOP  <||@
  Comment 803 134 NOP  <||@
  Comment 804 136 NOP  <||@
  Comment 805 138 NOP  <||@
  Comment 806 140 NOP  <||@
  Comment 807 142 NOP  <||@
  Comment 808 144 NOP  <||@
  Comment 809 146 NOP  <||@
  Comment 810 148 NOP  <||@
  Comment 811 150 NOP  <||@
  Comment 812 152 NOP  <||@
  Comment 813 154 NOP  <||@
  Comment 814 156 NOP  <||@
  Comment 815 158 NOP  <||@
  Comment 816 160 NOP  <||@
  Comment 817 162 rcx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD  <||@
  Comment 820 164 rcx|DWORD[_] = MOV input: [rcx|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 820 [rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2               |3                  |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |-   <||@
  Comment 820 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 827 166 r8|DWORD = MOV input: [rcx|DWORD[_] * 8 + 8] size: DWORD state [bci:0]  <||@
  Comment 827 [rcx:0, rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2               |3                  |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |-   <||@
  Comment 827 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 835 168 rbx|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 845 170 r8|QWORD = UNCOMPRESSPOINTER (input: r8|DWORD, ~baseRegister: rbx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0  <||@
  Comment 849 172 rbx|QWORD = MOV input: [r8|QWORD + 496] size: QWORD  <||@
  Comment 856 174 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 860 176 rcx|QWORD[.] = UNCOMPRESSPOINTER (input: rcx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 864 178 rsi|QWORD[.] = MOVE input: rcx|QWORD[.] moveKind: QWORD  <||@
  Comment 867 180 r11|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 870 184 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 874 186 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 879 188 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32]  <||@
  Comment 879 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 879 INLINE_INVOKE  <||@
  Comment 881 [stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0]   <||@
  Comment 889 190 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD  <||@
  Comment 897 block B7 null  <||@
  Comment 897 214 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 897 216 NOP  <||@
  Comment 898 218 NOP  <||@
  Comment 899 220 NOP  <||@
  Comment 900 222 JUMP ~outgoingValues: [] destination: B7 -> B25  <||@
  Comment 900 block B25 null  <||@
  Comment 900 796 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 900 798 NOP  <||@
  Comment 901 800 NOP  <||@
  Comment 902 802 NOP  <||@
  Comment 903 804 NOP  <||@
  Comment 904 806 NOP  <||@
  Comment 905 808 NOP  <||@
  Comment 906 810 NOP  <||@
  Comment 907 812 NOP  <||@
  Comment 908 814 rax|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 913 816 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 922 POLL_RETURN_FAR  <||@
  Comment 936 block B32 null  <||@
  Comment 936 930 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 936 932 NOP  <||@
  Comment 937 934 NOP  <||@
  Comment 938 936 NOP  <||@
  Comment 939 938 JUMP ~outgoingValues: [] destination: B32 -> B33  <||@
  Comment 939 block B33 null  <||@
  Comment 939 940 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 939 942 NOP  <||@
  Comment 940 944 NOP  <||@
  Comment 941 946 NOP  <||@
  Comment 942 948 NOP  <||@
  Comment 943 950 NOP  <||@
  Comment 944 952 NOP  <||@
  Comment 945 954 NOP  <||@
  Comment 946 956 NOP  <||@
  Comment 947 958 rax|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 952 960 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@4817c460  <||@
  Comment 961 POLL_RETURN_FAR  <||@
  Comment 975 block B16 null  <||@
  Comment 975 480 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 975 482 NOP  <||@
  Comment 976 484 NOP  <||@
  Comment 977 486 NOP  <||@
  Comment 978 488 NOP  <||@
  Comment 979 490 NOP  <||@
  Comment 980 492 NOP  <||@
  Comment 981 494 NOP  <||@
  Comment 982 496 NOP  <||@
  Comment 983 498 NOP  <||@
  Comment 984 500 NOP  <||@
  Comment 985 502 NOP  <||@
  Comment 986 504 NOP  <||@
  Comment 987 506 NOP  <||@
  Comment 988 508 NOP  <||@
  Comment 989 510 NOP  <||@
  Comment 990 512 NOP  <||@
  Comment 991 514 NOP  <||@
  Comment 992 516 NOP  <||@
  Comment 993 518 NOP  <||@
  Comment 994 520 NOP  <||@
  Comment 995 522 NOP  <||@
  Comment 996 524 NOP  <||@
  Comment 997 526 NOP  <||@
  Comment 998 528 NOP  <||@
  Comment 999 530 rdx|DWORD[_] = MOV input: [rsi|QWORD[.] + 24] size: DWORD  <||@
  Comment 1002 532 rdx|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD state [bci:3]  <||@
  Comment 1002 [rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1                  |2               |3                  |4              
     locals:  |rsi|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1002 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1009 534 rcx|DWORD = MOV input: [rdx|DWORD[_] * 8 + 8] size: DWORD state [bci:3]  <||@
  Comment 1009 [rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1                  |2               |3                  |4              
     locals:  |rsi|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1009 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 1016 536 r8|QWORD = MOVE input: long[140154094223360|0x7f782b000000]  <||@
  Comment 1026 538 rcx|QWORD = UNCOMPRESSPOINTER (input: rcx|DWORD, ~baseRegister: r8|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 140154094223360 shift: 0  <||@
  Comment 1030 540 rbx|QWORD = MOV input: [rcx|QWORD + 496] size: QWORD  <||@
  Comment 1037 542 rax|QWORD = MOV input: [rbx|QWORD + 64] size: QWORD  <||@
  Comment 1041 544 rdx|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@3b8d8534 encoding: base: 0 shift: 3  <||@
  Comment 1045 546 rsi|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD  <||@
  Comment 1048 548 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 1053 550 rcx|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 1057 552 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1062 554 rax|DWORD = CALL_INDIRECT (targetAddress: rax|QWORD, metaspaceMethod: rbx|QWORD, parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|QWORD[.]]) temps: [] callTarget: HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)> state [bci:32]  <||@
  Comment 1062 {HotSpotMethod<Pattern$Node.match(Matcher, int, CharSequence)>}  <||@
  Comment 1062 INLINE_INVOKE  <||@
  Comment 1064 [stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 32, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1072 556 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.0 condition: = trueDestination: B16 -> B17 falseDestination: B16 -> B24 size: DWORD  <||@
  Comment 1080 block B24 null  <||@
  Comment 1080 786 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1080 788 NOP  <||@
  Comment 1081 790 NOP  <||@
  Comment 1082 792 NOP  <||@
  Comment 1083 794 JUMP ~outgoingValues: [] destination: B24 -> B25  <||@
  Comment 1088 block B23 null  <||@
  Comment 1088 776 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1088 778 NOP  <||@
  Comment 1089 780 NOP  <||@
  Comment 1090 782 NOP  <||@
  Comment 1091 784 JUMP ~outgoingValues: [] destination: B23 -> B33  <||@
  Comment 1096 block B1 null  <||@
  Comment 1096 40 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1096 42 NOP  <||@
  Comment 1097 44 NOP  <||@
  Comment 1098 46 NOP  <||@
  Comment 1099 48 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1106 50 r10|DWORD = MOVE input: int[-90139|0xfffffffffffe9fe5]  <||@
  Comment 1112 60 JUMP ~outgoingValues: [] destination: B1 -> B37  <||@
  Comment 1112 block B37 null  <||@
  Comment 1112 1032 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1112 52 r8|QWORD[.] = MOVE input: stack:64|QWORD[.] moveKind: QWORD  <||@
  Comment 1117 56 rdx|QWORD[.] = MOVE input: stack:56|QWORD[.] moveKind: QWORD  <||@
  Comment 1122 58 rsi|QWORD[.] = MOVE input: stack:48|QWORD[.] moveKind: QWORD  <||@
  Comment 1127 1034 NOP  <||@
  Comment 1128 1036 NOP  <||@
  Comment 1129 1038 NOP  <||@
  Comment 1130 1040 NOP  <||@
  Comment 1131 1042 NOP  <||@
  Comment 1132 1044 NOP  <||@
  Comment 1133 1046 NOP  <||@
  Comment 1134 1048 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 1141 1050 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 1148 1052 DEOPT info [bci:0]  <||@
  Comment 1148 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1153 [rdx:0, rsi:0, r8:0]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 1161 block B26 null  <||@
  Comment 1161 818 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1161 820 r13|QWORD[.] = MOVE input: stack:88|QWORD[.] moveKind: QWORD  <||@
  Comment 1166 822 rbp|DWORD = MOVE input: stack:40|DWORD moveKind: DWORD  <||@
  Comment 1170 824 NOP  <||@
  Comment 1171 826 NOP  <||@
  Comment 1172 828 NOP  <||@
  Comment 1173 830 NOP  <||@
  Comment 1174 832 NOP  <||@
  Comment 1175 834 NOP  <||@
  Comment 1176 836 NOP  <||@
  Comment 1177 838 MOV x: [r15|QWORD + 1156] y: -88091 size: DWORD  <||@
  Comment 1188 840 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 1199 842 DEOPT info [bci:31, 50]  <||@
  Comment 1199 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1204 [r13:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0             |1                  |2  |3  |4          |5 
     locals:  |r13|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |rbp|DWORD  |- 
     stack:   |rax|DWORD     |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1212 block B17 null  <||@
  Comment 1212 558 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1212 560 NOP  <||@
  Comment 1213 562 NOP  <||@
  Comment 1214 564 NOP  <||@
  Comment 1215 566 NOP  <||@
  Comment 1216 568 NOP  <||@
  Comment 1217 570 NOP  <||@
  Comment 1218 572 NOP  <||@
  Comment 1219 574 MOV x: [r15|QWORD + 1156] y: -127763 size: DWORD  <||@
  Comment 1230 576 MOV x: [r15|QWORD + 1168] y: 660 size: QWORD  <||@
  Comment 1241 578 DEOPT info [bci:35]  <||@
  Comment 1241 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1246 [stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD 
     stack:   |int[0|0x0]         |                   |                |                   |                 <||@
  Comment 1254 block B27 null  <||@
  Comment 1254 844 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1254 846 NOP  <||@
  Comment 1255 848 NOP  <||@
  Comment 1256 850 NOP  <||@
  Comment 1257 852 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1264 854 r10|DWORD = MOVE input: int[-80923|0xfffffffffffec3e5]  <||@
  Comment 1270 858 JUMP ~outgoingValues: [] destination: B27 -> B31  <||@
  Comment 1270 block B31 null  <||@
  Comment 1270 908 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 1270 904 r8|DWORD = MOVE input: stack:36|DWORD moveKind: DWORD  <||@
  Comment 1275 910 NOP  <||@
  Comment 1276 912 NOP  <||@
  Comment 1277 914 NOP  <||@
  Comment 1278 916 NOP  <||@
  Comment 1279 918 NOP  <||@
  Comment 1280 920 NOP  <||@
  Comment 1281 922 NOP  <||@
  Comment 1282 924 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 1289 926 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 1296 928 DEOPT info [bci:3]  <||@
  Comment 1296 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1301 [stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4        
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |r8|DWORD   <||@
  Comment 1309 block B6 null  <||@
  Comment 1309 192 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1309 194 NOP  <||@
  Comment 1310 196 NOP  <||@
  Comment 1311 198 NOP  <||@
  Comment 1312 200 NOP  <||@
  Comment 1313 202 NOP  <||@
  Comment 1314 204 NOP  <||@
  Comment 1315 206 NOP  <||@
  Comment 1316 208 MOV x: [r15|QWORD + 1156] y: -125459 size: DWORD  <||@
  Comment 1327 210 MOV x: [r15|QWORD + 1168] y: 660 size: QWORD  <||@
  Comment 1338 212 DEOPT info [bci:35]  <||@
  Comment 1338 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1343 [stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4912) [bci: 35, duringCall: false, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0] 
     stack:   |int[0|0x0]         |                   |                |                   |             <||@
  Comment 1351 block B35 null  <||@
  Comment 1351 988 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1351 990 NOP  <||@
  Comment 1352 992 NOP  <||@
  Comment 1353 994 NOP  <||@
  Comment 1354 996 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1361 998 r10|DWORD = MOVE input: int[-55835|0xffffffffffff25e5]  <||@
  Comment 1367 1008 JUMP ~outgoingValues: [] destination: B35 -> B37  <||@
  Comment 1372 block B29 null  <||@
  Comment 1372 876 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1372 878 NOP  <||@
  Comment 1373 880 NOP  <||@
  Comment 1374 882 NOP  <||@
  Comment 1375 884 r11|QWORD = MOVE input: long[20|0x14]  <||@
  Comment 1382 886 r10|DWORD = MOVE input: int[-126483|0xfffffffffffe11ed]  <||@
  Comment 1388 890 JUMP ~outgoingValues: [] destination: B29 -> B31  <||@
  Comment 1390 block B34 null  <||@
  Comment 1390 962 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1390 964 r9|QWORD[.] = MOVE input: stack:72|QWORD[.] moveKind: QWORD  <||@
  Comment 1395 966 rdi|DWORD = MOVE input: stack:32|DWORD moveKind: DWORD  <||@
  Comment 1399 968 NOP  <||@
  Comment 1400 970 NOP  <||@
  Comment 1401 972 NOP  <||@
  Comment 1402 974 NOP  <||@
  Comment 1403 976 NOP  <||@
  Comment 1404 978 NOP  <||@
  Comment 1405 980 NOP  <||@
  Comment 1406 982 MOV x: [r15|QWORD + 1156] y: -63003 size: DWORD  <||@
  Comment 1417 984 MOV x: [r15|QWORD + 1168] y: 0 size: QWORD  <||@
  Comment 1428 986 DEOPT info [bci:31, 50]  <||@
  Comment 1428 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1433 [r9:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0            |1                  |2  |3  |4          |5 
     locals:  |r9|QWORD[.]  |stack:56|QWORD[.]  |-  |-  |rdi|DWORD  |- 
     stack:   |rax|DWORD    |                   |   |   |           |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1                  |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0]   <||@
  Comment 1441 block B30 null  <||@
  Comment 1441 892 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1441 894 NOP  <||@
  Comment 1442 896 NOP  <||@
  Comment 1443 898 NOP  <||@
  Comment 1444 900 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 1451 902 r10|DWORD = MOVE input: int[-67099|0xfffffffffffef9e5]  <||@
  Comment 1457 906 JUMP ~outgoingValues: [] destination: B30 -> B31  <||@
  Comment 1462 block B28 null  <||@
  Comment 1462 860 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1462 862 NOP  <||@
  Comment 1463 864 NOP  <||@
  Comment 1464 866 NOP  <||@
  Comment 1465 868 r11|QWORD = MOVE input: long[1300|0x514]  <||@
  Comment 1472 870 r10|DWORD = MOVE input: int[-76339|0xfffffffffffed5cd]  <||@
  Comment 1478 874 JUMP ~outgoingValues: [] destination: B28 -> B31  <||@
  Comment 1483 block B3 null  <||@
  Comment 1483 74 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1483 76 NOP  <||@
  Comment 1484 78 NOP  <||@
  Comment 1485 80 NOP  <||@
  Comment 1486 82 r11|QWORD = MOVE input: long[20|0x14]  <||@
  Comment 1493 84 r10|DWORD = MOVE input: int[-124435|0xfffffffffffe19ed]  <||@
  Comment 1499 94 JUMP ~outgoingValues: [] destination: B3 -> B37  <||@
  Comment 1504 block B36 null  <||@
  Comment 1504 1010 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 1504 1012 NOP  <||@
  Comment 1505 1014 NOP  <||@
  Comment 1506 1016 NOP  <||@
  Comment 1507 1018 r11|QWORD = MOVE input: long[1300|0x514]  <||@
  Comment 1514 1020 r10|DWORD = MOVE input: int[-49715|0xffffffffffff3dcd]  <||@
  Comment 1520 1030 JUMP ~outgoingValues: [] destination: B36 -> B37  <||@
  Comment 1530 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f78b2033598, value=140155947495968]:0x7f789976b220}  <||@
  Comment 1555 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 1575 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f78b20335a0, value=140155947630592]:0x7f789978c000}  <||@
  Comment 1603 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1608 [rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 1638 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1643 [rdx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 1673 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1678 [rdx:0, rbx:0, rsi:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 1708 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1713 [rax:0, rdx:0, rbx:0, r8:0, r10:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4 
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |rcx|DWORD  |r8|QWORD[.]  |-   <||@
  Comment 1743 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1748 [rdx:0, rsi:0, stack:20, stack:24, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:72|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:32|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4          
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |int[0|0x0]   <||@
  Comment 1778 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1783 [rcx:0, rdx:0, rsi:0, r8:0, r9:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |r10|DWORD   <||@
  Comment 1813 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1818 [rcx:0, rdx:0, rbx:0, r8:0, r9:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0                  |1             |2          |3            |4              
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1848 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1853 [rdx:0, rsi:0, stack:8, stack:20, stack:32, stack:40, stack:48]at java.util.regex.Pattern$GroupHead.match(Pattern.java:4969) [bci: 31, duringCall: false, rethrow: false]
              |0                  |1             |2  |3  |4               |5 
     locals:  |stack:88|QWORD[.]  |rdx|QWORD[.]  |-  |-  |stack:40|DWORD  |- 
     stack:   |rax|DWORD          |              |   |   |                |  
  at java.util.regex.Pattern$Branch.match(Pattern.java:4914) [bci: 50, duringCall: true, rethrow: false]
              |0                  |1             |2               |3                  |4              
     locals:  |stack:48|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 1883 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1888 [rcx:0, rdx:0, rbx:0, rsi:0, r8:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1             |2          |3            |4         
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |r11|DWORD  |r8|QWORD[.]  |r10|DWORD   <||@
  Comment 1918 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1923 [rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2               |3                  |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |-   <||@
  Comment 1953 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1958 [rcx:0, rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 0, duringCall: false, rethrow: false]
              |0             |1             |2               |3                  |4 
     locals:  |rsi|QWORD[.]  |rdx|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |-   <||@
  Comment 1988 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 1993 [rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1                  |2               |3                  |4              
     locals:  |rsi|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 2023 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f78b20335a8, value=140155947626874]:0x7f789978b17a}  <||@
  Comment 2028 [rdx:0, rsi:0, stack:32, stack:40, stack:48]at java.util.regex.Pattern$Branch.match(Pattern.java:4910) [bci: 3, duringCall: false, rethrow: false]
              |0             |1                  |2               |3                  |4              
     locals:  |rsi|QWORD[.]  |stack:56|QWORD[.]  |stack:28|DWORD  |stack:64|QWORD[.]  |stack:36|DWORD   <||@
  Comment 2036 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f78998c5300:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 2036 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 2042 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f78b20335b8, value=140155947626272]:0x7f789978af20}  <||@
  Comment 2042 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
