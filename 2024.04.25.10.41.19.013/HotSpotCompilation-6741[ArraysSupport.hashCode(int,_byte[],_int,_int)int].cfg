begin_compilation
  name " HotSpotCompilation-6741[jdk.internal.util.ArraysSupport.hashCode(int, byte[], int, int)]"
  method "HotSpotCompilation-6741[jdk.internal.util.ArraysSupport.hashCode(int, byte[], int, int)]"
  date 1714038122811
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a503 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a503  <|@  <|@
f <@~|@floating>@ <|@
tid a66 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache
stableDimension: 0
stamp: a!# java.lang.Class
stampKind: a java.lang.Object
value: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache]
=== Inputs ===
=== Succesors ===
=== Usages ===
v561 v562 v563 v564 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v564 <|@
d <@d|@=== Debug Properties ===
displacement: 120
stamp: void*
stride: S1
=== Inputs ===
base: a66 
index: - 
=== Succesors ===
=== Usages ===
a503 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a66 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a503 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# long[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: BuboCache.CyclesBuffer
memoryOrder: PLAIN
stamp: n# long[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v564 
lastLocationAccess: - 
=== Succesors ===
next: a504 
=== Usages ===
v560 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v564 lastLocationAccess: - #next: a504  <|@  <|@
f <@~|@floating>@ <|@
tid v563 <|@
d <@d|@=== Debug Properties ===
displacement: 116
stamp: void*
stride: S1
=== Inputs ===
base: a66 
index: - 
=== Succesors ===
=== Usages ===
a504 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a66 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a504 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# long[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: BuboCache.ActivationCountBuffer
memoryOrder: PLAIN
stamp: n# long[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v563 
lastLocationAccess: - 
=== Succesors ===
next: a505 
=== Usages ===
v559 
=== Predecessor ===
a503 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v563 lastLocationAccess: - #next: a505  <|@  <|@
f <@~|@floating>@ <|@
tid v561 <|@
d <@d|@=== Debug Properties ===
displacement: 124
stamp: void*
stride: S1
=== Inputs ===
base: a66 
index: - 
=== Succesors ===
=== Usages ===
a505 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a66 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a505 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# long[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: BuboCache.Buffer
memoryOrder: PLAIN
stamp: n# long[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v561 
lastLocationAccess: - 
=== Succesors ===
next: a506 
=== Usages ===
v557 
=== Predecessor ===
a504 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v561 lastLocationAccess: - #next: a506  <|@  <|@
f <@~|@floating>@ <|@
tid v562 <|@
d <@d|@=== Debug Properties ===
displacement: 112
stamp: void*
stride: S1
=== Inputs ===
base: a66 
index: - 
=== Succesors ===
=== Usages ===
a506 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a66 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a506 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# long[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: BuboCache.TimeBuffer
memoryOrder: PLAIN
stamp: n# long[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v562 
lastLocationAccess: - 
=== Succesors ===
next: j499 
=== Usages ===
v558 
=== Predecessor ===
a505 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v562 lastLocationAccess: - #next: j499  <|@  <|@
f <@~|@floating>@ <|@
tid v560 <|@
d <@d|@=== Debug Properties ===
displacement: 53944
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a503 
=== Succesors ===
=== Usages ===
v45 j499 v501 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a503  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j499 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: [null]
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: true
location: Array: long
memoryOrder: [null]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v560 
lastLocationAccess: - 
=== Succesors ===
next: v501 
=== Usages ===
j493 j497 
=== Predecessor ===
a506 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v560 lastLocationAccess: - #next: v501  <|@  <|@
f <@~|@floating>@ <|@
tid i492 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 13
stableDimension: 0
stamp: i32
stampKind: i32
value: int[13|0xd]
=== Inputs ===
=== Succesors ===
=== Usages ===
j493 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j493 <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
x: j499 
y: i492 
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j499 y: i492  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v501 <|@
d <@d|@=== Debug Properties ===
barrierType: ARRAY
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: long
location: Array: long
memoryOrder: PLAIN
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v560 
lastLocationAccess: - 
value: j493 
stateAfter: - 
=== Succesors ===
next: v502 
=== Usages ===
=== Predecessor ===
j499 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v560 lastLocationAccess: - value: j493 stateAfter: - #next: v502  <|@  <|@
f <@~|@floating>@ <|@
tid v559 <|@
d <@d|@=== Debug Properties ===
displacement: 53944
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a504 
=== Succesors ===
=== Usages ===
v45 v502 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a504  <|@  <|@
f <@~|@floating>@ <|@
tid i496 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 1
stableDimension: 0
stamp: i32
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
j497 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j497 <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
x: j499 
y: i496 
=== Succesors ===
=== Usages ===
v502 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j499 y: i496  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v502 <|@
d <@d|@=== Debug Properties ===
barrierType: ARRAY
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: long
location: Array: long
memoryOrder: PLAIN
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v559 
lastLocationAccess: - 
value: j497 
stateAfter: - 
=== Succesors ===
next: v45 
=== Usages ===
=== Predecessor ===
v501 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v559 lastLocationAccess: - value: j497 stateAfter: - #next: v45  <|@  <|@
f <@~|@floating>@ <|@
tid v557 <|@
d <@d|@=== Debug Properties ===
displacement: 53944
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a505 
=== Succesors ===
=== Usages ===
v45 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a505  <|@  <|@
f <@~|@floating>@ <|@
tid v558 <|@
d <@d|@=== Debug Properties ===
displacement: 53944
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a506 
=== Succesors ===
=== Usages ===
v45 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a506  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v45 <|@
d <@d|@=== Debug Properties ===
stamp: BuboVoid
=== Inputs ===
values: v557 v558 v559 v560 
=== Succesors ===
next: v50 
=== Usages ===
=== Predecessor ===
v502 >@ <|@
instruction <@ReachabilityFence|@jdk.graal.compiler.nodes.java.ReachabilityFenceNode>@ values: v557 v558 v559 v560 #next: v50  <|@  <|@
f <@~|@floating>@ <|@
tid i1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i63 i55 i56 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 i53 v47 v566 v89 i198 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i4 <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i6 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 2]
stamp: i32
=== Inputs ===
x: i3 
y: i4 
=== Succesors ===
=== Usages ===
v131 i196 v47 i120 i413 v171 v195 v411 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i4  <|@  <|@
f <@~|@floating>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i6 
=== Succesors ===
=== Usages ===
v50 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i3 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v50 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
profileData: PROFILED designatedSuccessorProbability: 0.9745023603034433
stamp: void
=== Inputs ===
condition: v47 
=== Succesors ===
trueSuccessor: v49 
falseSuccessor: v48 
=== Usages ===
=== Predecessor ===
v45 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v47 #trueSuccessor: v49 #falseSuccessor: v48  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i507 
=== Usages ===
=== Predecessor ===
v50 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i507  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# byte[]
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v584 v583 v565 v566 v567 v568 v569 v570 v571 v572 v573 v574 v575 v576 v577 v578 v579 v580 v581 v582 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: iload_2
code: ResolvedJavaMethodBytecode<ArraysSupport.hashCode(int, byte[], int, int)>
localsSize: 6
locksSize: 0
sourceFile: ArraysSupport.java
sourceLine: 223
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i1 a2 i3 i4 
=== Succesors ===
=== Usages ===
v462 i507 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i1 a2 i3 i4  <|@  <|@
f <@~|@floating>@ <|@
tid v565 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i507 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i507 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-21515|0xffffffffffffabf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v565 
lastLocationAccess: - 
=== Succesors ===
next: v481 
=== Usages ===
v89 v128 j119 
=== Predecessor ===
v49 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v565 lastLocationAccess: - #next: v481  <|@  <|@
f <@~|@floating>@ <|@
tid i24 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 25]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i25 i53 i176 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i53 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 25]
stamp: i32
=== Inputs ===
x: i3 
y: i24 
=== Succesors ===
=== Usages ===
i65 i120 j122 v128 v131 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i24  <|@  <|@
f <@~|@floating>@ <|@
tid v131 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i53 
y: i6 
=== Succesors ===
=== Usages ===
v481 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i53 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v481 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v131 
=== Succesors ===
trueSuccessor: v480 
falseSuccessor: v477 
=== Usages ===
=== Predecessor ===
i507 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v131 #trueSuccessor: v480 #falseSuccessor: v477  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v480 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v489 
=== Usages ===
=== Predecessor ===
v481 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v489  <|@  <|@
f <@~|@floating>@ <|@
tid j122 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i53 
=== Succesors ===
=== Usages ===
j454 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i53  <|@  <|@
f <@~|@floating>@ <|@
tid i120 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i53 
=== Succesors ===
=== Usages ===
j123 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i6 y: i53  <|@  <|@
f <@~|@floating>@ <|@
tid j123 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i120 
=== Succesors ===
=== Usages ===
j454 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i120  <|@  <|@
f <@~|@floating>@ <|@
tid j454 <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967296 - 4294967294]
=== Inputs ===
x: j122 
y: j123 
=== Succesors ===
=== Usages ===
j455 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j122 y: j123  <|@  <|@
f <@~|@floating>@ <|@
tid j124 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -1
stableDimension: 0
stamp: i64 [-1]
stampKind: i64
value: long[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
j455 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j455 <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967297 - 4294967293]
=== Inputs ===
x: j454 
y: j124 
=== Succesors ===
=== Usages ===
v127 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j454 y: j124  <|@  <|@
f <@~|@floating>@ <|@
tid j119 <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: true
inputBits: 32
resultBits: 64
stamp: i64 [0 - 2147483647] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i507 
=== Succesors ===
=== Usages ===
v127 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i507  <|@  <|@
f <@~|@floating>@ <|@
tid v127 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@724302cf
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j455 
y: j119 
=== Succesors ===
=== Usages ===
v489 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: j455 y: j119  <|@  <|@
f <@~|@floating>@ <|@
tid j465 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
rawvalue: 24
stableDimension: 0
stamp: i64 [24]
stampKind: i64
value: long[24|0x18]
=== Inputs ===
=== Succesors ===
=== Usages ===
j461 j461 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i464 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
rawvalue: -25883
stableDimension: 0
stamp: i32 [-25883]
stampKind: i32
value: int[-25883|0xffffffffffff9ae5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i460 i460 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v489 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v127 
=== Succesors ===
trueSuccessor: v488 
falseSuccessor: v485 
=== Usages ===
=== Predecessor ===
v480 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v127 #trueSuccessor: v488 #falseSuccessor: v485  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v488 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v487 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v487  <|@  <|@
f <@~|@floating>@ <|@
tid v128 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@724302cf
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i53 
y: i507 
=== Succesors ===
=== Usages ===
v487 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i53 y: i507  <|@  <|@
f <@*|@fixed>@ <|@
tid v487 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v128 
=== Succesors ===
trueSuccessor: v478 
falseSuccessor: v486 
=== Usages ===
=== Predecessor ===
v488 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v128 #trueSuccessor: v478 #falseSuccessor: v486  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v478 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v476 
=== Usages ===
=== Predecessor ===
v487 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v476  <|@  <|@
f <@*|@fixed>@ <|@
tid v476 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v474 
=== Predecessor ===
v478 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v486 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v490 
=== Usages ===
=== Predecessor ===
v487 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v490  <|@  <|@
f <@*|@fixed>@ <|@
tid v490 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v456 
=== Predecessor ===
v486 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v485 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v463 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v463  <|@  <|@
f <@*|@fixed>@ <|@
tid v463 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v456 
=== Predecessor ===
v485 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v477 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v475 
=== Usages ===
=== Predecessor ===
v481 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v475  <|@  <|@
f <@*|@fixed>@ <|@
tid v475 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v474 
=== Predecessor ===
v477 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v474 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v475 v476 
=== Succesors ===
next: v145 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v475 v476 #next: v145  <|@  <|@
f <@~|@floating>@ <|@
tid v89 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@724302cf
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i507 
=== Succesors ===
=== Usages ===
v145 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i3 y: i507  <|@  <|@
f <@*|@fixed>@ <|@
tid v145 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v89 
=== Succesors ===
trueSuccessor: v142 
falseSuccessor: v144 
=== Usages ===
=== Predecessor ===
v474 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v89 #trueSuccessor: v142 #falseSuccessor: v144  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i508 
=== Usages ===
=== Predecessor ===
v145 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i508  <|@  <|@
f <@~|@floating>@ <|@
tid v566 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i3 
=== Succesors ===
=== Usages ===
i508 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i3  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i508 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v566 
lastLocationAccess: - 
=== Succesors ===
next: v8 
=== Usages ===
i98 
=== Predecessor ===
v142 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v566 lastLocationAccess: - #next: v8  <|@  <|@
f <@~|@floating>@ <|@
tid i28 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i29 i55 i155 i178 i207 i231 i241 i261 i271 i281 i290 i382 i315 i325 i335 i344 i355 i364 i373 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i55 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i1 
y: i28 
=== Succesors ===
=== Usages ===
i56 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i1 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i56 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i55 
y: i1 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i55 y: i1  <|@  <|@
f <@~|@floating>@ <|@
tid i98 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i508 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i508  <|@  <|@
f <@~|@floating>@ <|@
tid i52 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i56 
y: i98 
=== Succesors ===
=== Usages ===
i64 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i56 y: i98  <|@  <|@
f <@~|@floating>@ <|@
tid i197 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i198 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i3 
y: i197 
=== Succesors ===
=== Usages ===
v195 i196 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i197  <|@  <|@
f <@~|@floating>@ <|@
tid v195 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i198 
y: i6 
=== Succesors ===
=== Usages ===
i196 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i198 y: i6  <|@  <|@
f <@~|@floating>@ <|@
tid i196 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v195 
trueValue: i198 
falseValue: i6 
=== Succesors ===
=== Usages ===
v13 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v195 trueValue: i198 falseValue: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
i508 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i65 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i53 i25 
=== Succesors ===
=== Usages ===
i25 v13 v567 i158 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i53 i25  <|@  <|@
f <@~|@floating>@ <|@
tid i64 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i52 i23 
=== Succesors ===
=== Usages ===
i29 i157 i30 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i52 i23  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 38.21931645049644
loopType: PRE_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 2
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: v19 
=== Usages ===
i65 i64 v15 v26 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: v19  <|@  <|@
f <@~|@floating>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i65 
y: i196 
=== Succesors ===
=== Usages ===
v19 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i65 y: i196  <|@  <|@
f <@*|@fixed>@ <|@
tid v19 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v13 
=== Succesors ===
trueSuccessor: v18 
falseSuccessor: v15 
=== Usages ===
=== Predecessor ===
v9 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v13 #trueSuccessor: v18 #falseSuccessor: v15  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v18 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i509 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i509  <|@  <|@
f <@~|@floating>@ <|@
tid v567 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i65 
=== Succesors ===
=== Usages ===
i509 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i65  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i509 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v567 
lastLocationAccess: - 
=== Succesors ===
next: v26 
=== Usages ===
i108 
=== Predecessor ===
v18 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v567 lastLocationAccess: - #next: v26  <|@  <|@
f <@~|@floating>@ <|@
tid i29 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i64 
y: i28 
=== Succesors ===
=== Usages ===
i30 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i64 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i30 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i29 
y: i64 
=== Succesors ===
=== Usages ===
i23 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i29 y: i64  <|@  <|@
f <@~|@floating>@ <|@
tid i108 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i509 
=== Succesors ===
=== Usages ===
i23 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i509  <|@  <|@
f <@~|@floating>@ <|@
tid i23 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i30 
y: i108 
=== Succesors ===
=== Usages ===
i64 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i30 y: i108  <|@  <|@
f <@~|@floating>@ <|@
tid i25 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 25]
stamp: i32
=== Inputs ===
x: i65 
y: i24 
=== Succesors ===
=== Usages ===
i65 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i65 y: i24  <|@  <|@
f <@*|@fixed>@ <|@
tid v26 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i509 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v15 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v166 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v166  <|@  <|@
f <@~|@floating>@ <|@
tid i394 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 16
stableDimension: 0
stamp: i32 [16]
stampKind: i32
value: int[16|0x10]
=== Inputs ===
=== Succesors ===
=== Usages ===
i409 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i410 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483632
stableDimension: 0
stamp: i32 [-2147483632]
stampKind: i32
value: int[-2147483632|0xffffffff80000010]
=== Inputs ===
=== Succesors ===
=== Usages ===
v411 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v411 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i6 
y: i410 
=== Succesors ===
=== Usages ===
i221 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i6 y: i410  <|@  <|@
f <@~|@floating>@ <|@
tid i216 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483648
stableDimension: 0
stamp: i32 [-2147483648]
stampKind: i32
value: int[-2147483648|0xffffffff80000000]
=== Inputs ===
=== Succesors ===
=== Usages ===
i221 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i412 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -16
stableDimension: 0
stamp: i32 [-16]
stampKind: i32
value: int[-16|0xfffffffffffffff0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i413 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i413 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i412 
=== Succesors ===
=== Usages ===
i221 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i6 y: i412  <|@  <|@
f <@~|@floating>@ <|@
tid i221 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v411 
trueValue: i216 
falseValue: i413 
=== Succesors ===
=== Usages ===
v148 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v411 trueValue: i216 falseValue: i413  <|@  <|@
f <@*|@fixed>@ <|@
tid v166 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v147 
=== Predecessor ===
v15 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i157 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v147 
values: i64 i381 
=== Succesors ===
=== Usages ===
i155 i156 i180 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v147 values: i64 i381  <|@  <|@
f <@~|@floating>@ <|@
tid i158 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v147 
values: i65 i409 
=== Succesors ===
=== Usages ===
v148 j527 v568 i181 i409 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v147 values: i65 i409  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v147 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 38.21931645049644
loopType: MAIN_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 16
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v166 
=== Succesors ===
next: v151 
=== Usages ===
v149 v154 i157 i158 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v166 #next: v151  <|@  <|@
f <@~|@floating>@ <|@
tid v148 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i158 
y: i221 
=== Succesors ===
=== Usages ===
v151 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i158 y: i221  <|@  <|@
f <@*|@fixed>@ <|@
tid v151 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.5813635227954954
stamp: void
=== Inputs ===
condition: v148 
=== Succesors ===
trueSuccessor: v150 
falseSuccessor: v149 
=== Usages ===
=== Predecessor ===
v147 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v148 #trueSuccessor: v150 #falseSuccessor: v149  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v150 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i510 
=== Usages ===
=== Predecessor ===
v151 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i510  <|@  <|@
f <@~|@floating>@ <|@
tid v568 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i158 
=== Succesors ===
=== Usages ===
i510 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i158  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i510 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v568 
lastLocationAccess: - 
=== Succesors ===
next: i511 
=== Usages ===
i162 
=== Predecessor ===
v150 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v568 lastLocationAccess: - #next: i511  <|@  <|@
f <@~|@floating>@ <|@
tid j527 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i158 
=== Succesors ===
=== Usages ===
v570 v571 v572 v573 v574 v575 v576 v577 v578 v579 v580 v581 v582 v583 v584 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i158  <|@  <|@
f <@~|@floating>@ <|@
tid v570 <|@
d <@d|@=== Debug Properties ===
displacement: 17
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i511 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i511 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v570 
lastLocationAccess: - 
=== Succesors ===
next: i512 
=== Usages ===
i212 
=== Predecessor ===
i510 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v570 lastLocationAccess: - #next: i512  <|@  <|@
f <@~|@floating>@ <|@
tid v571 <|@
d <@d|@=== Debug Properties ===
displacement: 18
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i512 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i512 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v571 
lastLocationAccess: - 
=== Succesors ===
next: i513 
=== Usages ===
i236 
=== Predecessor ===
i511 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v571 lastLocationAccess: - #next: i513  <|@  <|@
f <@~|@floating>@ <|@
tid v572 <|@
d <@d|@=== Debug Properties ===
displacement: 19
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i513 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i513 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v572 
lastLocationAccess: - 
=== Succesors ===
next: i514 
=== Usages ===
i246 
=== Predecessor ===
i512 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v572 lastLocationAccess: - #next: i514  <|@  <|@
f <@~|@floating>@ <|@
tid v573 <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i514 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i514 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v573 
lastLocationAccess: - 
=== Succesors ===
next: i515 
=== Usages ===
i266 
=== Predecessor ===
i513 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v573 lastLocationAccess: - #next: i515  <|@  <|@
f <@~|@floating>@ <|@
tid v574 <|@
d <@d|@=== Debug Properties ===
displacement: 21
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i515 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i515 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v574 
lastLocationAccess: - 
=== Succesors ===
next: i516 
=== Usages ===
i276 
=== Predecessor ===
i514 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v574 lastLocationAccess: - #next: i516  <|@  <|@
f <@~|@floating>@ <|@
tid v575 <|@
d <@d|@=== Debug Properties ===
displacement: 22
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i516 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i516 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v575 
lastLocationAccess: - 
=== Succesors ===
next: i517 
=== Usages ===
i286 
=== Predecessor ===
i515 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v575 lastLocationAccess: - #next: i517  <|@  <|@
f <@~|@floating>@ <|@
tid v576 <|@
d <@d|@=== Debug Properties ===
displacement: 23
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i517 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i517 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v576 
lastLocationAccess: - 
=== Succesors ===
next: i518 
=== Usages ===
i295 
=== Predecessor ===
i516 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v576 lastLocationAccess: - #next: i518  <|@  <|@
f <@~|@floating>@ <|@
tid v577 <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i518 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i518 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v577 
lastLocationAccess: - 
=== Succesors ===
next: i519 
=== Usages ===
i320 
=== Predecessor ===
i517 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v577 lastLocationAccess: - #next: i519  <|@  <|@
f <@~|@floating>@ <|@
tid v578 <|@
d <@d|@=== Debug Properties ===
displacement: 25
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i519 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i519 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v578 
lastLocationAccess: - 
=== Succesors ===
next: i520 
=== Usages ===
i330 
=== Predecessor ===
i518 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v578 lastLocationAccess: - #next: i520  <|@  <|@
f <@~|@floating>@ <|@
tid v579 <|@
d <@d|@=== Debug Properties ===
displacement: 26
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i520 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i520 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v579 
lastLocationAccess: - 
=== Succesors ===
next: i521 
=== Usages ===
i340 
=== Predecessor ===
i519 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v579 lastLocationAccess: - #next: i521  <|@  <|@
f <@~|@floating>@ <|@
tid v580 <|@
d <@d|@=== Debug Properties ===
displacement: 27
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i521 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i521 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v580 
lastLocationAccess: - 
=== Succesors ===
next: i522 
=== Usages ===
i349 
=== Predecessor ===
i520 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v580 lastLocationAccess: - #next: i522  <|@  <|@
f <@~|@floating>@ <|@
tid v581 <|@
d <@d|@=== Debug Properties ===
displacement: 28
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i522 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i522 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v581 
lastLocationAccess: - 
=== Succesors ===
next: i523 
=== Usages ===
i360 
=== Predecessor ===
i521 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v581 lastLocationAccess: - #next: i523  <|@  <|@
f <@~|@floating>@ <|@
tid v582 <|@
d <@d|@=== Debug Properties ===
displacement: 29
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i523 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i523 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v582 
lastLocationAccess: - 
=== Succesors ===
next: i524 
=== Usages ===
i369 
=== Predecessor ===
i522 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v582 lastLocationAccess: - #next: i524  <|@  <|@
f <@~|@floating>@ <|@
tid v583 <|@
d <@d|@=== Debug Properties ===
displacement: 30
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i524 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i524 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v583 
lastLocationAccess: - 
=== Succesors ===
next: i525 
=== Usages ===
i378 
=== Predecessor ===
i523 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v583 lastLocationAccess: - #next: i525  <|@  <|@
f <@~|@floating>@ <|@
tid v584 <|@
d <@d|@=== Debug Properties ===
displacement: 31
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i525 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i525 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v584 
lastLocationAccess: - 
=== Succesors ===
next: v154 
=== Usages ===
i387 
=== Predecessor ===
i524 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v584 lastLocationAccess: - #next: v154  <|@  <|@
f <@~|@floating>@ <|@
tid i155 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i157 
y: i28 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i157 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i156 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i155 
y: i157 
=== Succesors ===
=== Usages ===
i152 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i155 y: i157  <|@  <|@
f <@~|@floating>@ <|@
tid i162 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i510 
=== Succesors ===
=== Usages ===
i152 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i510  <|@  <|@
f <@~|@floating>@ <|@
tid i152 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i156 
y: i162 
=== Succesors ===
=== Usages ===
i208 i207 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i156 y: i162  <|@  <|@
f <@~|@floating>@ <|@
tid i207 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i152 
y: i28 
=== Succesors ===
=== Usages ===
i208 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i152 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i208 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i207 
y: i152 
=== Succesors ===
=== Usages ===
i204 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i207 y: i152  <|@  <|@
f <@~|@floating>@ <|@
tid i212 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i511 
=== Succesors ===
=== Usages ===
i204 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i511  <|@  <|@
f <@~|@floating>@ <|@
tid i204 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i208 
y: i212 
=== Succesors ===
=== Usages ===
i232 i231 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i208 y: i212  <|@  <|@
f <@~|@floating>@ <|@
tid i231 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i204 
y: i28 
=== Succesors ===
=== Usages ===
i232 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i204 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i232 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i231 
y: i204 
=== Succesors ===
=== Usages ===
i228 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i231 y: i204  <|@  <|@
f <@~|@floating>@ <|@
tid i236 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i512 
=== Succesors ===
=== Usages ===
i228 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i512  <|@  <|@
f <@~|@floating>@ <|@
tid i228 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i232 
y: i236 
=== Succesors ===
=== Usages ===
i241 i242 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i232 y: i236  <|@  <|@
f <@~|@floating>@ <|@
tid i241 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i228 
y: i28 
=== Succesors ===
=== Usages ===
i242 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i228 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i242 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i241 
y: i228 
=== Succesors ===
=== Usages ===
i240 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i241 y: i228  <|@  <|@
f <@~|@floating>@ <|@
tid i246 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i513 
=== Succesors ===
=== Usages ===
i240 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i513  <|@  <|@
f <@~|@floating>@ <|@
tid i240 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i242 
y: i246 
=== Succesors ===
=== Usages ===
i262 i261 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i242 y: i246  <|@  <|@
f <@~|@floating>@ <|@
tid i261 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i240 
y: i28 
=== Succesors ===
=== Usages ===
i262 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i240 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i262 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i261 
y: i240 
=== Succesors ===
=== Usages ===
i258 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i261 y: i240  <|@  <|@
f <@~|@floating>@ <|@
tid i266 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i514 
=== Succesors ===
=== Usages ===
i258 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i514  <|@  <|@
f <@~|@floating>@ <|@
tid i258 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i262 
y: i266 
=== Succesors ===
=== Usages ===
i271 i272 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i262 y: i266  <|@  <|@
f <@~|@floating>@ <|@
tid i271 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i258 
y: i28 
=== Succesors ===
=== Usages ===
i272 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i258 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i272 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i271 
y: i258 
=== Succesors ===
=== Usages ===
i270 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i271 y: i258  <|@  <|@
f <@~|@floating>@ <|@
tid i276 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i515 
=== Succesors ===
=== Usages ===
i270 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i515  <|@  <|@
f <@~|@floating>@ <|@
tid i270 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i272 
y: i276 
=== Succesors ===
=== Usages ===
i281 i282 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i272 y: i276  <|@  <|@
f <@~|@floating>@ <|@
tid i281 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i270 
y: i28 
=== Succesors ===
=== Usages ===
i282 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i270 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i282 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i281 
y: i270 
=== Succesors ===
=== Usages ===
i280 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i281 y: i270  <|@  <|@
f <@~|@floating>@ <|@
tid i286 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i516 
=== Succesors ===
=== Usages ===
i280 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i516  <|@  <|@
f <@~|@floating>@ <|@
tid i280 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i282 
y: i286 
=== Succesors ===
=== Usages ===
i290 i291 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i282 y: i286  <|@  <|@
f <@~|@floating>@ <|@
tid i290 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i280 
y: i28 
=== Succesors ===
=== Usages ===
i291 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i280 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i291 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i290 
y: i280 
=== Succesors ===
=== Usages ===
i289 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i290 y: i280  <|@  <|@
f <@~|@floating>@ <|@
tid i295 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i517 
=== Succesors ===
=== Usages ===
i289 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i517  <|@  <|@
f <@~|@floating>@ <|@
tid i289 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i291 
y: i295 
=== Succesors ===
=== Usages ===
i316 i315 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i291 y: i295  <|@  <|@
f <@~|@floating>@ <|@
tid i315 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i289 
y: i28 
=== Succesors ===
=== Usages ===
i316 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i289 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i316 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i315 
y: i289 
=== Succesors ===
=== Usages ===
i312 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i315 y: i289  <|@  <|@
f <@~|@floating>@ <|@
tid i320 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i518 
=== Succesors ===
=== Usages ===
i312 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i518  <|@  <|@
f <@~|@floating>@ <|@
tid i312 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i316 
y: i320 
=== Succesors ===
=== Usages ===
i325 i326 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i316 y: i320  <|@  <|@
f <@~|@floating>@ <|@
tid i325 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i312 
y: i28 
=== Succesors ===
=== Usages ===
i326 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i312 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i326 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i325 
y: i312 
=== Succesors ===
=== Usages ===
i324 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i325 y: i312  <|@  <|@
f <@~|@floating>@ <|@
tid i330 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i519 
=== Succesors ===
=== Usages ===
i324 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i519  <|@  <|@
f <@~|@floating>@ <|@
tid i324 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i326 
y: i330 
=== Succesors ===
=== Usages ===
i335 i336 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i326 y: i330  <|@  <|@
f <@~|@floating>@ <|@
tid i335 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i324 
y: i28 
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i324 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i336 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i335 
y: i324 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i335 y: i324  <|@  <|@
f <@~|@floating>@ <|@
tid i340 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i520 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i520  <|@  <|@
f <@~|@floating>@ <|@
tid i334 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i336 
y: i340 
=== Succesors ===
=== Usages ===
i344 i345 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i336 y: i340  <|@  <|@
f <@~|@floating>@ <|@
tid i344 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i334 
y: i28 
=== Succesors ===
=== Usages ===
i345 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i334 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i345 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i344 
y: i334 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i344 y: i334  <|@  <|@
f <@~|@floating>@ <|@
tid i349 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i521 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i521  <|@  <|@
f <@~|@floating>@ <|@
tid i343 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i345 
y: i349 
=== Succesors ===
=== Usages ===
i355 i356 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i345 y: i349  <|@  <|@
f <@~|@floating>@ <|@
tid i355 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i343 
y: i28 
=== Succesors ===
=== Usages ===
i356 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i343 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i356 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i355 
y: i343 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i355 y: i343  <|@  <|@
f <@~|@floating>@ <|@
tid i360 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i522 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i522  <|@  <|@
f <@~|@floating>@ <|@
tid i354 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i356 
y: i360 
=== Succesors ===
=== Usages ===
i364 i365 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i356 y: i360  <|@  <|@
f <@~|@floating>@ <|@
tid i364 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i354 
y: i28 
=== Succesors ===
=== Usages ===
i365 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i354 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i365 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i364 
y: i354 
=== Succesors ===
=== Usages ===
i363 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i364 y: i354  <|@  <|@
f <@~|@floating>@ <|@
tid i369 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i523 
=== Succesors ===
=== Usages ===
i363 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i523  <|@  <|@
f <@~|@floating>@ <|@
tid i363 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i365 
y: i369 
=== Succesors ===
=== Usages ===
i373 i374 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i365 y: i369  <|@  <|@
f <@~|@floating>@ <|@
tid i373 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i363 
y: i28 
=== Succesors ===
=== Usages ===
i374 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i363 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i374 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i373 
y: i363 
=== Succesors ===
=== Usages ===
i372 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i373 y: i363  <|@  <|@
f <@~|@floating>@ <|@
tid i378 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i524 
=== Succesors ===
=== Usages ===
i372 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i524  <|@  <|@
f <@~|@floating>@ <|@
tid i372 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i374 
y: i378 
=== Succesors ===
=== Usages ===
i382 i383 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i374 y: i378  <|@  <|@
f <@~|@floating>@ <|@
tid i382 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i372 
y: i28 
=== Succesors ===
=== Usages ===
i383 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i372 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i383 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i382 
y: i372 
=== Succesors ===
=== Usages ===
i381 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i382 y: i372  <|@  <|@
f <@~|@floating>@ <|@
tid i387 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i525 
=== Succesors ===
=== Usages ===
i381 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i525  <|@  <|@
f <@~|@floating>@ <|@
tid i381 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i383 
y: i387 
=== Succesors ===
=== Usages ===
i157 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i383 y: i387  <|@  <|@
f <@~|@floating>@ <|@
tid i409 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 25]
stamp: i32
=== Inputs ===
x: i158 
y: i394 
=== Succesors ===
=== Usages ===
i158 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i158 y: i394  <|@  <|@
f <@*|@fixed>@ <|@
tid v154 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v147 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i525 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v147  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v149 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v147 
=== Succesors ===
next: v189 
=== Usages ===
=== Predecessor ===
v151 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v147 #next: v189  <|@  <|@
f <@*|@fixed>@ <|@
tid v189 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v170 
=== Predecessor ===
v149 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i180 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v170 
values: i157 i175 
=== Succesors ===
=== Usages ===
i178 i179 i63 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v170 values: i157 i175  <|@  <|@
f <@~|@floating>@ <|@
tid i181 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v170 
values: i158 i176 
=== Succesors ===
=== Usages ===
v171 i176 v569 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v170 values: i158 i176  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v170 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 38.21931645049644
loopType: POST_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v189 
=== Succesors ===
next: v174 
=== Usages ===
v172 v177 i180 i181 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v189 #next: v174  <|@  <|@
f <@~|@floating>@ <|@
tid v171 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i181 
y: i6 
=== Succesors ===
=== Usages ===
v174 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i181 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v174 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v171 
=== Succesors ===
trueSuccessor: v173 
falseSuccessor: v172 
=== Usages ===
=== Predecessor ===
v170 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v171 #trueSuccessor: v173 #falseSuccessor: v172  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v173 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i526 
=== Usages ===
=== Predecessor ===
v174 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i526  <|@  <|@
f <@~|@floating>@ <|@
tid v569 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i181 
=== Succesors ===
=== Usages ===
i526 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i181  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i526 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v569 
lastLocationAccess: - 
=== Succesors ===
next: v177 
=== Usages ===
i185 
=== Predecessor ===
v173 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v569 lastLocationAccess: - #next: v177  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i180 
y: i28 
=== Succesors ===
=== Usages ===
i179 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i180 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i179 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i178 
y: i180 
=== Succesors ===
=== Usages ===
i175 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i178 y: i180  <|@  <|@
f <@~|@floating>@ <|@
tid i185 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i526 
=== Succesors ===
=== Usages ===
i175 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i526  <|@  <|@
f <@~|@floating>@ <|@
tid i175 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i179 
y: i185 
=== Succesors ===
=== Usages ===
i180 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i179 y: i185  <|@  <|@
f <@~|@floating>@ <|@
tid i176 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 25]
stamp: i32
=== Inputs ===
x: i181 
y: i24 
=== Succesors ===
=== Usages ===
i181 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i181 y: i24  <|@  <|@
f <@*|@fixed>@ <|@
tid v177 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v170 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i526 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v170  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v172 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v170 
=== Succesors ===
next: v59 
=== Usages ===
=== Predecessor ===
v174 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v170 #next: v59  <|@  <|@
f <@*|@fixed>@ <|@
tid v59 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v58 
=== Predecessor ===
v172 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v144 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v466 
=== Usages ===
=== Predecessor ===
v145 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v466  <|@  <|@
f <@~|@floating>@ <|@
tid j459 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j461 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i467 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
rawvalue: -23067
stableDimension: 0
stamp: i32 [-23067]
stampKind: i32
value: int[-23067|0xffffffffffffa5e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i460 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v466 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v456 
=== Predecessor ===
v144 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i460 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i32 [-25883 - -23067] bits:1...10xxxxxx11100101
valueDescription: i32
=== Inputs ===
merge: v456 
values: i464 i467 i464 
=== Succesors ===
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v456 values: i464 i467 i464  <|@  <|@
f <@~|@floating>@ <|@
tid j461 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i64 [0 - 24] bits:0...0xx000
valueDescription: i64
=== Inputs ===
merge: v456 
values: j465 j459 j465 
=== Succesors ===
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v456 values: j465 j459 j465  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v456 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v463 v466 v490 
=== Succesors ===
next: v462 
=== Usages ===
i460 j461 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v463 v466 v490 #next: v462  <|@  <|@
f <@*|@fixed>@ <|@
tid v462 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i460 
speculation: j461 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v456 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i460 speculation: j461  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
=== Succesors ===
next: v60 
=== Usages ===
=== Predecessor ===
v50 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v60  <|@  <|@
f <@*|@fixed>@ <|@
tid v60 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v58 
=== Predecessor ===
v48 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i63 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v58 
values: i180 i1 
=== Succesors ===
=== Usages ===
v27 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v58 values: i180 i1  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v58 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v59 v60 
=== Succesors ===
next: v27 
=== Usages ===
i63 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v59 v60 #next: v27  <|@  <|@
f <@*|@fixed>@ <|@
tid v27 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 32]
stamp: void
=== Inputs ===
memoryMap: - 
result: i63 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v58 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i63  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v14|DWORD, v24|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr   -1  <|@ instruction [v27|DWORD, v28|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v33|DWORD, v32|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v28|DWORD, v27|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v103|DWORD, v104|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v37|DWORD, v38|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr   -1  <|@ instruction [v105|DWORD, v106|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v110|DWORD, v111|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v105|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v114|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-23067|0xffffffffffffa5e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a503 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a503  <|@  <|@
f <@~|@floating>@ <|@
tid a66 <|@
result v4|QWORD[.] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache
stableDimension: 0
stamp: a!# java.lang.Class
stampKind: a java.lang.Object
value: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache]
=== Inputs ===
=== Succesors ===
=== Usages ===
v561 v562 v563 v564 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v564 <|@
result [v4|QWORD[.] + 120] <|@
d <@d|@=== Debug Properties ===
displacement: 120
stamp: void*
stride: S1
=== Inputs ===
base: a66 
index: - 
=== Succesors ===
=== Usages ===
a503 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a66 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a503 <|@
result v5|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# long[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: BuboCache.CyclesBuffer
memoryOrder: PLAIN
stamp: n# long[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v564 
lastLocationAccess: - 
=== Succesors ===
next: a504 
=== Usages ===
v560 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v564 lastLocationAccess: - #next: a504  <|@  <|@
f <@~|@floating>@ <|@
tid v563 <|@
result [v4|QWORD[.] + 116] <|@
d <@d|@=== Debug Properties ===
displacement: 116
stamp: void*
stride: S1
=== Inputs ===
base: a66 
index: - 
=== Succesors ===
=== Usages ===
a504 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a66 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a504 <|@
result v6|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# long[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: BuboCache.ActivationCountBuffer
memoryOrder: PLAIN
stamp: n# long[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v563 
lastLocationAccess: - 
=== Succesors ===
next: a505 
=== Usages ===
v559 
=== Predecessor ===
a503 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v563 lastLocationAccess: - #next: a505  <|@  <|@
f <@~|@floating>@ <|@
tid v561 <|@
result [v4|QWORD[.] + 124] <|@
d <@d|@=== Debug Properties ===
displacement: 124
stamp: void*
stride: S1
=== Inputs ===
base: a66 
index: - 
=== Succesors ===
=== Usages ===
a505 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a66 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a505 <|@
result v7|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# long[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: BuboCache.Buffer
memoryOrder: PLAIN
stamp: n# long[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v561 
lastLocationAccess: - 
=== Succesors ===
next: a506 
=== Usages ===
v557 
=== Predecessor ===
a504 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v561 lastLocationAccess: - #next: a506  <|@  <|@
f <@~|@floating>@ <|@
tid v562 <|@
result [v4|QWORD[.] + 112] <|@
d <@d|@=== Debug Properties ===
displacement: 112
stamp: void*
stride: S1
=== Inputs ===
base: a66 
index: - 
=== Succesors ===
=== Usages ===
a506 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a66 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a506 <|@
result v8|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# long[]
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: BuboCache.TimeBuffer
memoryOrder: PLAIN
stamp: n# long[]
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v562 
lastLocationAccess: - 
=== Succesors ===
next: j499 
=== Usages ===
v558 
=== Predecessor ===
a505 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v562 lastLocationAccess: - #next: j499  <|@  <|@
f <@~|@floating>@ <|@
tid v560 <|@
result [v5|DWORD[_] * 8 + 53944] <|@
d <@d|@=== Debug Properties ===
displacement: 53944
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a503 
=== Succesors ===
=== Usages ===
v45 j499 v501 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a503  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j499 <|@
result v9|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: [null]
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: true
location: Array: long
memoryOrder: [null]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v560 
lastLocationAccess: - 
=== Succesors ===
next: v501 
=== Usages ===
j493 j497 
=== Predecessor ===
a506 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v560 lastLocationAccess: - #next: v501  <|@  <|@
f <@~|@floating>@ <|@
tid i492 <|@
result int[13|0xd] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 13
stableDimension: 0
stamp: i32
stampKind: i32
value: int[13|0xd]
=== Inputs ===
=== Succesors ===
=== Usages ===
j493 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j493 <|@
result v10|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
x: j499 
y: i492 
=== Succesors ===
=== Usages ===
v501 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j499 y: i492  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v501 <|@
d <@d|@=== Debug Properties ===
barrierType: ARRAY
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: long
location: Array: long
memoryOrder: PLAIN
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v560 
lastLocationAccess: - 
value: j493 
stateAfter: - 
=== Succesors ===
next: v502 
=== Usages ===
=== Predecessor ===
j499 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v560 lastLocationAccess: - value: j493 stateAfter: - #next: v502  <|@  <|@
f <@~|@floating>@ <|@
tid v559 <|@
result [v6|DWORD[_] * 8 + 53944] <|@
d <@d|@=== Debug Properties ===
displacement: 53944
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a504 
=== Succesors ===
=== Usages ===
v45 v502 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a504  <|@  <|@
f <@~|@floating>@ <|@
tid i496 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 1
stableDimension: 0
stamp: i32
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
j497 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j497 <|@
result v11|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64
=== Inputs ===
x: j499 
y: i496 
=== Succesors ===
=== Usages ===
v502 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j499 y: i496  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v502 <|@
d <@d|@=== Debug Properties ===
barrierType: ARRAY
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: Array: long
location: Array: long
memoryOrder: PLAIN
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v559 
lastLocationAccess: - 
value: j497 
stateAfter: - 
=== Succesors ===
next: v45 
=== Usages ===
=== Predecessor ===
v501 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v559 lastLocationAccess: - value: j497 stateAfter: - #next: v45  <|@  <|@
f <@~|@floating>@ <|@
tid v557 <|@
result [v7|DWORD[_] * 8 + 53944] <|@
d <@d|@=== Debug Properties ===
displacement: 53944
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a505 
=== Succesors ===
=== Usages ===
v45 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a505  <|@  <|@
f <@~|@floating>@ <|@
tid v558 <|@
result [v8|DWORD[_] * 8 + 53944] <|@
d <@d|@=== Debug Properties ===
displacement: 53944
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a506 
=== Succesors ===
=== Usages ===
v45 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a506  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v45 <|@
d <@d|@=== Debug Properties ===
stamp: BuboVoid
=== Inputs ===
values: v557 v558 v559 v560 
=== Succesors ===
next: v50 
=== Usages ===
=== Predecessor ===
v502 >@ <|@
instruction <@ReachabilityFence|@jdk.graal.compiler.nodes.java.ReachabilityFenceNode>@ values: v557 v558 v559 v560 #next: v50  <|@  <|@
f <@~|@floating>@ <|@
tid i1 <|@
result v0|DWORD <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i63 i55 i56 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
result v2|DWORD <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 i53 v47 v566 v89 i198 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i4 <|@
result v3|DWORD <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i6 <|@
result v12|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 2]
stamp: i32
=== Inputs ===
x: i3 
y: i4 
=== Succesors ===
=== Usages ===
v131 i196 v47 i120 i413 v171 v195 v411 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i4  <|@  <|@
f <@~|@floating>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i6 
=== Succesors ===
=== Usages ===
v50 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i3 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v50 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
profileData: PROFILED designatedSuccessorProbability: 0.9745023603034433
stamp: void
=== Inputs ===
condition: v47 
=== Succesors ===
trueSuccessor: v49 
falseSuccessor: v48 
=== Usages ===
=== Predecessor ===
v45 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v47 #trueSuccessor: v49 #falseSuccessor: v48  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i507 
=== Usages ===
=== Predecessor ===
v50 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i507  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
result v1|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# byte[]
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v584 v583 v565 v566 v567 v568 v569 v570 v571 v572 v573 v574 v575 v576 v577 v578 v579 v580 v581 v582 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: iload_2
code: ResolvedJavaMethodBytecode<ArraysSupport.hashCode(int, byte[], int, int)>
localsSize: 6
locksSize: 0
sourceFile: ArraysSupport.java
sourceLine: 223
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i1 a2 i3 i4 
=== Succesors ===
=== Usages ===
v462 i507 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i1 a2 i3 i4  <|@  <|@
f <@~|@floating>@ <|@
tid v565 <|@
result [v1|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i507 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i507 <|@
result v13|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-21515|0xffffffffffffabf5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v565 
lastLocationAccess: - 
=== Succesors ===
next: v481 
=== Usages ===
v89 v128 j119 
=== Predecessor ===
v49 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v565 lastLocationAccess: - #next: v481  <|@  <|@
f <@~|@floating>@ <|@
tid i24 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 25]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i25 i53 i176 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i53 <|@
result v14|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 25]
stamp: i32
=== Inputs ===
x: i3 
y: i24 
=== Succesors ===
=== Usages ===
i65 i120 j122 v128 v131 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i24  <|@  <|@
f <@~|@floating>@ <|@
tid v131 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i53 
y: i6 
=== Succesors ===
=== Usages ===
v481 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i53 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v481 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v131 
=== Succesors ===
trueSuccessor: v480 
falseSuccessor: v477 
=== Usages ===
=== Predecessor ===
i507 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v131 #trueSuccessor: v480 #falseSuccessor: v477  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v480 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v489 
=== Usages ===
=== Predecessor ===
v481 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v489  <|@  <|@
f <@~|@floating>@ <|@
tid j122 <|@
result v15|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i53 
=== Succesors ===
=== Usages ===
j454 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i53  <|@  <|@
f <@~|@floating>@ <|@
tid i120 <|@
result v16|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i53 
=== Succesors ===
=== Usages ===
j123 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i6 y: i53  <|@  <|@
f <@~|@floating>@ <|@
tid j123 <|@
result v17|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i120 
=== Succesors ===
=== Usages ===
j454 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i120  <|@  <|@
f <@~|@floating>@ <|@
tid j454 <|@
result v18|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967296 - 4294967294]
=== Inputs ===
x: j122 
y: j123 
=== Succesors ===
=== Usages ===
j455 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j122 y: j123  <|@  <|@
f <@~|@floating>@ <|@
tid j124 <|@
result long[-1|0xffffffffffffffff] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -1
stableDimension: 0
stamp: i64 [-1]
stampKind: i64
value: long[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
j455 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j455 <|@
result v19|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967297 - 4294967293]
=== Inputs ===
x: j454 
y: j124 
=== Succesors ===
=== Usages ===
v127 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j454 y: j124  <|@  <|@
f <@~|@floating>@ <|@
tid j119 <|@
result v20|QWORD <|@
d <@d|@=== Debug Properties ===
inputAlwaysPositive: true
inputBits: 32
resultBits: 64
stamp: i64 [0 - 2147483647] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i507 
=== Succesors ===
=== Usages ===
v127 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i507  <|@  <|@
f <@~|@floating>@ <|@
tid v127 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@724302cf
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j455 
y: j119 
=== Succesors ===
=== Usages ===
v489 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: j455 y: j119  <|@  <|@
f <@~|@floating>@ <|@
tid j465 <|@
result long[24|0x18] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
rawvalue: 24
stableDimension: 0
stamp: i64 [24]
stampKind: i64
value: long[24|0x18]
=== Inputs ===
=== Succesors ===
=== Usages ===
j461 j461 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i464 <|@
result int[-25883|0xffffffffffff9ae5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
rawvalue: -25883
stableDimension: 0
stamp: i32 [-25883]
stampKind: i32
value: int[-25883|0xffffffffffff9ae5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i460 i460 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v489 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v127 
=== Succesors ===
trueSuccessor: v488 
falseSuccessor: v485 
=== Usages ===
=== Predecessor ===
v480 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v127 #trueSuccessor: v488 #falseSuccessor: v485  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v488 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v487 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v487  <|@  <|@
f <@~|@floating>@ <|@
tid v128 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@724302cf
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i53 
y: i507 
=== Succesors ===
=== Usages ===
v487 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i53 y: i507  <|@  <|@
f <@*|@fixed>@ <|@
tid v487 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v128 
=== Succesors ===
trueSuccessor: v478 
falseSuccessor: v486 
=== Usages ===
=== Predecessor ===
v488 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v128 #trueSuccessor: v478 #falseSuccessor: v486  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v478 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v476 
=== Usages ===
=== Predecessor ===
v487 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v476  <|@  <|@
f <@*|@fixed>@ <|@
tid v476 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v474 
=== Predecessor ===
v478 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v486 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v490 
=== Usages ===
=== Predecessor ===
v487 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v490  <|@  <|@
f <@*|@fixed>@ <|@
tid v490 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v456 
=== Predecessor ===
v486 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v485 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v463 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v463  <|@  <|@
f <@*|@fixed>@ <|@
tid v463 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v456 
=== Predecessor ===
v485 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v477 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v475 
=== Usages ===
=== Predecessor ===
v481 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v475  <|@  <|@
f <@*|@fixed>@ <|@
tid v475 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v474 
=== Predecessor ===
v477 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v474 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v475 v476 
=== Succesors ===
next: v145 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v475 v476 #next: v145  <|@  <|@
f <@~|@floating>@ <|@
tid v89 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@724302cf
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i507 
=== Succesors ===
=== Usages ===
v145 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i3 y: i507  <|@  <|@
f <@*|@fixed>@ <|@
tid v145 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v89 
=== Succesors ===
trueSuccessor: v142 
falseSuccessor: v144 
=== Usages ===
=== Predecessor ===
v474 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v89 #trueSuccessor: v142 #falseSuccessor: v144  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i508 
=== Usages ===
=== Predecessor ===
v145 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i508  <|@  <|@
f <@~|@floating>@ <|@
tid v566 <|@
result [v1|QWORD[.] + v2|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i3 
=== Succesors ===
=== Usages ===
i508 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i3  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i508 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v566 
lastLocationAccess: - 
=== Succesors ===
next: v8 
=== Usages ===
i98 
=== Predecessor ===
v142 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v566 lastLocationAccess: - #next: v8  <|@  <|@
f <@~|@floating>@ <|@
tid i28 <|@
result int[5|0x5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i29 i55 i155 i178 i207 i231 i241 i261 i271 i281 i290 i382 i315 i325 i335 i344 i355 i364 i373 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i55 <|@
result v21|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i1 
y: i28 
=== Succesors ===
=== Usages ===
i56 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i1 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i56 <|@
result v22|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i55 
y: i1 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i55 y: i1  <|@  <|@
f <@~|@floating>@ <|@
tid i98 <|@
result v23|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i508 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i508  <|@  <|@
f <@~|@floating>@ <|@
tid i52 <|@
result v24|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i56 
y: i98 
=== Succesors ===
=== Usages ===
i64 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i56 y: i98  <|@  <|@
f <@~|@floating>@ <|@
tid i197 <|@
result int[2|0x2] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i198 <|@
result v25|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i3 
y: i197 
=== Succesors ===
=== Usages ===
v195 i196 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i197  <|@  <|@
f <@~|@floating>@ <|@
tid v195 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i198 
y: i6 
=== Succesors ===
=== Usages ===
i196 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i198 y: i6  <|@  <|@
f <@~|@floating>@ <|@
tid i196 <|@
result v26|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v195 
trueValue: i198 
falseValue: i6 
=== Succesors ===
=== Usages ===
v13 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v195 trueValue: i198 falseValue: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
i508 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v14|DWORD, v24|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i65 <|@
result v27|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i53 i25 
=== Succesors ===
=== Usages ===
i25 v13 v567 i158 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i53 i25  <|@  <|@
f <@~|@floating>@ <|@
tid i64 <|@
result v28|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i52 i23 
=== Succesors ===
=== Usages ===
i29 i157 i30 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i52 i23  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 38.21931645049644
loopType: PRE_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 2
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: v19 
=== Usages ===
i65 i64 v15 v26 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: v19  <|@  <|@
f <@~|@floating>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i65 
y: i196 
=== Succesors ===
=== Usages ===
v19 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i65 y: i196  <|@  <|@
f <@*|@fixed>@ <|@
tid v19 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v13 
=== Succesors ===
trueSuccessor: v18 
falseSuccessor: v15 
=== Usages ===
=== Predecessor ===
v9 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v13 #trueSuccessor: v18 #falseSuccessor: v15  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v27|DWORD, v28|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v18 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i509 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i509  <|@  <|@
f <@~|@floating>@ <|@
tid v567 <|@
result [v1|QWORD[.] + v27|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i65 
=== Succesors ===
=== Usages ===
i509 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i65  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i509 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v567 
lastLocationAccess: - 
=== Succesors ===
next: v26 
=== Usages ===
i108 
=== Predecessor ===
v18 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v567 lastLocationAccess: - #next: v26  <|@  <|@
f <@~|@floating>@ <|@
tid i29 <|@
result v29|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i64 
y: i28 
=== Succesors ===
=== Usages ===
i30 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i64 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i30 <|@
result v30|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i29 
y: i64 
=== Succesors ===
=== Usages ===
i23 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i29 y: i64  <|@  <|@
f <@~|@floating>@ <|@
tid i108 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i509 
=== Succesors ===
=== Usages ===
i23 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i509  <|@  <|@
f <@~|@floating>@ <|@
tid i23 <|@
result v32|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i30 
y: i108 
=== Succesors ===
=== Usages ===
i64 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i30 y: i108  <|@  <|@
f <@~|@floating>@ <|@
tid i25 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 25]
stamp: i32
=== Inputs ===
x: i65 
y: i24 
=== Succesors ===
=== Usages ===
i65 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i65 y: i24  <|@  <|@
f <@*|@fixed>@ <|@
tid v26 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i509 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v33|DWORD, v32|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v15 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v166 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v166  <|@  <|@
f <@~|@floating>@ <|@
tid i394 <|@
result int[16|0x10] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 16
stableDimension: 0
stamp: i32 [16]
stampKind: i32
value: int[16|0x10]
=== Inputs ===
=== Succesors ===
=== Usages ===
i409 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i410 <|@
result int[-2147483632|0xffffffff80000010] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483632
stableDimension: 0
stamp: i32 [-2147483632]
stampKind: i32
value: int[-2147483632|0xffffffff80000010]
=== Inputs ===
=== Succesors ===
=== Usages ===
v411 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v411 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i6 
y: i410 
=== Succesors ===
=== Usages ===
i221 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i6 y: i410  <|@  <|@
f <@~|@floating>@ <|@
tid i216 <|@
result int[-2147483648|0xffffffff80000000] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483648
stableDimension: 0
stamp: i32 [-2147483648]
stampKind: i32
value: int[-2147483648|0xffffffff80000000]
=== Inputs ===
=== Succesors ===
=== Usages ===
i221 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i412 <|@
result int[-16|0xfffffffffffffff0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -16
stableDimension: 0
stamp: i32 [-16]
stampKind: i32
value: int[-16|0xfffffffffffffff0]
=== Inputs ===
=== Succesors ===
=== Usages ===
i413 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i413 <|@
result v34|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i412 
=== Succesors ===
=== Usages ===
i221 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i6 y: i412  <|@  <|@
f <@~|@floating>@ <|@
tid i221 <|@
result v35|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v411 
trueValue: i216 
falseValue: i413 
=== Succesors ===
=== Usages ===
v148 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v411 trueValue: i216 falseValue: i413  <|@  <|@
f <@*|@fixed>@ <|@
tid v166 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v147 
=== Predecessor ===
v15 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v28|DWORD, v27|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i157 <|@
result v37|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v147 
values: i64 i381 
=== Succesors ===
=== Usages ===
i155 i156 i180 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v147 values: i64 i381  <|@  <|@
f <@~|@floating>@ <|@
tid i158 <|@
result v38|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v147 
values: i65 i409 
=== Succesors ===
=== Usages ===
v148 j527 v568 i181 i409 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v147 values: i65 i409  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v147 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 38.21931645049644
loopType: MAIN_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 16
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v166 
=== Succesors ===
next: v151 
=== Usages ===
v149 v154 i157 i158 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v166 #next: v151  <|@  <|@
f <@~|@floating>@ <|@
tid v148 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i158 
y: i221 
=== Succesors ===
=== Usages ===
v151 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i158 y: i221  <|@  <|@
f <@*|@fixed>@ <|@
tid v151 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.5813635227954954
stamp: void
=== Inputs ===
condition: v148 
=== Succesors ===
trueSuccessor: v150 
falseSuccessor: v149 
=== Usages ===
=== Predecessor ===
v147 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v148 #trueSuccessor: v150 #falseSuccessor: v149  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v150 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i510 
=== Usages ===
=== Predecessor ===
v151 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i510  <|@  <|@
f <@~|@floating>@ <|@
tid v568 <|@
result [v1|QWORD[.] + v38|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i158 
=== Succesors ===
=== Usages ===
i510 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i158  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i510 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v568 
lastLocationAccess: - 
=== Succesors ===
next: i511 
=== Usages ===
i162 
=== Predecessor ===
v150 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v568 lastLocationAccess: - #next: i511  <|@  <|@
f <@~|@floating>@ <|@
tid j527 <|@
result v40|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i158 
=== Succesors ===
=== Usages ===
v570 v571 v572 v573 v574 v575 v576 v577 v578 v579 v580 v581 v582 v583 v584 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i158  <|@  <|@
f <@~|@floating>@ <|@
tid v570 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 17] <|@
d <@d|@=== Debug Properties ===
displacement: 17
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i511 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i511 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v570 
lastLocationAccess: - 
=== Succesors ===
next: i512 
=== Usages ===
i212 
=== Predecessor ===
i510 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v570 lastLocationAccess: - #next: i512  <|@  <|@
f <@~|@floating>@ <|@
tid v571 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 18] <|@
d <@d|@=== Debug Properties ===
displacement: 18
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i512 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i512 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v571 
lastLocationAccess: - 
=== Succesors ===
next: i513 
=== Usages ===
i236 
=== Predecessor ===
i511 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v571 lastLocationAccess: - #next: i513  <|@  <|@
f <@~|@floating>@ <|@
tid v572 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 19] <|@
d <@d|@=== Debug Properties ===
displacement: 19
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i513 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i513 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v572 
lastLocationAccess: - 
=== Succesors ===
next: i514 
=== Usages ===
i246 
=== Predecessor ===
i512 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v572 lastLocationAccess: - #next: i514  <|@  <|@
f <@~|@floating>@ <|@
tid v573 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 20] <|@
d <@d|@=== Debug Properties ===
displacement: 20
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i514 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i514 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v573 
lastLocationAccess: - 
=== Succesors ===
next: i515 
=== Usages ===
i266 
=== Predecessor ===
i513 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v573 lastLocationAccess: - #next: i515  <|@  <|@
f <@~|@floating>@ <|@
tid v574 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 21] <|@
d <@d|@=== Debug Properties ===
displacement: 21
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i515 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i515 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v574 
lastLocationAccess: - 
=== Succesors ===
next: i516 
=== Usages ===
i276 
=== Predecessor ===
i514 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v574 lastLocationAccess: - #next: i516  <|@  <|@
f <@~|@floating>@ <|@
tid v575 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 22] <|@
d <@d|@=== Debug Properties ===
displacement: 22
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i516 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i516 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v575 
lastLocationAccess: - 
=== Succesors ===
next: i517 
=== Usages ===
i286 
=== Predecessor ===
i515 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v575 lastLocationAccess: - #next: i517  <|@  <|@
f <@~|@floating>@ <|@
tid v576 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 23] <|@
d <@d|@=== Debug Properties ===
displacement: 23
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i517 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i517 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v576 
lastLocationAccess: - 
=== Succesors ===
next: i518 
=== Usages ===
i295 
=== Predecessor ===
i516 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v576 lastLocationAccess: - #next: i518  <|@  <|@
f <@~|@floating>@ <|@
tid v577 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 24] <|@
d <@d|@=== Debug Properties ===
displacement: 24
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i518 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i518 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v577 
lastLocationAccess: - 
=== Succesors ===
next: i519 
=== Usages ===
i320 
=== Predecessor ===
i517 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v577 lastLocationAccess: - #next: i519  <|@  <|@
f <@~|@floating>@ <|@
tid v578 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 25] <|@
d <@d|@=== Debug Properties ===
displacement: 25
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i519 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i519 <|@
result v49|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v578 
lastLocationAccess: - 
=== Succesors ===
next: i520 
=== Usages ===
i330 
=== Predecessor ===
i518 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v578 lastLocationAccess: - #next: i520  <|@  <|@
f <@~|@floating>@ <|@
tid v579 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 26] <|@
d <@d|@=== Debug Properties ===
displacement: 26
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i520 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i520 <|@
result v50|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v579 
lastLocationAccess: - 
=== Succesors ===
next: i521 
=== Usages ===
i340 
=== Predecessor ===
i519 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v579 lastLocationAccess: - #next: i521  <|@  <|@
f <@~|@floating>@ <|@
tid v580 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 27] <|@
d <@d|@=== Debug Properties ===
displacement: 27
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i521 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i521 <|@
result v51|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v580 
lastLocationAccess: - 
=== Succesors ===
next: i522 
=== Usages ===
i349 
=== Predecessor ===
i520 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v580 lastLocationAccess: - #next: i522  <|@  <|@
f <@~|@floating>@ <|@
tid v581 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 28] <|@
d <@d|@=== Debug Properties ===
displacement: 28
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i522 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i522 <|@
result v52|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v581 
lastLocationAccess: - 
=== Succesors ===
next: i523 
=== Usages ===
i360 
=== Predecessor ===
i521 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v581 lastLocationAccess: - #next: i523  <|@  <|@
f <@~|@floating>@ <|@
tid v582 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 29] <|@
d <@d|@=== Debug Properties ===
displacement: 29
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i523 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i523 <|@
result v53|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v582 
lastLocationAccess: - 
=== Succesors ===
next: i524 
=== Usages ===
i369 
=== Predecessor ===
i522 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v582 lastLocationAccess: - #next: i524  <|@  <|@
f <@~|@floating>@ <|@
tid v583 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 30] <|@
d <@d|@=== Debug Properties ===
displacement: 30
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i524 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i524 <|@
result v54|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v583 
lastLocationAccess: - 
=== Succesors ===
next: i525 
=== Usages ===
i378 
=== Predecessor ===
i523 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v583 lastLocationAccess: - #next: i525  <|@  <|@
f <@~|@floating>@ <|@
tid v584 <|@
result [v1|QWORD[.] + v40|QWORD * 1 + 31] <|@
d <@d|@=== Debug Properties ===
displacement: 31
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j527 
=== Succesors ===
=== Usages ===
i525 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j527  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i525 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v584 
lastLocationAccess: - 
=== Succesors ===
next: v154 
=== Usages ===
i387 
=== Predecessor ===
i524 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v584 lastLocationAccess: - #next: v154  <|@  <|@
f <@~|@floating>@ <|@
tid i155 <|@
result v55|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i157 
y: i28 
=== Succesors ===
=== Usages ===
i156 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i157 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i156 <|@
result v56|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i155 
y: i157 
=== Succesors ===
=== Usages ===
i152 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i155 y: i157  <|@  <|@
f <@~|@floating>@ <|@
tid i162 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i510 
=== Succesors ===
=== Usages ===
i152 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i510  <|@  <|@
f <@~|@floating>@ <|@
tid i152 <|@
result v57|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i156 
y: i162 
=== Succesors ===
=== Usages ===
i208 i207 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i156 y: i162  <|@  <|@
f <@~|@floating>@ <|@
tid i207 <|@
result v58|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i152 
y: i28 
=== Succesors ===
=== Usages ===
i208 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i152 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i208 <|@
result v59|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i207 
y: i152 
=== Succesors ===
=== Usages ===
i204 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i207 y: i152  <|@  <|@
f <@~|@floating>@ <|@
tid i212 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i511 
=== Succesors ===
=== Usages ===
i204 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i511  <|@  <|@
f <@~|@floating>@ <|@
tid i204 <|@
result v60|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i208 
y: i212 
=== Succesors ===
=== Usages ===
i232 i231 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i208 y: i212  <|@  <|@
f <@~|@floating>@ <|@
tid i231 <|@
result v61|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i204 
y: i28 
=== Succesors ===
=== Usages ===
i232 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i204 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i232 <|@
result v62|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i231 
y: i204 
=== Succesors ===
=== Usages ===
i228 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i231 y: i204  <|@  <|@
f <@~|@floating>@ <|@
tid i236 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i512 
=== Succesors ===
=== Usages ===
i228 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i512  <|@  <|@
f <@~|@floating>@ <|@
tid i228 <|@
result v63|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i232 
y: i236 
=== Succesors ===
=== Usages ===
i241 i242 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i232 y: i236  <|@  <|@
f <@~|@floating>@ <|@
tid i241 <|@
result v64|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i228 
y: i28 
=== Succesors ===
=== Usages ===
i242 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i228 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i242 <|@
result v65|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i241 
y: i228 
=== Succesors ===
=== Usages ===
i240 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i241 y: i228  <|@  <|@
f <@~|@floating>@ <|@
tid i246 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i513 
=== Succesors ===
=== Usages ===
i240 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i513  <|@  <|@
f <@~|@floating>@ <|@
tid i240 <|@
result v66|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i242 
y: i246 
=== Succesors ===
=== Usages ===
i262 i261 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i242 y: i246  <|@  <|@
f <@~|@floating>@ <|@
tid i261 <|@
result v67|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i240 
y: i28 
=== Succesors ===
=== Usages ===
i262 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i240 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i262 <|@
result v68|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i261 
y: i240 
=== Succesors ===
=== Usages ===
i258 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i261 y: i240  <|@  <|@
f <@~|@floating>@ <|@
tid i266 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i514 
=== Succesors ===
=== Usages ===
i258 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i514  <|@  <|@
f <@~|@floating>@ <|@
tid i258 <|@
result v69|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i262 
y: i266 
=== Succesors ===
=== Usages ===
i271 i272 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i262 y: i266  <|@  <|@
f <@~|@floating>@ <|@
tid i271 <|@
result v70|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i258 
y: i28 
=== Succesors ===
=== Usages ===
i272 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i258 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i272 <|@
result v71|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i271 
y: i258 
=== Succesors ===
=== Usages ===
i270 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i271 y: i258  <|@  <|@
f <@~|@floating>@ <|@
tid i276 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i515 
=== Succesors ===
=== Usages ===
i270 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i515  <|@  <|@
f <@~|@floating>@ <|@
tid i270 <|@
result v72|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i272 
y: i276 
=== Succesors ===
=== Usages ===
i281 i282 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i272 y: i276  <|@  <|@
f <@~|@floating>@ <|@
tid i281 <|@
result v73|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i270 
y: i28 
=== Succesors ===
=== Usages ===
i282 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i270 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i282 <|@
result v74|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i281 
y: i270 
=== Succesors ===
=== Usages ===
i280 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i281 y: i270  <|@  <|@
f <@~|@floating>@ <|@
tid i286 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i516 
=== Succesors ===
=== Usages ===
i280 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i516  <|@  <|@
f <@~|@floating>@ <|@
tid i280 <|@
result v75|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i282 
y: i286 
=== Succesors ===
=== Usages ===
i290 i291 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i282 y: i286  <|@  <|@
f <@~|@floating>@ <|@
tid i290 <|@
result v76|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i280 
y: i28 
=== Succesors ===
=== Usages ===
i291 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i280 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i291 <|@
result v77|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i290 
y: i280 
=== Succesors ===
=== Usages ===
i289 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i290 y: i280  <|@  <|@
f <@~|@floating>@ <|@
tid i295 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i517 
=== Succesors ===
=== Usages ===
i289 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i517  <|@  <|@
f <@~|@floating>@ <|@
tid i289 <|@
result v78|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i291 
y: i295 
=== Succesors ===
=== Usages ===
i316 i315 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i291 y: i295  <|@  <|@
f <@~|@floating>@ <|@
tid i315 <|@
result v79|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i289 
y: i28 
=== Succesors ===
=== Usages ===
i316 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i289 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i316 <|@
result v80|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i315 
y: i289 
=== Succesors ===
=== Usages ===
i312 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i315 y: i289  <|@  <|@
f <@~|@floating>@ <|@
tid i320 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i518 
=== Succesors ===
=== Usages ===
i312 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i518  <|@  <|@
f <@~|@floating>@ <|@
tid i312 <|@
result v81|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i316 
y: i320 
=== Succesors ===
=== Usages ===
i325 i326 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i316 y: i320  <|@  <|@
f <@~|@floating>@ <|@
tid i325 <|@
result v82|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i312 
y: i28 
=== Succesors ===
=== Usages ===
i326 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i312 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i326 <|@
result v83|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i325 
y: i312 
=== Succesors ===
=== Usages ===
i324 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i325 y: i312  <|@  <|@
f <@~|@floating>@ <|@
tid i330 <|@
result v49|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i519 
=== Succesors ===
=== Usages ===
i324 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i519  <|@  <|@
f <@~|@floating>@ <|@
tid i324 <|@
result v84|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i326 
y: i330 
=== Succesors ===
=== Usages ===
i335 i336 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i326 y: i330  <|@  <|@
f <@~|@floating>@ <|@
tid i335 <|@
result v85|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i324 
y: i28 
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i324 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i336 <|@
result v86|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i335 
y: i324 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i335 y: i324  <|@  <|@
f <@~|@floating>@ <|@
tid i340 <|@
result v50|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i520 
=== Succesors ===
=== Usages ===
i334 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i520  <|@  <|@
f <@~|@floating>@ <|@
tid i334 <|@
result v87|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i336 
y: i340 
=== Succesors ===
=== Usages ===
i344 i345 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i336 y: i340  <|@  <|@
f <@~|@floating>@ <|@
tid i344 <|@
result v88|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i334 
y: i28 
=== Succesors ===
=== Usages ===
i345 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i334 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i345 <|@
result v89|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i344 
y: i334 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i344 y: i334  <|@  <|@
f <@~|@floating>@ <|@
tid i349 <|@
result v51|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i521 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i521  <|@  <|@
f <@~|@floating>@ <|@
tid i343 <|@
result v90|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i345 
y: i349 
=== Succesors ===
=== Usages ===
i355 i356 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i345 y: i349  <|@  <|@
f <@~|@floating>@ <|@
tid i355 <|@
result v91|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i343 
y: i28 
=== Succesors ===
=== Usages ===
i356 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i343 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i356 <|@
result v92|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i355 
y: i343 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i355 y: i343  <|@  <|@
f <@~|@floating>@ <|@
tid i360 <|@
result v52|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i522 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i522  <|@  <|@
f <@~|@floating>@ <|@
tid i354 <|@
result v93|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i356 
y: i360 
=== Succesors ===
=== Usages ===
i364 i365 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i356 y: i360  <|@  <|@
f <@~|@floating>@ <|@
tid i364 <|@
result v94|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i354 
y: i28 
=== Succesors ===
=== Usages ===
i365 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i354 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i365 <|@
result v95|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i364 
y: i354 
=== Succesors ===
=== Usages ===
i363 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i364 y: i354  <|@  <|@
f <@~|@floating>@ <|@
tid i369 <|@
result v53|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i523 
=== Succesors ===
=== Usages ===
i363 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i523  <|@  <|@
f <@~|@floating>@ <|@
tid i363 <|@
result v96|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i365 
y: i369 
=== Succesors ===
=== Usages ===
i373 i374 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i365 y: i369  <|@  <|@
f <@~|@floating>@ <|@
tid i373 <|@
result v97|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i363 
y: i28 
=== Succesors ===
=== Usages ===
i374 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i363 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i374 <|@
result v98|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i373 
y: i363 
=== Succesors ===
=== Usages ===
i372 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i373 y: i363  <|@  <|@
f <@~|@floating>@ <|@
tid i378 <|@
result v54|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i524 
=== Succesors ===
=== Usages ===
i372 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i524  <|@  <|@
f <@~|@floating>@ <|@
tid i372 <|@
result v99|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i374 
y: i378 
=== Succesors ===
=== Usages ===
i382 i383 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i374 y: i378  <|@  <|@
f <@~|@floating>@ <|@
tid i382 <|@
result v100|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i372 
y: i28 
=== Succesors ===
=== Usages ===
i383 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i372 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i383 <|@
result v101|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i382 
y: i372 
=== Succesors ===
=== Usages ===
i381 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i382 y: i372  <|@  <|@
f <@~|@floating>@ <|@
tid i387 <|@
result v102|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i525 
=== Succesors ===
=== Usages ===
i381 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i525  <|@  <|@
f <@~|@floating>@ <|@
tid i381 <|@
result v103|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i383 
y: i387 
=== Succesors ===
=== Usages ===
i157 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i383 y: i387  <|@  <|@
f <@~|@floating>@ <|@
tid i409 <|@
result v104|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 25]
stamp: i32
=== Inputs ===
x: i158 
y: i394 
=== Succesors ===
=== Usages ===
i158 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i158 y: i394  <|@  <|@
f <@*|@fixed>@ <|@
tid v154 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v147 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i525 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v147  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v103|DWORD, v104|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v149 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v147 
=== Succesors ===
next: v189 
=== Usages ===
=== Predecessor ===
v151 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v147 #next: v189  <|@  <|@
f <@*|@fixed>@ <|@
tid v189 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v170 
=== Predecessor ===
v149 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v37|DWORD, v38|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i180 <|@
result v105|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v170 
values: i157 i175 
=== Succesors ===
=== Usages ===
i178 i179 i63 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v170 values: i157 i175  <|@  <|@
f <@~|@floating>@ <|@
tid i181 <|@
result v106|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v170 
values: i158 i176 
=== Succesors ===
=== Usages ===
v171 i176 v569 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v170 values: i158 i176  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v170 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 38.21931645049644
loopType: POST_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v189 
=== Succesors ===
next: v174 
=== Usages ===
v172 v177 i180 i181 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v189 #next: v174  <|@  <|@
f <@~|@floating>@ <|@
tid v171 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@58a12e49
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i181 
y: i6 
=== Succesors ===
=== Usages ===
v174 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i181 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v174 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v171 
=== Succesors ===
trueSuccessor: v173 
falseSuccessor: v172 
=== Usages ===
=== Predecessor ===
v170 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v171 #trueSuccessor: v173 #falseSuccessor: v172  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v105|DWORD, v106|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v173 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i526 
=== Usages ===
=== Predecessor ===
v174 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i526  <|@  <|@
f <@~|@floating>@ <|@
tid v569 <|@
result [v1|QWORD[.] + v106|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: i181 
=== Succesors ===
=== Usages ===
i526 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: i181  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i526 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v569 
lastLocationAccess: - 
=== Succesors ===
next: v177 
=== Usages ===
i185 
=== Predecessor ===
v173 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v569 lastLocationAccess: - #next: v177  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
result v107|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i180 
y: i28 
=== Succesors ===
=== Usages ===
i179 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i180 y: i28  <|@  <|@
f <@~|@floating>@ <|@
tid i179 <|@
result v108|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 18]
stamp: i32
=== Inputs ===
x: i178 
y: i180 
=== Succesors ===
=== Usages ===
i175 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i178 y: i180  <|@  <|@
f <@~|@floating>@ <|@
tid i185 <|@
result v109|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
resultBits: 32
stamp: i32 [-128 - 127]
=== Inputs ===
value: i526 
=== Succesors ===
=== Usages ===
i175 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i526  <|@  <|@
f <@~|@floating>@ <|@
tid i175 <|@
result v110|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 23]
stamp: i32
=== Inputs ===
x: i179 
y: i185 
=== Succesors ===
=== Usages ===
i180 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i179 y: i185  <|@  <|@
f <@~|@floating>@ <|@
tid i176 <|@
result v111|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 25]
stamp: i32
=== Inputs ===
x: i181 
y: i24 
=== Succesors ===
=== Usages ===
i181 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i181 y: i24  <|@  <|@
f <@*|@fixed>@ <|@
tid v177 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:224) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v170 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i526 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v170  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v110|DWORD, v111|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v172 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v170 
=== Succesors ===
next: v59 
=== Usages ===
=== Predecessor ===
v174 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v170 #next: v59  <|@  <|@
f <@*|@fixed>@ <|@
tid v59 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v58 
=== Predecessor ===
v172 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v105|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v144 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v466 
=== Usages ===
=== Predecessor ===
v145 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v466  <|@  <|@
f <@~|@floating>@ <|@
tid j459 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j461 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i467 <|@
result int[-23067|0xffffffffffffa5e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
rawvalue: -23067
stableDimension: 0
stamp: i32 [-23067]
stampKind: i32
value: int[-23067|0xffffffffffffa5e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i460 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v466 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v456 
=== Predecessor ===
v144 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-23067|0xffffffffffffa5e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i460 <|@
result v112|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i32 [-25883 - -23067] bits:1...10xxxxxx11100101
valueDescription: i32
=== Inputs ===
merge: v456 
values: i464 i467 i464 
=== Succesors ===
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v456 values: i464 i467 i464  <|@  <|@
f <@~|@floating>@ <|@
tid j461 <|@
result v113|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: i64 [0 - 24] bits:0...0xx000
valueDescription: i64
=== Inputs ===
merge: v456 
values: j465 j459 j465 
=== Succesors ===
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v456 values: j465 j459 j465  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v456 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v463 v466 v490 
=== Succesors ===
next: v462 
=== Usages ===
i460 j461 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v463 v466 v490 #next: v462  <|@  <|@
f <@*|@fixed>@ <|@
tid v462 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:225) [bci: 22]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i460 
speculation: j461 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v456 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i460 speculation: j461  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
=== Succesors ===
next: v60 
=== Usages ===
=== Predecessor ===
v50 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v60  <|@  <|@
f <@*|@fixed>@ <|@
tid v60 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v58 
=== Predecessor ===
v48 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i63 <|@
result v114|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v58 
values: i180 i1 
=== Succesors ===
=== Usages ===
v27 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v58 values: i180 i1  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v58 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 31]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v59 v60 
=== Succesors ===
next: v27 
=== Usages ===
i63 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v59 v60 #next: v27  <|@  <|@
f <@*|@fixed>@ <|@
tid v27 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:227) [bci: 32]
stamp: void
=== Inputs ===
memoryMap: - 
result: i63 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v58 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i63  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v114|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v14|DWORD, v24|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr   -1  <|@ instruction [v27|DWORD, v28|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v33|DWORD, v32|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v28|DWORD, v27|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v103|DWORD, v104|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v37|DWORD, v38|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr   -1  <|@ instruction [v105|DWORD, v106|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v110|DWORD, v111|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v105|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v114|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-23067|0xffffffffffffa5e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v14|DWORD, v24|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr   -1  <|@ instruction [v27|DWORD, v28|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v33|DWORD, v32|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v28|DWORD, v27|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v103|DWORD, v104|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v37|DWORD, v38|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr   -1  <|@ instruction [v105|DWORD, v106|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v110|DWORD, v111|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v105|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v114|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-23067|0xffffffffffffa5e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v14|DWORD, v24|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr   -1  <|@ instruction [v27|DWORD, v28|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v33|DWORD, v32|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v28|DWORD, v27|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v103|DWORD, v104|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v37|DWORD, v38|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr   -1  <|@ instruction [v105|DWORD, v106|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v110|DWORD, v111|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v105|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v114|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-23067|0xffffffffffffa5e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   -1  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v14|DWORD, v24|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr   -1  <|@ instruction [v27|DWORD, v28|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v33|DWORD, v32|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v28|DWORD, v27|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v103|DWORD, v104|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v37|DWORD, v38|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr   -1  <|@ instruction [v105|DWORD, v106|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v110|DWORD, v111|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v105|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v114|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-23067|0xffffffffffffa5e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v112|DWORD, v113|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   16  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   18  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   20  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   22  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   24  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   26  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   28  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   30  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   32  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   34  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   36  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   38  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   40  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   42  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   50  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   52  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   62  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   66  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   68  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   70  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   72  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   90  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   94  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr  102  <|@ instruction JUMP ~[v14|DWORD, v24|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  104  <|@ instruction [v27|DWORD, v28|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr  112  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr  114  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  118  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr  120  <|@ instruction JUMP ~[v33|DWORD, v32|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  124  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr  126  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  128  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  130  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr  132  <|@ instruction JUMP ~[v28|DWORD, v27|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  134  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  142  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr  144  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  146  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  148  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  150  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  152  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  154  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  156  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  158  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  160  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  162  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  164  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  166  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  168  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  170  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  172  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  268  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr  272  <|@ instruction JUMP ~[v103|DWORD, v104|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  276  <|@ instruction JUMP ~[v37|DWORD, v38|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  278  <|@ instruction [v105|DWORD, v106|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  280  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  290  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr  292  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr  294  <|@ instruction JUMP ~[v110|DWORD, v111|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction JUMP ~[v105|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  300  <|@ instruction [v114|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  302  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr  304  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  308  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  316  <|@ instruction JUMP ~[int[-23067|0xffffffffffffa5e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  322  <|@ instruction [v112|DWORD, v113|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr  326  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   16  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   18  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   20  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   22  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   24  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   26  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   28  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   30  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   32  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   34  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   36  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   38  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   40  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   42  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   50  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   52  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   62  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   66  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   68  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   70  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   72  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   90  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   94  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr  102  <|@ instruction JUMP ~[v14|DWORD, v24|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  104  <|@ instruction [v27|DWORD, v28|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr  112  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr  114  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  118  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr  120  <|@ instruction JUMP ~[v33|DWORD, v32|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  124  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr  126  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  128  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  130  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr  132  <|@ instruction JUMP ~[v28|DWORD, v27|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  134  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  142  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr  144  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  146  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  148  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  150  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  152  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  154  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  156  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  158  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  160  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  162  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  164  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  166  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  168  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  170  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  172  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  268  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr  272  <|@ instruction JUMP ~[v103|DWORD, v104|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  276  <|@ instruction JUMP ~[v37|DWORD, v38|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  278  <|@ instruction [v105|DWORD, v106|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  280  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  290  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr  292  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr  294  <|@ instruction JUMP ~[v110|DWORD, v111|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction JUMP ~[v105|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  300  <|@ instruction [v114|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  302  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr  304  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  308  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  316  <|@ instruction JUMP ~[int[-23067|0xffffffffffffa5e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  322  <|@ instruction [v112|DWORD, v113|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr  326  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|d fixed "[rax|d]" rax|d v114|d [0, 1[[302, 304[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[v0|d]" v0|d rsi|d [6, 91[[306, 309[[310, 329[6 MustHaveRegister 88 MustHaveRegister 90 ShouldHaveRegister 308 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[v1|q]" v1|q rdx|q [8, 296[[310, 329[8 MustHaveRegister 48 MustHaveRegister 92 MustHaveRegister 114 MustHaveRegister 121 LiveAtLoopEnd 140 MustHaveRegister 144 MustHaveRegister 146 MustHaveRegister 148 MustHaveRegister 150 MustHaveRegister 152 MustHaveRegister 154 MustHaveRegister 156 MustHaveRegister 158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister 168 MustHaveRegister 170 MustHaveRegister 266 MustHaveRegister 273 LiveAtLoopEnd 288 MustHaveRegister 295 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d rcx|d [10, 96[[310, 329[10 MustHaveRegister 42 ShouldHaveRegister 44 ShouldHaveRegister 50 ShouldHaveRegister 84 ShouldHaveRegister 92 MustHaveRegister 96 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[v3|d]" v3|d r8|d [12, 86[[310, 329[12 MustHaveRegister 42 ShouldHaveRegister  "NoSpillStore"
  v4|q QWORD "[v4|q]" v4|q -1 [14, 22[14 MustHaveRegister 16 MustHaveRegister 18 MustHaveRegister 20 MustHaveRegister 22 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[v5|d]" v5|d -1 [16, 40[16 MustHaveRegister 24 MustHaveRegister 28 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d -1 [18, 38[18 MustHaveRegister 32 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[v7|d]" v7|d -1 [20, 34[20 MustHaveRegister 34 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[v8|d]" v8|d -1 [22, 36[22 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[v9|q]" v9|q -1 [24, 30[24 MustHaveRegister 26 MustHaveRegister 30 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[v10|q]" v10|q -1 [26, 28[26 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[v11|q]" v11|q v9|q [30, 32[30 MustHaveRegister 32 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[v12|d]" v12|d v2|d [42, 296[42 MustHaveRegister 44 MustHaveRegister 52 MustHaveRegister 62 MustHaveRegister 98 MustHaveRegister 100 ShouldHaveRegister 124 MustHaveRegister 126 ShouldHaveRegister 280 MustHaveRegister 295 LiveAtLoopEnd  "NoSpillStore"
  v13|d DWORD "[v13|d]" v13|d -1 [48, 84[48 MustHaveRegister 70 ShouldHaveRegister 76 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[v14|d]" v14|d v2|d [50, 103[50 MustHaveRegister 52 ShouldHaveRegister 60 ShouldHaveRegister 62 ShouldHaveRegister 76 ShouldHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v15|q QWORD "[v15|q]" v15|q -1 [60, 66[60 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[v16|d]" v16|d v12|d [62, 64[62 MustHaveRegister 64 ShouldHaveRegister  "NoSpillStore"
  v17|q QWORD "[v17|q]" v17|q -1 [64, 66[64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v18|q QWORD "[v18|q]" v18|q v15|q [66, 68[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v19|q QWORD "[v19|q]" v19|q v18|q [68, 72[68 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v20|q QWORD "[v20|q]" v20|q -1 [70, 72[70 MustHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[v21|d]" v21|d v0|d [88, 90[88 MustHaveRegister 90 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[v22|d]" v22|d v21|d [90, 94[90 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[v23|d]" v23|d -1 [92, 94[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[v24|d]" v24|d v22|d [94, 103[94 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[v25|d]" v25|d -1 [96, 101[96 MustHaveRegister 98 ShouldHaveRegister 100 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[v26|d]" v26|d v12|d [100, 122[100 MustHaveRegister 106 MustHaveRegister 121 LiveAtLoopEnd  "NoSpillStore"
  v27|d DWORD "[v27|d]" v27|d v14|d [104, 118[[122, 133[106 ShouldHaveRegister 114 MustHaveRegister 118 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[v28|d]" v28|d v24|d [104, 113[[122, 133[110 MustHaveRegister 112 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v29|d DWORD "[v29|d]" v29|d v28|d [110, 112[110 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[v30|d]" v30|d v29|d [112, 116[112 MustHaveRegister 116 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[v31|d]" v31|d -1 [114, 116[114 MustHaveRegister 116 ShouldHaveRegister  "NoSpillStore"
  v32|d DWORD "[v32|d]" v32|d v30|d [116, 121[116 MustHaveRegister 120 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[v33|d]" v33|d v27|d [118, 121[118 MustHaveRegister 120 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[v34|d]" v34|d -1 [124, 130[124 MustHaveRegister 130 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[v35|d]" v35|d v34|d [130, 274[130 MustHaveRegister 136 MustHaveRegister 273 LiveAtLoopEnd  "NoSpillStore"
  v36|d DWORD "[v36|d]" v36|d -1 [128, 131[128 MustHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[v37|d]" v37|d v103|d [134, 175[[274, 277[172 MustHaveRegister 174 ShouldHaveRegister 276 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[v38|d]" v38|d v104|d [134, 270[[274, 277[136 ShouldHaveRegister 140 MustHaveRegister 142 ShouldHaveRegister 270 MustHaveRegister 276 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[v39|d]" v39|d -1 [140, 176[140 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v40|q QWORD "[v40|q]" v40|q -1 [142, 266[142 MustHaveRegister 144 MustHaveRegister 146 MustHaveRegister 148 MustHaveRegister 150 MustHaveRegister 152 MustHaveRegister 154 MustHaveRegister 156 MustHaveRegister 158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister 168 MustHaveRegister 170 MustHaveRegister 266 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[v41|d]" v41|d -1 [144, 182[144 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v42|d DWORD "[v42|d]" v42|d -1 [146, 188[146 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[v43|d]" v43|d -1 [148, 194[148 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v44|d DWORD "[v44|d]" v44|d -1 [150, 200[150 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[v45|d]" v45|d -1 [152, 206[152 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[v46|d]" v46|d -1 [154, 212[154 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[v47|d]" v47|d -1 [156, 218[156 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[v48|d]" v48|d -1 [158, 224[158 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[v49|d]" v49|d -1 [160, 230[160 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v50|d DWORD "[v50|d]" v50|d -1 [162, 236[162 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v51|d DWORD "[v51|d]" v51|d -1 [164, 242[164 MustHaveRegister 242 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[v52|d]" v52|d -1 [166, 248[166 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v53|d DWORD "[v53|d]" v53|d -1 [168, 254[168 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v54|d DWORD "[v54|d]" v54|d -1 [170, 260[170 MustHaveRegister 260 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[v55|d]" v55|d v37|d [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[v56|d]" v56|d v55|d [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[v57|d]" v57|d v56|d [176, 181[176 MustHaveRegister 178 MustHaveRegister 180 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[v58|d]" v58|d v57|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[v59|d]" v59|d v58|d [180, 182[180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v60|d DWORD "[v60|d]" v60|d v59|d [182, 187[182 MustHaveRegister 184 MustHaveRegister 186 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[v61|d]" v61|d v60|d [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[v62|d]" v62|d v61|d [186, 188[186 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[v63|d]" v63|d v62|d [188, 193[188 MustHaveRegister 190 MustHaveRegister 192 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[v64|d]" v64|d v63|d [190, 192[190 MustHaveRegister 192 MustHaveRegister  "NoSpillStore"
  v65|d DWORD "[v65|d]" v65|d v64|d [192, 194[192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v66|d DWORD "[v66|d]" v66|d v65|d [194, 199[194 MustHaveRegister 196 MustHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[v67|d]" v67|d v66|d [196, 198[196 MustHaveRegister 198 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[v68|d]" v68|d v67|d [198, 200[198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v69|d DWORD "[v69|d]" v69|d v68|d [200, 205[200 MustHaveRegister 202 MustHaveRegister 204 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[v70|d]" v70|d v69|d [202, 204[202 MustHaveRegister 204 MustHaveRegister  "NoSpillStore"
  v71|d DWORD "[v71|d]" v71|d v70|d [204, 206[204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v72|d DWORD "[v72|d]" v72|d v71|d [206, 211[206 MustHaveRegister 208 MustHaveRegister 210 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[v73|d]" v73|d v72|d [208, 210[208 MustHaveRegister 210 MustHaveRegister  "NoSpillStore"
  v74|d DWORD "[v74|d]" v74|d v73|d [210, 212[210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v75|d DWORD "[v75|d]" v75|d v74|d [212, 217[212 MustHaveRegister 214 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[v76|d]" v76|d v75|d [214, 216[214 MustHaveRegister 216 MustHaveRegister  "NoSpillStore"
  v77|d DWORD "[v77|d]" v77|d v76|d [216, 218[216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[v78|d]" v78|d v77|d [218, 223[218 MustHaveRegister 220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[v79|d]" v79|d v78|d [220, 222[220 MustHaveRegister 222 MustHaveRegister  "NoSpillStore"
  v80|d DWORD "[v80|d]" v80|d v79|d [222, 224[222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v81|d DWORD "[v81|d]" v81|d v80|d [224, 229[224 MustHaveRegister 226 MustHaveRegister 228 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[v82|d]" v82|d v81|d [226, 228[226 MustHaveRegister 228 MustHaveRegister  "NoSpillStore"
  v83|d DWORD "[v83|d]" v83|d v82|d [228, 230[228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v84|d DWORD "[v84|d]" v84|d v83|d [230, 235[230 MustHaveRegister 232 MustHaveRegister 234 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[v85|d]" v85|d v84|d [232, 234[232 MustHaveRegister 234 MustHaveRegister  "NoSpillStore"
  v86|d DWORD "[v86|d]" v86|d v85|d [234, 236[234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v87|d DWORD "[v87|d]" v87|d v86|d [236, 241[236 MustHaveRegister 238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[v88|d]" v88|d v87|d [238, 240[238 MustHaveRegister 240 MustHaveRegister  "NoSpillStore"
  v89|d DWORD "[v89|d]" v89|d v88|d [240, 242[240 MustHaveRegister 242 ShouldHaveRegister  "NoSpillStore"
  v90|d DWORD "[v90|d]" v90|d v89|d [242, 247[242 MustHaveRegister 244 MustHaveRegister 246 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[v91|d]" v91|d v90|d [244, 246[244 MustHaveRegister 246 MustHaveRegister  "NoSpillStore"
  v92|d DWORD "[v92|d]" v92|d v91|d [246, 248[246 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v93|d DWORD "[v93|d]" v93|d v92|d [248, 253[248 MustHaveRegister 250 MustHaveRegister 252 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[v94|d]" v94|d v93|d [250, 252[250 MustHaveRegister 252 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[v95|d]" v95|d v94|d [252, 254[252 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v96|d DWORD "[v96|d]" v96|d v95|d [254, 259[254 MustHaveRegister 256 MustHaveRegister 258 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[v97|d]" v97|d v96|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v98|d DWORD "[v98|d]" v98|d v97|d [258, 260[258 MustHaveRegister 260 ShouldHaveRegister  "NoSpillStore"
  v99|d DWORD "[v99|d]" v99|d v98|d [260, 265[260 MustHaveRegister 262 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v100|d DWORD "[v100|d]" v100|d v99|d [262, 264[262 MustHaveRegister 264 MustHaveRegister  "NoSpillStore"
  v101|d DWORD "[v101|d]" v101|d v100|d [264, 268[264 MustHaveRegister 268 ShouldHaveRegister  "NoSpillStore"
  v102|d DWORD "[v102|d]" v102|d -1 [266, 268[266 MustHaveRegister 268 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[v103|d]" v103|d v101|d [268, 273[268 MustHaveRegister 272 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[v104|d]" v104|d v38|d [270, 273[270 MustHaveRegister 272 ShouldHaveRegister  "NoSpillStore"
  v105|d DWORD "[v105|d]" v105|d v37|d [278, 287[[296, 299[284 MustHaveRegister 286 ShouldHaveRegister 298 ShouldHaveRegister  "NoSpillStore"
  v106|d DWORD "[v106|d]" v106|d v38|d [278, 292[280 ShouldHaveRegister 288 MustHaveRegister 292 ShouldHaveRegister  "NoSpillStore"
  v107|d DWORD "[v107|d]" v107|d v105|d [284, 286[284 MustHaveRegister 286 MustHaveRegister  "NoSpillStore"
  v108|d DWORD "[v108|d]" v108|d v107|d [286, 290[286 MustHaveRegister 290 ShouldHaveRegister  "NoSpillStore"
  v109|d DWORD "[v109|d]" v109|d -1 [288, 290[288 MustHaveRegister 290 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[v110|d]" v110|d v108|d [290, 295[290 MustHaveRegister 294 ShouldHaveRegister  "NoSpillStore"
  v111|d DWORD "[v111|d]" v111|d v106|d [292, 295[292 MustHaveRegister 294 ShouldHaveRegister  "NoSpillStore"
  v112|d DWORD "[v112|d]" v112|d -1 [322, 324[324 MustHaveRegister  "NoSpillStore"
  v113|q QWORD "[v113|q]" v113|q -1 [322, 326[326 MustHaveRegister  "NoSpillStore"
  v114|d DWORD "[v114|d]" v114|d v105|d [300, 302[302 ShouldHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|d fixed "[rax|d]" rax|d v114|d [0, 1[[302, 304[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [6, 91[[306, 309[[310, 329[6 MustHaveRegister 88 MustHaveRegister 90 ShouldHaveRegister 308 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [8, 296[[310, 329[8 MustHaveRegister 48 MustHaveRegister 92 MustHaveRegister 114 MustHaveRegister 121 LiveAtLoopEnd 140 MustHaveRegister 144 MustHaveRegister 146 MustHaveRegister 148 MustHaveRegister 150 MustHaveRegister 152 MustHaveRegister 154 MustHaveRegister 156 MustHaveRegister 158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister 168 MustHaveRegister 170 MustHaveRegister 266 MustHaveRegister 273 LiveAtLoopEnd 288 MustHaveRegister 295 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 96[[310, 329[10 MustHaveRegister 42 ShouldHaveRegister 44 ShouldHaveRegister 50 ShouldHaveRegister 84 ShouldHaveRegister 92 MustHaveRegister 96 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 86[[310, 329[12 MustHaveRegister 42 ShouldHaveRegister  "NoSpillStore"
  v4|q QWORD "[rax|q]" v4|q -1 [14, 22[14 MustHaveRegister 16 MustHaveRegister 18 MustHaveRegister 20 MustHaveRegister 22 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r10|d]" v5|d -1 [16, 40[16 MustHaveRegister 24 MustHaveRegister 28 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d -1 [18, 38[18 MustHaveRegister 32 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[r9|d]" v7|d -1 [20, 34[20 MustHaveRegister 34 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rax|d]" v8|d -1 [22, 36[22 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [24, 30[24 MustHaveRegister 26 MustHaveRegister 30 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[rdi|q]" v10|q -1 [26, 28[26 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rbx|q]" v11|q v9|q [30, 32[30 MustHaveRegister 32 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rax|d]" v12|d v2|d [42, 134[42 MustHaveRegister 44 MustHaveRegister 52 MustHaveRegister 62 MustHaveRegister 98 MustHaveRegister 100 ShouldHaveRegister 124 MustHaveRegister 126 ShouldHaveRegister  "SpillInDominator"
  v13|d DWORD "[r10|d]" v13|d -1 [48, 84[48 MustHaveRegister 70 ShouldHaveRegister 76 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r11|d]" v14|d v2|d [50, 103[50 MustHaveRegister 52 ShouldHaveRegister 60 ShouldHaveRegister 62 ShouldHaveRegister 76 ShouldHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v15|q QWORD "[r9|q]" v15|q -1 [60, 66[60 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[rbx|d]" v16|d v12|d [62, 64[62 MustHaveRegister 64 ShouldHaveRegister  "NoSpillStore"
  v17|q QWORD "[rbx|q]" v17|q -1 [64, 66[64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v18|q QWORD "[r9|q]" v18|q v15|q [66, 68[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v19|q QWORD "[r9|q]" v19|q v18|q [68, 72[68 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v20|q QWORD "[rbx|q]" v20|q -1 [70, 72[70 MustHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[r10|d]" v21|d v0|d [88, 90[88 MustHaveRegister 90 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[r10|d]" v22|d v21|d [90, 94[90 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[r8|d]" v23|d -1 [92, 94[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r10|d]" v24|d v22|d [94, 103[94 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r8|d]" v25|d -1 [96, 101[96 MustHaveRegister 98 ShouldHaveRegister 100 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[r9|d]" v26|d v12|d [100, 122[100 MustHaveRegister 106 MustHaveRegister 121 LiveAtLoopEnd  "NoSpillStore"
  v27|d DWORD "[r11|d]" v27|d v14|d [104, 118[[122, 133[106 ShouldHaveRegister 114 MustHaveRegister 118 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d v24|d [104, 113[[122, 133[110 MustHaveRegister 112 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v29|d DWORD "[r8|d]" v29|d v28|d [110, 112[110 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d v29|d [112, 116[112 MustHaveRegister 116 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r10|d]" v31|d -1 [114, 116[114 MustHaveRegister 116 ShouldHaveRegister  "NoSpillStore"
  v32|d DWORD "[r8|d]" v32|d v30|d [116, 121[116 MustHaveRegister 120 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[r11|d]" v33|d v27|d [118, 121[118 MustHaveRegister 120 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[r8|d]" v34|d -1 [124, 130[124 MustHaveRegister 130 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[r8|d]" v35|d v34|d [130, 138[130 MustHaveRegister 136 MustHaveRegister  "SpillInDominator"
  v36|d DWORD "[r9|d]" v36|d -1 [128, 131[128 MustHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[r10|d]" v37|d v103|d [134, 175[[274, 277[172 MustHaveRegister 174 ShouldHaveRegister 276 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[r11|d]" v38|d v104|d [134, 159[136 ShouldHaveRegister 140 MustHaveRegister 142 ShouldHaveRegister  "OneSpillStore"
  v39|d DWORD "[r9|d]" v39|d -1 [140, 176[140 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v40|q QWORD "[rcx|q]" v40|q -1 [142, 171[142 MustHaveRegister 144 MustHaveRegister 146 MustHaveRegister 148 MustHaveRegister 150 MustHaveRegister 152 MustHaveRegister 154 MustHaveRegister 156 MustHaveRegister 158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister 168 MustHaveRegister 170 MustHaveRegister  "OneSpillStore"
  v41|d DWORD "[rbx|d]" v41|d -1 [144, 182[144 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v42|d DWORD "[rdi|d]" v42|d -1 [146, 188[146 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[rsi|d]" v43|d -1 [148, 194[148 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v44|d DWORD "[rbp|d]" v44|d -1 [150, 200[150 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r13|d]" v45|d -1 [152, 206[152 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[r14|d]" v46|d -1 [154, 212[154 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[rax|d]" v47|d -1 [156, 218[156 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[r8|d]" v48|d -1 [158, 224[158 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[r11|d]" v49|d -1 [160, 161[160 MustHaveRegister  "OneSpillStore"
  v50|d DWORD "[r11|d]" v50|d -1 [162, 163[162 MustHaveRegister  "OneSpillStore"
  v51|d DWORD "[r11|d]" v51|d -1 [164, 165[164 MustHaveRegister  "OneSpillStore"
  v52|d DWORD "[r11|d]" v52|d -1 [166, 167[166 MustHaveRegister  "OneSpillStore"
  v53|d DWORD "[r11|d]" v53|d -1 [168, 169[168 MustHaveRegister  "OneSpillStore"
  v54|d DWORD "[r11|d]" v54|d -1 [170, 260[170 MustHaveRegister 260 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[rcx|d]" v55|d v37|d [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[rcx|d]" v56|d v55|d [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[rcx|d]" v57|d v56|d [176, 181[176 MustHaveRegister 178 MustHaveRegister 180 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[r10|d]" v58|d v57|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[r10|d]" v59|d v58|d [180, 182[180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v60|d DWORD "[r10|d]" v60|d v59|d [182, 187[182 MustHaveRegister 184 MustHaveRegister 186 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r9|d]" v61|d v60|d [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r9|d]" v62|d v61|d [186, 188[186 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r9|d]" v63|d v62|d [188, 193[188 MustHaveRegister 190 MustHaveRegister 192 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d v63|d [190, 192[190 MustHaveRegister 192 MustHaveRegister  "NoSpillStore"
  v65|d DWORD "[r10|d]" v65|d v64|d [192, 194[192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v66|d DWORD "[r10|d]" v66|d v65|d [194, 199[194 MustHaveRegister 196 MustHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r9|d]" v67|d v66|d [196, 198[196 MustHaveRegister 198 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[r9|d]" v68|d v67|d [198, 200[198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v69|d DWORD "[r9|d]" v69|d v68|d [200, 205[200 MustHaveRegister 202 MustHaveRegister 204 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r10|d]" v70|d v69|d [202, 204[202 MustHaveRegister 204 MustHaveRegister  "NoSpillStore"
  v71|d DWORD "[r10|d]" v71|d v70|d [204, 206[204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v72|d DWORD "[r10|d]" v72|d v71|d [206, 211[206 MustHaveRegister 208 MustHaveRegister 210 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r9|d]" v73|d v72|d [208, 210[208 MustHaveRegister 210 MustHaveRegister  "NoSpillStore"
  v74|d DWORD "[r9|d]" v74|d v73|d [210, 212[210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v75|d DWORD "[r9|d]" v75|d v74|d [212, 217[212 MustHaveRegister 214 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r10|d]" v76|d v75|d [214, 216[214 MustHaveRegister 216 MustHaveRegister  "NoSpillStore"
  v77|d DWORD "[r10|d]" v77|d v76|d [216, 218[216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[r10|d]" v78|d v77|d [218, 223[218 MustHaveRegister 220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[rax|d]" v79|d v78|d [220, 222[220 MustHaveRegister 222 MustHaveRegister  "NoSpillStore"
  v80|d DWORD "[rax|d]" v80|d v79|d [222, 224[222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v81|d DWORD "[rax|d]" v81|d v80|d [224, 229[224 MustHaveRegister 226 MustHaveRegister 228 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[r10|d]" v82|d v81|d [226, 228[226 MustHaveRegister 228 MustHaveRegister  "NoSpillStore"
  v83|d DWORD "[r10|d]" v83|d v82|d [228, 230[228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v84|d DWORD "[r10|d]" v84|d v83|d [230, 235[230 MustHaveRegister 232 MustHaveRegister 234 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[rax|d]" v85|d v84|d [232, 234[232 MustHaveRegister 234 MustHaveRegister  "NoSpillStore"
  v86|d DWORD "[rax|d]" v86|d v85|d [234, 236[234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v87|d DWORD "[rax|d]" v87|d v86|d [236, 241[236 MustHaveRegister 238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[r10|d]" v88|d v87|d [238, 240[238 MustHaveRegister 240 MustHaveRegister  "NoSpillStore"
  v89|d DWORD "[r10|d]" v89|d v88|d [240, 242[240 MustHaveRegister 242 ShouldHaveRegister  "NoSpillStore"
  v90|d DWORD "[r10|d]" v90|d v89|d [242, 247[242 MustHaveRegister 244 MustHaveRegister 246 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[rax|d]" v91|d v90|d [244, 246[244 MustHaveRegister 246 MustHaveRegister  "NoSpillStore"
  v92|d DWORD "[rax|d]" v92|d v91|d [246, 248[246 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v93|d DWORD "[rax|d]" v93|d v92|d [248, 253[248 MustHaveRegister 250 MustHaveRegister 252 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[r10|d]" v94|d v93|d [250, 252[250 MustHaveRegister 252 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[r10|d]" v95|d v94|d [252, 254[252 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v96|d DWORD "[r10|d]" v96|d v95|d [254, 259[254 MustHaveRegister 256 MustHaveRegister 258 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[rax|d]" v97|d v96|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v98|d DWORD "[rax|d]" v98|d v97|d [258, 260[258 MustHaveRegister 260 ShouldHaveRegister  "NoSpillStore"
  v99|d DWORD "[rax|d]" v99|d v98|d [260, 265[260 MustHaveRegister 262 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v100|d DWORD "[r10|d]" v100|d v99|d [262, 264[262 MustHaveRegister 264 MustHaveRegister  "NoSpillStore"
  v101|d DWORD "[r10|d]" v101|d v100|d [264, 268[264 MustHaveRegister 268 ShouldHaveRegister  "NoSpillStore"
  v102|d DWORD "[rax|d]" v102|d -1 [266, 268[266 MustHaveRegister 268 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[r10|d]" v103|d v101|d [268, 273[268 MustHaveRegister 272 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[r11|d]" v104|d v38|d [270, 273[270 MustHaveRegister 272 ShouldHaveRegister  "NoSpillStore"
  v105|d DWORD "[r10|d]" v105|d v37|d [278, 287[[296, 299[284 MustHaveRegister 286 ShouldHaveRegister 298 ShouldHaveRegister  "NoSpillStore"
  v106|d DWORD "[r11|d]" v106|d v38|d [278, 292[280 ShouldHaveRegister 288 MustHaveRegister 292 ShouldHaveRegister  "NoSpillStore"
  v107|d DWORD "[r8|d]" v107|d v105|d [284, 286[284 MustHaveRegister 286 MustHaveRegister  "NoSpillStore"
  v108|d DWORD "[r8|d]" v108|d v107|d [286, 290[286 MustHaveRegister 290 ShouldHaveRegister  "NoSpillStore"
  v109|d DWORD "[r10|d]" v109|d -1 [288, 290[288 MustHaveRegister 290 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[r8|d]" v110|d v108|d [290, 295[290 MustHaveRegister 294 ShouldHaveRegister  "NoSpillStore"
  v111|d DWORD "[r11|d]" v111|d v106|d [292, 295[292 MustHaveRegister 294 ShouldHaveRegister  "NoSpillStore"
  v112|d DWORD "[r10|d]" v112|d -1 [322, 324[324 MustHaveRegister  "NoSpillStore"
  v113|q QWORD "[r11|q]" v113|q -1 [322, 326[326 MustHaveRegister  "NoSpillStore"
  v114|d DWORD "[r10|d]" v114|d v105|d [300, 302[302 ShouldHaveRegister  "NoSpillStore"
  v115|d DWORD "[rax|d]" v12|d v12|d [278, 296[280 MustHaveRegister 295 LiveAtLoopEnd  "SpillInDominator"
  v116|d DWORD "[vstack:0|d]" v12|d v12|d [134, 278[ "SpillInDominator"
  v117|d DWORD "[vstack:1|d]" v35|d v35|d [138, 274[273 LiveAtLoopEnd  "SpillInDominator"
  v118|d DWORD "[r11|d]" v38|d v38|d [269, 270[[274, 277[270 MustHaveRegister 276 ShouldHaveRegister  "OneSpillStore"
  v119|d DWORD "[vstack:2|d]" v38|d v38|d [159, 269[ "OneSpillStore"
  v120|d DWORD "[vstack:3|d]" v49|d v49|d [161, 230[230 ShouldHaveRegister  "OneSpillStore"
  v121|d DWORD "[vstack:4|d]" v50|d v50|d [163, 236[236 ShouldHaveRegister  "OneSpillStore"
  v122|d DWORD "[vstack:5|d]" v51|d v51|d [165, 242[242 ShouldHaveRegister  "OneSpillStore"
  v123|d DWORD "[vstack:6|d]" v52|d v52|d [167, 248[248 ShouldHaveRegister  "OneSpillStore"
  v124|d DWORD "[vstack:7|d]" v53|d v53|d [169, 254[254 ShouldHaveRegister  "OneSpillStore"
  v125|q QWORD "[rcx|q]" v40|q v40|q [265, 266[266 MustHaveRegister  "OneSpillStore"
  v126|q QWORD "[vstack:8|q]" v40|q v40|q [171, 265[ "OneSpillStore"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   16  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   18  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   20  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   22  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   24  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   26  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   28  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   30  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   32  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   34  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   36  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   38  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   40  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   42  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   50  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   52  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   62  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   66  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   68  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   70  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   72  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   90  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   94  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr  102  <|@ instruction JUMP ~[v14|DWORD, v24|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  104  <|@ instruction [v27|DWORD, v28|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr  112  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr  114  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  118  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr  120  <|@ instruction JUMP ~[v33|DWORD, v32|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  124  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr  126  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  128  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  130  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr  132  <|@ instruction JUMP ~[v28|DWORD, v27|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  134  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  142  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr  144  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  146  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  148  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  150  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  152  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  154  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  156  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  158  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v119|DWORD = MOVE v38|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  160  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE v49|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = MOVE v50|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  164  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v122|DWORD = MOVE v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  166  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v123|DWORD = MOVE v52|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  168  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v124|DWORD = MOVE v53|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  170  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v126|QWORD = MOVE v40|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  172  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v125|QWORD = MOVE v126|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  268  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|DWORD = MOVE v119|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  270  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr  272  <|@ instruction JUMP ~[v103|DWORD, v104|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  276  <|@ instruction JUMP ~[v37|DWORD, v38|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  278  <|@ instruction [v105|DWORD, v106|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  280  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  290  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr  292  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr  294  <|@ instruction JUMP ~[v110|DWORD, v111|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction JUMP ~[v105|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  300  <|@ instruction [v114|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  302  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr  304  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  308  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  316  <|@ instruction JUMP ~[int[-23067|0xffffffffffffa5e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  322  <|@ instruction [v112|DWORD, v113|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr  326  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|d fixed "[rax|d]" rax|d v114|d [0, 1[[302, 304[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [6, 91[[306, 309[[310, 329[6 MustHaveRegister 88 MustHaveRegister 90 ShouldHaveRegister 308 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [8, 296[[310, 329[8 MustHaveRegister 48 MustHaveRegister 92 MustHaveRegister 114 MustHaveRegister 121 LiveAtLoopEnd 140 MustHaveRegister 144 MustHaveRegister 146 MustHaveRegister 148 MustHaveRegister 150 MustHaveRegister 152 MustHaveRegister 154 MustHaveRegister 156 MustHaveRegister 158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister 168 MustHaveRegister 170 MustHaveRegister 266 MustHaveRegister 273 LiveAtLoopEnd 288 MustHaveRegister 295 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 96[[310, 329[10 MustHaveRegister 42 ShouldHaveRegister 44 ShouldHaveRegister 50 ShouldHaveRegister 84 ShouldHaveRegister 92 MustHaveRegister 96 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 86[[310, 329[12 MustHaveRegister 42 ShouldHaveRegister  "NoSpillStore"
  v4|q QWORD "[rax|q]" v4|q -1 [14, 22[14 MustHaveRegister 16 MustHaveRegister 18 MustHaveRegister 20 MustHaveRegister 22 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r10|d]" v5|d -1 [16, 40[16 MustHaveRegister 24 MustHaveRegister 28 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d -1 [18, 38[18 MustHaveRegister 32 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[r9|d]" v7|d -1 [20, 34[20 MustHaveRegister 34 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rax|d]" v8|d -1 [22, 36[22 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [24, 30[24 MustHaveRegister 26 MustHaveRegister 30 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[rdi|q]" v10|q -1 [26, 28[26 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rbx|q]" v11|q v9|q [30, 32[30 MustHaveRegister 32 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rax|d]" v12|d v2|d [42, 134[42 MustHaveRegister 44 MustHaveRegister 52 MustHaveRegister 62 MustHaveRegister 98 MustHaveRegister 100 ShouldHaveRegister 124 MustHaveRegister 126 ShouldHaveRegister  "SpillInDominator"
  v13|d DWORD "[r10|d]" v13|d -1 [48, 84[48 MustHaveRegister 70 ShouldHaveRegister 76 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r11|d]" v14|d v2|d [50, 103[50 MustHaveRegister 52 ShouldHaveRegister 60 ShouldHaveRegister 62 ShouldHaveRegister 76 ShouldHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v15|q QWORD "[r9|q]" v15|q -1 [60, 66[60 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[rbx|d]" v16|d v12|d [62, 64[62 MustHaveRegister 64 ShouldHaveRegister  "NoSpillStore"
  v17|q QWORD "[rbx|q]" v17|q -1 [64, 66[64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v18|q QWORD "[r9|q]" v18|q v15|q [66, 68[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v19|q QWORD "[r9|q]" v19|q v18|q [68, 72[68 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v20|q QWORD "[rbx|q]" v20|q -1 [70, 72[70 MustHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[r10|d]" v21|d v0|d [88, 90[88 MustHaveRegister 90 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[r10|d]" v22|d v21|d [90, 94[90 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[r8|d]" v23|d -1 [92, 94[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r10|d]" v24|d v22|d [94, 103[94 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r8|d]" v25|d -1 [96, 101[96 MustHaveRegister 98 ShouldHaveRegister 100 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[r9|d]" v26|d v12|d [100, 122[100 MustHaveRegister 106 MustHaveRegister 121 LiveAtLoopEnd  "NoSpillStore"
  v27|d DWORD "[r11|d]" v27|d v14|d [104, 118[[122, 133[106 ShouldHaveRegister 114 MustHaveRegister 118 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d v24|d [104, 113[[122, 133[110 MustHaveRegister 112 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v29|d DWORD "[r8|d]" v29|d v28|d [110, 112[110 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d v29|d [112, 116[112 MustHaveRegister 116 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r10|d]" v31|d -1 [114, 116[114 MustHaveRegister 116 ShouldHaveRegister  "NoSpillStore"
  v32|d DWORD "[r8|d]" v32|d v30|d [116, 121[116 MustHaveRegister 120 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[r11|d]" v33|d v27|d [118, 121[118 MustHaveRegister 120 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[r8|d]" v34|d -1 [124, 130[124 MustHaveRegister 130 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[r8|d]" v35|d v34|d [130, 138[130 MustHaveRegister 136 MustHaveRegister  "StoreAtDefinition"
  v36|d DWORD "[r9|d]" v36|d -1 [128, 131[128 MustHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[r10|d]" v37|d v103|d [134, 175[[274, 277[172 MustHaveRegister 174 ShouldHaveRegister 276 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[r11|d]" v38|d v104|d [134, 159[136 ShouldHaveRegister 140 MustHaveRegister 142 ShouldHaveRegister  "OneSpillStore"
  v39|d DWORD "[r9|d]" v39|d -1 [140, 176[140 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v40|q QWORD "[rcx|q]" v40|q -1 [142, 171[142 MustHaveRegister 144 MustHaveRegister 146 MustHaveRegister 148 MustHaveRegister 150 MustHaveRegister 152 MustHaveRegister 154 MustHaveRegister 156 MustHaveRegister 158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister 168 MustHaveRegister 170 MustHaveRegister  "OneSpillStore"
  v41|d DWORD "[rbx|d]" v41|d -1 [144, 182[144 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v42|d DWORD "[rdi|d]" v42|d -1 [146, 188[146 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[rsi|d]" v43|d -1 [148, 194[148 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v44|d DWORD "[rbp|d]" v44|d -1 [150, 200[150 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r13|d]" v45|d -1 [152, 206[152 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[r14|d]" v46|d -1 [154, 212[154 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[rax|d]" v47|d -1 [156, 218[156 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[r8|d]" v48|d -1 [158, 224[158 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[r11|d]" v49|d -1 [160, 161[160 MustHaveRegister  "OneSpillStore"
  v50|d DWORD "[r11|d]" v50|d -1 [162, 163[162 MustHaveRegister  "OneSpillStore"
  v51|d DWORD "[r11|d]" v51|d -1 [164, 165[164 MustHaveRegister  "OneSpillStore"
  v52|d DWORD "[r11|d]" v52|d -1 [166, 167[166 MustHaveRegister  "OneSpillStore"
  v53|d DWORD "[r11|d]" v53|d -1 [168, 169[168 MustHaveRegister  "OneSpillStore"
  v54|d DWORD "[r11|d]" v54|d -1 [170, 260[170 MustHaveRegister 260 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[rcx|d]" v55|d v37|d [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[rcx|d]" v56|d v55|d [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[rcx|d]" v57|d v56|d [176, 181[176 MustHaveRegister 178 MustHaveRegister 180 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[r10|d]" v58|d v57|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[r10|d]" v59|d v58|d [180, 182[180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v60|d DWORD "[r10|d]" v60|d v59|d [182, 187[182 MustHaveRegister 184 MustHaveRegister 186 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r9|d]" v61|d v60|d [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r9|d]" v62|d v61|d [186, 188[186 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r9|d]" v63|d v62|d [188, 193[188 MustHaveRegister 190 MustHaveRegister 192 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d v63|d [190, 192[190 MustHaveRegister 192 MustHaveRegister  "NoSpillStore"
  v65|d DWORD "[r10|d]" v65|d v64|d [192, 194[192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v66|d DWORD "[r10|d]" v66|d v65|d [194, 199[194 MustHaveRegister 196 MustHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r9|d]" v67|d v66|d [196, 198[196 MustHaveRegister 198 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[r9|d]" v68|d v67|d [198, 200[198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v69|d DWORD "[r9|d]" v69|d v68|d [200, 205[200 MustHaveRegister 202 MustHaveRegister 204 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r10|d]" v70|d v69|d [202, 204[202 MustHaveRegister 204 MustHaveRegister  "NoSpillStore"
  v71|d DWORD "[r10|d]" v71|d v70|d [204, 206[204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v72|d DWORD "[r10|d]" v72|d v71|d [206, 211[206 MustHaveRegister 208 MustHaveRegister 210 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r9|d]" v73|d v72|d [208, 210[208 MustHaveRegister 210 MustHaveRegister  "NoSpillStore"
  v74|d DWORD "[r9|d]" v74|d v73|d [210, 212[210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v75|d DWORD "[r9|d]" v75|d v74|d [212, 217[212 MustHaveRegister 214 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r10|d]" v76|d v75|d [214, 216[214 MustHaveRegister 216 MustHaveRegister  "NoSpillStore"
  v77|d DWORD "[r10|d]" v77|d v76|d [216, 218[216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[r10|d]" v78|d v77|d [218, 223[218 MustHaveRegister 220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[rax|d]" v79|d v78|d [220, 222[220 MustHaveRegister 222 MustHaveRegister  "NoSpillStore"
  v80|d DWORD "[rax|d]" v80|d v79|d [222, 224[222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v81|d DWORD "[rax|d]" v81|d v80|d [224, 229[224 MustHaveRegister 226 MustHaveRegister 228 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[r10|d]" v82|d v81|d [226, 228[226 MustHaveRegister 228 MustHaveRegister  "NoSpillStore"
  v83|d DWORD "[r10|d]" v83|d v82|d [228, 230[228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v84|d DWORD "[r10|d]" v84|d v83|d [230, 235[230 MustHaveRegister 232 MustHaveRegister 234 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[rax|d]" v85|d v84|d [232, 234[232 MustHaveRegister 234 MustHaveRegister  "NoSpillStore"
  v86|d DWORD "[rax|d]" v86|d v85|d [234, 236[234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v87|d DWORD "[rax|d]" v87|d v86|d [236, 241[236 MustHaveRegister 238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[r10|d]" v88|d v87|d [238, 240[238 MustHaveRegister 240 MustHaveRegister  "NoSpillStore"
  v89|d DWORD "[r10|d]" v89|d v88|d [240, 242[240 MustHaveRegister 242 ShouldHaveRegister  "NoSpillStore"
  v90|d DWORD "[r10|d]" v90|d v89|d [242, 247[242 MustHaveRegister 244 MustHaveRegister 246 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[rax|d]" v91|d v90|d [244, 246[244 MustHaveRegister 246 MustHaveRegister  "NoSpillStore"
  v92|d DWORD "[rax|d]" v92|d v91|d [246, 248[246 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v93|d DWORD "[rax|d]" v93|d v92|d [248, 253[248 MustHaveRegister 250 MustHaveRegister 252 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[r10|d]" v94|d v93|d [250, 252[250 MustHaveRegister 252 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[r10|d]" v95|d v94|d [252, 254[252 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v96|d DWORD "[r10|d]" v96|d v95|d [254, 259[254 MustHaveRegister 256 MustHaveRegister 258 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[rax|d]" v97|d v96|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v98|d DWORD "[rax|d]" v98|d v97|d [258, 260[258 MustHaveRegister 260 ShouldHaveRegister  "NoSpillStore"
  v99|d DWORD "[rax|d]" v99|d v98|d [260, 265[260 MustHaveRegister 262 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v100|d DWORD "[r10|d]" v100|d v99|d [262, 264[262 MustHaveRegister 264 MustHaveRegister  "NoSpillStore"
  v101|d DWORD "[r10|d]" v101|d v100|d [264, 268[264 MustHaveRegister 268 ShouldHaveRegister  "NoSpillStore"
  v102|d DWORD "[rax|d]" v102|d -1 [266, 268[266 MustHaveRegister 268 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[r10|d]" v103|d v101|d [268, 273[268 MustHaveRegister 272 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[r11|d]" v104|d v38|d [270, 273[270 MustHaveRegister 272 ShouldHaveRegister  "NoSpillStore"
  v105|d DWORD "[r10|d]" v105|d v37|d [278, 287[[296, 299[284 MustHaveRegister 286 ShouldHaveRegister 298 ShouldHaveRegister  "NoSpillStore"
  v106|d DWORD "[r11|d]" v106|d v38|d [278, 292[280 ShouldHaveRegister 288 MustHaveRegister 292 ShouldHaveRegister  "NoSpillStore"
  v107|d DWORD "[r8|d]" v107|d v105|d [284, 286[284 MustHaveRegister 286 MustHaveRegister  "NoSpillStore"
  v108|d DWORD "[r8|d]" v108|d v107|d [286, 290[286 MustHaveRegister 290 ShouldHaveRegister  "NoSpillStore"
  v109|d DWORD "[r10|d]" v109|d -1 [288, 290[288 MustHaveRegister 290 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[r8|d]" v110|d v108|d [290, 295[290 MustHaveRegister 294 ShouldHaveRegister  "NoSpillStore"
  v111|d DWORD "[r11|d]" v111|d v106|d [292, 295[292 MustHaveRegister 294 ShouldHaveRegister  "NoSpillStore"
  v112|d DWORD "[r10|d]" v112|d -1 [322, 324[324 MustHaveRegister  "NoSpillStore"
  v113|q QWORD "[r11|q]" v113|q -1 [322, 326[326 MustHaveRegister  "NoSpillStore"
  v114|d DWORD "[r10|d]" v114|d v105|d [300, 302[302 ShouldHaveRegister  "NoSpillStore"
  v115|d DWORD "[rax|d]" v12|d v12|d [278, 296[280 MustHaveRegister 295 LiveAtLoopEnd  "SpillInDominator"
  v116|d DWORD "[vstack:0|d]" v12|d v12|d [134, 278[ "SpillInDominator"
  v117|d DWORD "[vstack:1|d]" v35|d v35|d [138, 274[273 LiveAtLoopEnd  "StoreAtDefinition"
  v118|d DWORD "[r11|d]" v38|d v38|d [269, 270[[274, 277[270 MustHaveRegister 276 ShouldHaveRegister  "OneSpillStore"
  v119|d DWORD "[vstack:2|d]" v38|d v38|d [159, 269[ "OneSpillStore"
  v120|d DWORD "[vstack:3|d]" v49|d v49|d [161, 230[230 ShouldHaveRegister  "OneSpillStore"
  v121|d DWORD "[vstack:4|d]" v50|d v50|d [163, 236[236 ShouldHaveRegister  "OneSpillStore"
  v122|d DWORD "[vstack:5|d]" v51|d v51|d [165, 242[242 ShouldHaveRegister  "OneSpillStore"
  v123|d DWORD "[vstack:6|d]" v52|d v52|d [167, 248[248 ShouldHaveRegister  "OneSpillStore"
  v124|d DWORD "[vstack:7|d]" v53|d v53|d [169, 254[254 ShouldHaveRegister  "OneSpillStore"
  v125|q QWORD "[rcx|q]" v40|q v40|q [265, 266[266 MustHaveRegister  "OneSpillStore"
  v126|q QWORD "[vstack:8|q]" v40|q v40|q [171, 265[ "OneSpillStore"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   16  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   18  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   20  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   22  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   24  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   26  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   28  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   30  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   32  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   34  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   36  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   38  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   40  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   42  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   50  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   52  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   62  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   66  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   68  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   70  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   72  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   90  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   94  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr  102  <|@ instruction JUMP ~[v14|DWORD, v24|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  104  <|@ instruction [v27|DWORD, v28|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr  112  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr  114  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  118  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr  120  <|@ instruction JUMP ~[v33|DWORD, v32|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  124  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr  126  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  128  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  130  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr  132  <|@ instruction JUMP ~[v28|DWORD, v27|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  134  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  142  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr  144  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  146  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  148  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  150  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  152  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  154  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  156  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  158  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v119|DWORD = MOVE v38|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  160  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE v49|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = MOVE v50|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  164  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v122|DWORD = MOVE v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  166  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v123|DWORD = MOVE v52|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  168  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v124|DWORD = MOVE v53|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  170  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v126|QWORD = MOVE v40|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  172  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v125|QWORD = MOVE v126|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  268  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|DWORD = MOVE v119|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  270  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr  272  <|@ instruction JUMP ~[v103|DWORD, v104|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  276  <|@ instruction JUMP ~[v37|DWORD, v38|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  278  <|@ instruction [v105|DWORD, v106|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  280  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  290  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr  292  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr  294  <|@ instruction JUMP ~[v110|DWORD, v111|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction JUMP ~[v105|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  300  <|@ instruction [v114|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  302  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr  304  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  308  <|@ instruction JUMP ~[v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  316  <|@ instruction JUMP ~[int[-23067|0xffffffffffffa5e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction JUMP ~[int[-25883|0xffffffffffff9ae5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  322  <|@ instruction [v112|DWORD, v113|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr  326  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|d fixed "[rax|d]" rax|d v114|d [0, 1[[302, 304[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [6, 91[[306, 309[[310, 329[6 MustHaveRegister 88 MustHaveRegister 90 ShouldHaveRegister 308 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [8, 296[[310, 329[8 MustHaveRegister 48 MustHaveRegister 92 MustHaveRegister 114 MustHaveRegister 121 LiveAtLoopEnd 140 MustHaveRegister 144 MustHaveRegister 146 MustHaveRegister 148 MustHaveRegister 150 MustHaveRegister 152 MustHaveRegister 154 MustHaveRegister 156 MustHaveRegister 158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister 168 MustHaveRegister 170 MustHaveRegister 266 MustHaveRegister 273 LiveAtLoopEnd 288 MustHaveRegister 295 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 96[[310, 329[10 MustHaveRegister 42 ShouldHaveRegister 44 ShouldHaveRegister 50 ShouldHaveRegister 84 ShouldHaveRegister 92 MustHaveRegister 96 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 86[[310, 329[12 MustHaveRegister 42 ShouldHaveRegister  "NoSpillStore"
  v4|q QWORD "[rax|q]" v4|q -1 [14, 22[14 MustHaveRegister 16 MustHaveRegister 18 MustHaveRegister 20 MustHaveRegister 22 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[r10|d]" v5|d -1 [16, 40[16 MustHaveRegister 24 MustHaveRegister 28 MustHaveRegister 40 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d -1 [18, 38[18 MustHaveRegister 32 MustHaveRegister 38 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[r9|d]" v7|d -1 [20, 34[20 MustHaveRegister 34 MustHaveRegister  "NoSpillStore"
  v8|d DWORD "[rax|d]" v8|d -1 [22, 36[22 MustHaveRegister 36 MustHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [24, 30[24 MustHaveRegister 26 MustHaveRegister 30 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[rdi|q]" v10|q -1 [26, 28[26 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v11|q QWORD "[rbx|q]" v11|q v9|q [30, 32[30 MustHaveRegister 32 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rax|d]" v12|d v2|d [42, 134[42 MustHaveRegister 44 MustHaveRegister 52 MustHaveRegister 62 MustHaveRegister 98 MustHaveRegister 100 ShouldHaveRegister 124 MustHaveRegister 126 ShouldHaveRegister  "SpillInDominator"
  v13|d DWORD "[r10|d]" v13|d -1 [48, 84[48 MustHaveRegister 70 ShouldHaveRegister 76 MustHaveRegister 84 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r11|d]" v14|d v2|d [50, 103[50 MustHaveRegister 52 ShouldHaveRegister 60 ShouldHaveRegister 62 ShouldHaveRegister 76 ShouldHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v15|q QWORD "[r9|q]" v15|q -1 [60, 66[60 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[rbx|d]" v16|d v12|d [62, 64[62 MustHaveRegister 64 ShouldHaveRegister  "NoSpillStore"
  v17|q QWORD "[rbx|q]" v17|q -1 [64, 66[64 MustHaveRegister 66 ShouldHaveRegister  "NoSpillStore"
  v18|q QWORD "[r9|q]" v18|q v15|q [66, 68[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v19|q QWORD "[r9|q]" v19|q v18|q [68, 72[68 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v20|q QWORD "[rbx|q]" v20|q -1 [70, 72[70 MustHaveRegister 72 MustHaveRegister  "NoSpillStore"
  v21|d DWORD "[r10|d]" v21|d v0|d [88, 90[88 MustHaveRegister 90 MustHaveRegister  "NoSpillStore"
  v22|d DWORD "[r10|d]" v22|d v21|d [90, 94[90 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v23|d DWORD "[r8|d]" v23|d -1 [92, 94[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r10|d]" v24|d v22|d [94, 103[94 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r8|d]" v25|d -1 [96, 101[96 MustHaveRegister 98 ShouldHaveRegister 100 MustHaveRegister  "NoSpillStore"
  v26|d DWORD "[r9|d]" v26|d v12|d [100, 122[100 MustHaveRegister 106 MustHaveRegister 121 LiveAtLoopEnd  "NoSpillStore"
  v27|d DWORD "[r11|d]" v27|d v14|d [104, 118[[122, 133[106 ShouldHaveRegister 114 MustHaveRegister 118 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d v24|d [104, 113[[122, 133[110 MustHaveRegister 112 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v29|d DWORD "[r8|d]" v29|d v28|d [110, 112[110 MustHaveRegister 112 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d v29|d [112, 116[112 MustHaveRegister 116 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r10|d]" v31|d -1 [114, 116[114 MustHaveRegister 116 ShouldHaveRegister  "NoSpillStore"
  v32|d DWORD "[r8|d]" v32|d v30|d [116, 121[116 MustHaveRegister 120 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[r11|d]" v33|d v27|d [118, 121[118 MustHaveRegister 120 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[r8|d]" v34|d -1 [124, 130[124 MustHaveRegister 130 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[r8|d]" v35|d v34|d [130, 138[130 MustHaveRegister 136 MustHaveRegister  "StoreAtDefinition"
  v36|d DWORD "[r9|d]" v36|d -1 [128, 131[128 MustHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v37|d DWORD "[r10|d]" v37|d v103|d [134, 175[[274, 277[172 MustHaveRegister 174 ShouldHaveRegister 276 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[r11|d]" v38|d v104|d [134, 159[136 ShouldHaveRegister 140 MustHaveRegister 142 ShouldHaveRegister  "OneSpillStore"
  v39|d DWORD "[r9|d]" v39|d -1 [140, 176[140 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v40|q QWORD "[rcx|q]" v40|q -1 [142, 171[142 MustHaveRegister 144 MustHaveRegister 146 MustHaveRegister 148 MustHaveRegister 150 MustHaveRegister 152 MustHaveRegister 154 MustHaveRegister 156 MustHaveRegister 158 MustHaveRegister 160 MustHaveRegister 162 MustHaveRegister 164 MustHaveRegister 166 MustHaveRegister 168 MustHaveRegister 170 MustHaveRegister  "OneSpillStore"
  v41|d DWORD "[rbx|d]" v41|d -1 [144, 182[144 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v42|d DWORD "[rdi|d]" v42|d -1 [146, 188[146 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[rsi|d]" v43|d -1 [148, 194[148 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v44|d DWORD "[rbp|d]" v44|d -1 [150, 200[150 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r13|d]" v45|d -1 [152, 206[152 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[r14|d]" v46|d -1 [154, 212[154 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v47|d DWORD "[rax|d]" v47|d -1 [156, 218[156 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[r8|d]" v48|d -1 [158, 224[158 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[r11|d]" v49|d -1 [160, 161[160 MustHaveRegister  "OneSpillStore"
  v50|d DWORD "[r11|d]" v50|d -1 [162, 163[162 MustHaveRegister  "OneSpillStore"
  v51|d DWORD "[r11|d]" v51|d -1 [164, 165[164 MustHaveRegister  "OneSpillStore"
  v52|d DWORD "[r11|d]" v52|d -1 [166, 167[166 MustHaveRegister  "OneSpillStore"
  v53|d DWORD "[r11|d]" v53|d -1 [168, 169[168 MustHaveRegister  "OneSpillStore"
  v54|d DWORD "[r11|d]" v54|d -1 [170, 260[170 MustHaveRegister 260 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[rcx|d]" v55|d v37|d [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[rcx|d]" v56|d v55|d [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[rcx|d]" v57|d v56|d [176, 181[176 MustHaveRegister 178 MustHaveRegister 180 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[r10|d]" v58|d v57|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[r10|d]" v59|d v58|d [180, 182[180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v60|d DWORD "[r10|d]" v60|d v59|d [182, 187[182 MustHaveRegister 184 MustHaveRegister 186 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r9|d]" v61|d v60|d [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r9|d]" v62|d v61|d [186, 188[186 MustHaveRegister 188 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r9|d]" v63|d v62|d [188, 193[188 MustHaveRegister 190 MustHaveRegister 192 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[r10|d]" v64|d v63|d [190, 192[190 MustHaveRegister 192 MustHaveRegister  "NoSpillStore"
  v65|d DWORD "[r10|d]" v65|d v64|d [192, 194[192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v66|d DWORD "[r10|d]" v66|d v65|d [194, 199[194 MustHaveRegister 196 MustHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r9|d]" v67|d v66|d [196, 198[196 MustHaveRegister 198 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[r9|d]" v68|d v67|d [198, 200[198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v69|d DWORD "[r9|d]" v69|d v68|d [200, 205[200 MustHaveRegister 202 MustHaveRegister 204 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r10|d]" v70|d v69|d [202, 204[202 MustHaveRegister 204 MustHaveRegister  "NoSpillStore"
  v71|d DWORD "[r10|d]" v71|d v70|d [204, 206[204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v72|d DWORD "[r10|d]" v72|d v71|d [206, 211[206 MustHaveRegister 208 MustHaveRegister 210 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r9|d]" v73|d v72|d [208, 210[208 MustHaveRegister 210 MustHaveRegister  "NoSpillStore"
  v74|d DWORD "[r9|d]" v74|d v73|d [210, 212[210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v75|d DWORD "[r9|d]" v75|d v74|d [212, 217[212 MustHaveRegister 214 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r10|d]" v76|d v75|d [214, 216[214 MustHaveRegister 216 MustHaveRegister  "NoSpillStore"
  v77|d DWORD "[r10|d]" v77|d v76|d [216, 218[216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[r10|d]" v78|d v77|d [218, 223[218 MustHaveRegister 220 MustHaveRegister 222 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[rax|d]" v79|d v78|d [220, 222[220 MustHaveRegister 222 MustHaveRegister  "NoSpillStore"
  v80|d DWORD "[rax|d]" v80|d v79|d [222, 224[222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v81|d DWORD "[rax|d]" v81|d v80|d [224, 229[224 MustHaveRegister 226 MustHaveRegister 228 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[r10|d]" v82|d v81|d [226, 228[226 MustHaveRegister 228 MustHaveRegister  "NoSpillStore"
  v83|d DWORD "[r10|d]" v83|d v82|d [228, 230[228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v84|d DWORD "[r10|d]" v84|d v83|d [230, 235[230 MustHaveRegister 232 MustHaveRegister 234 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[rax|d]" v85|d v84|d [232, 234[232 MustHaveRegister 234 MustHaveRegister  "NoSpillStore"
  v86|d DWORD "[rax|d]" v86|d v85|d [234, 236[234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v87|d DWORD "[rax|d]" v87|d v86|d [236, 241[236 MustHaveRegister 238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v88|d DWORD "[r10|d]" v88|d v87|d [238, 240[238 MustHaveRegister 240 MustHaveRegister  "NoSpillStore"
  v89|d DWORD "[r10|d]" v89|d v88|d [240, 242[240 MustHaveRegister 242 ShouldHaveRegister  "NoSpillStore"
  v90|d DWORD "[r10|d]" v90|d v89|d [242, 247[242 MustHaveRegister 244 MustHaveRegister 246 ShouldHaveRegister  "NoSpillStore"
  v91|d DWORD "[rax|d]" v91|d v90|d [244, 246[244 MustHaveRegister 246 MustHaveRegister  "NoSpillStore"
  v92|d DWORD "[rax|d]" v92|d v91|d [246, 248[246 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v93|d DWORD "[rax|d]" v93|d v92|d [248, 253[248 MustHaveRegister 250 MustHaveRegister 252 ShouldHaveRegister  "NoSpillStore"
  v94|d DWORD "[r10|d]" v94|d v93|d [250, 252[250 MustHaveRegister 252 MustHaveRegister  "NoSpillStore"
  v95|d DWORD "[r10|d]" v95|d v94|d [252, 254[252 MustHaveRegister 254 ShouldHaveRegister  "NoSpillStore"
  v96|d DWORD "[r10|d]" v96|d v95|d [254, 259[254 MustHaveRegister 256 MustHaveRegister 258 ShouldHaveRegister  "NoSpillStore"
  v97|d DWORD "[rax|d]" v97|d v96|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v98|d DWORD "[rax|d]" v98|d v97|d [258, 260[258 MustHaveRegister 260 ShouldHaveRegister  "NoSpillStore"
  v99|d DWORD "[rax|d]" v99|d v98|d [260, 265[260 MustHaveRegister 262 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v100|d DWORD "[r10|d]" v100|d v99|d [262, 264[262 MustHaveRegister 264 MustHaveRegister  "NoSpillStore"
  v101|d DWORD "[r10|d]" v101|d v100|d [264, 268[264 MustHaveRegister 268 ShouldHaveRegister  "NoSpillStore"
  v102|d DWORD "[rax|d]" v102|d -1 [266, 268[266 MustHaveRegister 268 ShouldHaveRegister  "NoSpillStore"
  v103|d DWORD "[r10|d]" v103|d v101|d [268, 273[268 MustHaveRegister 272 ShouldHaveRegister  "NoSpillStore"
  v104|d DWORD "[r11|d]" v104|d v38|d [270, 273[270 MustHaveRegister 272 ShouldHaveRegister  "NoSpillStore"
  v105|d DWORD "[r10|d]" v105|d v37|d [278, 287[[296, 299[284 MustHaveRegister 286 ShouldHaveRegister 298 ShouldHaveRegister  "NoSpillStore"
  v106|d DWORD "[r11|d]" v106|d v38|d [278, 292[280 ShouldHaveRegister 288 MustHaveRegister 292 ShouldHaveRegister  "NoSpillStore"
  v107|d DWORD "[r8|d]" v107|d v105|d [284, 286[284 MustHaveRegister 286 MustHaveRegister  "NoSpillStore"
  v108|d DWORD "[r8|d]" v108|d v107|d [286, 290[286 MustHaveRegister 290 ShouldHaveRegister  "NoSpillStore"
  v109|d DWORD "[r10|d]" v109|d -1 [288, 290[288 MustHaveRegister 290 ShouldHaveRegister  "NoSpillStore"
  v110|d DWORD "[r8|d]" v110|d v108|d [290, 295[290 MustHaveRegister 294 ShouldHaveRegister  "NoSpillStore"
  v111|d DWORD "[r11|d]" v111|d v106|d [292, 295[292 MustHaveRegister 294 ShouldHaveRegister  "NoSpillStore"
  v112|d DWORD "[r10|d]" v112|d -1 [322, 324[324 MustHaveRegister  "NoSpillStore"
  v113|q QWORD "[r11|q]" v113|q -1 [322, 326[326 MustHaveRegister  "NoSpillStore"
  v114|d DWORD "[r10|d]" v114|d v105|d [300, 302[302 ShouldHaveRegister  "NoSpillStore"
  v115|d DWORD "[rax|d]" v12|d v12|d [278, 296[280 MustHaveRegister 295 LiveAtLoopEnd  "SpillInDominator"
  v116|d DWORD "[vstack:0|d]" v12|d v12|d [134, 278[ "SpillInDominator"
  v117|d DWORD "[vstack:1|d]" v35|d v35|d [138, 274[273 LiveAtLoopEnd  "StoreAtDefinition"
  v118|d DWORD "[r11|d]" v38|d v38|d [269, 270[[274, 277[270 MustHaveRegister 276 ShouldHaveRegister  "OneSpillStore"
  v119|d DWORD "[vstack:2|d]" v38|d v38|d [159, 269[ "OneSpillStore"
  v120|d DWORD "[vstack:3|d]" v49|d v49|d [161, 230[230 ShouldHaveRegister  "OneSpillStore"
  v121|d DWORD "[vstack:4|d]" v50|d v50|d [163, 236[236 ShouldHaveRegister  "OneSpillStore"
  v122|d DWORD "[vstack:5|d]" v51|d v51|d [165, 242[242 ShouldHaveRegister  "OneSpillStore"
  v123|d DWORD "[vstack:6|d]" v52|d v52|d [167, 248[248 ShouldHaveRegister  "OneSpillStore"
  v124|d DWORD "[vstack:7|d]" v53|d v53|d [169, 254[254 ShouldHaveRegister  "OneSpillStore"
  v125|q QWORD "[rcx|q]" v40|q v40|q [265, 266[266 MustHaveRegister  "OneSpillStore"
  v126|q QWORD "[vstack:8|q]" v40|q v40|q [171, 265[ "OneSpillStore"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   16  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   18  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   20  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   22  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   24  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   26  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   28  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   30  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   32  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   34  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   36  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   38  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   40  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   42  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   50  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   52  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   62  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   66  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   68  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   70  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   72  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   90  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   94  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  104  <|@ instruction [v27|DWORD, v28|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr  112  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr  114  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  118  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE v32|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  120  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  124  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr  126  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  128  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  130  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction v116|DWORD = MOVE v12|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  132  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  134  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v117|DWORD = MOVE v35|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  140  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  142  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr  144  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  146  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  148  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  150  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  152  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  154  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  156  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  158  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v119|DWORD = MOVE v38|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  160  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE v49|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = MOVE v50|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  164  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v122|DWORD = MOVE v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  166  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v123|DWORD = MOVE v52|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  168  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v124|DWORD = MOVE v53|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  170  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v126|QWORD = MOVE v40|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  172  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v125|QWORD = MOVE v126|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  268  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|DWORD = MOVE v119|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  270  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVE v117|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  272  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = MOVE v116|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  276  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  278  <|@ instruction [v105|DWORD, v106|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  280  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  290  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr  292  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD = MOVE v110|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  294  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  300  <|@ instruction [v114|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  302  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr  304  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = MOVE v0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  308  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v113|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] // MoveResolver resolve mapping <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v113|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] // MoveResolver resolve mapping <|@ <|@
      nr  316  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v113|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] // MoveResolver resolve mapping <|@ <|@
      nr  320  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  322  <|@ instruction [v112|DWORD, v113|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr  326  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   16  <|@ instruction v5|DWORD[_] = MOV [v4|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   18  <|@ instruction v6|DWORD[_] = MOV [v4|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   20  <|@ instruction v7|DWORD[_] = MOV [v4|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   22  <|@ instruction v8|DWORD[_] = MOV [v4|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   24  <|@ instruction v9|QWORD = MOV [v5|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   26  <|@ instruction v10|QWORD = LEA [v9|QWORD + 13] size: QWORD <|@ <|@
      nr   28  <|@ instruction MOV (x: [v5|DWORD[_] * 8 + 53944], y: v10|QWORD) size: QWORD <|@ <|@
      nr   30  <|@ instruction v11|QWORD = INC v9|QWORD size: QWORD <|@ <|@
      nr   32  <|@ instruction MOV (x: [v6|DWORD[_] * 8 + 53944], y: v11|QWORD) size: QWORD <|@ <|@
      nr   34  <|@ instruction BLACKHOLE [v7|DWORD[_] * 8 + 53944] <|@ <|@
      nr   36  <|@ instruction BLACKHOLE [v8|DWORD[_] * 8 + 53944] <|@ <|@
      nr   38  <|@ instruction BLACKHOLE [v6|DWORD[_] * 8 + 53944] <|@ <|@
      nr   40  <|@ instruction BLACKHOLE [v5|DWORD[_] * 8 + 53944] <|@ <|@
      nr   42  <|@ instruction v12|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v13|DWORD = MOV [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   50  <|@ instruction v14|DWORD = INC v2|DWORD size: DWORD <|@ <|@
      nr   52  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v14|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v15|QWORD = MOVSXD v14|DWORD size: QWORD <|@ <|@
      nr   62  <|@ instruction v16|DWORD = SUB (x: v12|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction v17|QWORD = MOVSXD v16|DWORD size: QWORD <|@ <|@
      nr   66  <|@ instruction v18|QWORD = ADD (x: v15|QWORD, y: v17|QWORD) size: QWORD <|@ <|@
      nr   68  <|@ instruction v19|QWORD = DEC v18|QWORD size: QWORD <|@ <|@
      nr   70  <|@ instruction v20|QWORD = MOV v13|DWORD size: DWORD <|@ <|@
      nr   72  <|@ instruction CMPBRANCH (x: v20|QWORD, y: v19|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v14|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: v13|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction v21|DWORD = SHL v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   90  <|@ instruction v22|DWORD = SUB (x: v21|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v23|DWORD = MOVSXB [v1|QWORD[.] + v2|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   94  <|@ instruction v24|DWORD = ADD (x: v22|DWORD, y: v23|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction v25|DWORD = LEA [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: v12|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction v26|DWORD = CMOVE (falseValue: v12|DWORD, ~trueValue: v25|DWORD) condition: > <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v26|DWORD, y: v27|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction v29|DWORD = SHL v28|DWORD y: 5 size: DWORD <|@ <|@
      nr  112  <|@ instruction v30|DWORD = SUB (x: v29|DWORD, ~y: v28|DWORD) size: DWORD <|@ <|@
      nr  114  <|@ instruction v31|DWORD = MOVSXB [v1|QWORD[.] + v27|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v32|DWORD = ADD (x: v30|DWORD, y: v31|DWORD) size: DWORD <|@ <|@
      nr  118  <|@ instruction v33|DWORD = INC v27|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = MOVE v32|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  120  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  124  <|@ instruction v34|DWORD = LEA [v12|DWORD - 16] size: DWORD <|@ <|@
      nr  126  <|@ instruction CMP v12|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  128  <|@ instruction v36|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  130  <|@ instruction v35|DWORD = CMOVE (falseValue: v34|DWORD, ~trueValue: v36|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE r8|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  132  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v35|DWORD, y: v38|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  140  <|@ instruction v39|DWORD = MOVSXB [v1|QWORD[.] + v38|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  142  <|@ instruction v40|QWORD = MOVSXD v38|DWORD size: QWORD <|@ <|@
      nr  144  <|@ instruction v41|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  146  <|@ instruction v42|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  148  <|@ instruction v43|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  150  <|@ instruction v44|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  152  <|@ instruction v45|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  154  <|@ instruction v46|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  156  <|@ instruction v47|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  158  <|@ instruction v48|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v119|DWORD = MOVE v38|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  160  <|@ instruction v49|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v120|DWORD = MOVE v49|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction v50|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v121|DWORD = MOVE v50|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  164  <|@ instruction v51|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v122|DWORD = MOVE v51|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  166  <|@ instruction v52|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v123|DWORD = MOVE v52|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  168  <|@ instruction v53|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v124|DWORD = MOVE v53|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  170  <|@ instruction v54|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v126|QWORD = MOVE v40|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  172  <|@ instruction v55|DWORD = SHL v37|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v37|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v58|DWORD = SHL v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v61|DWORD = SHL v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction v64|DWORD = SHL v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v67|DWORD = SHL v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction v69|DWORD = ADD (x: v68|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v70|DWORD = SHL v69|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction v71|DWORD = SUB (x: v70|DWORD, ~y: v69|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction v72|DWORD = ADD (x: v71|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v73|DWORD = SHL v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction v74|DWORD = SUB (x: v73|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction v75|DWORD = ADD (x: v74|DWORD, y: v46|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v76|DWORD = SHL v75|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction v77|DWORD = SUB (x: v76|DWORD, ~y: v75|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction v78|DWORD = ADD (x: v77|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v79|DWORD = SHL v78|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction v80|DWORD = SUB (x: v79|DWORD, ~y: v78|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction v81|DWORD = ADD (x: v80|DWORD, y: v48|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v82|DWORD = SHL v81|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction v83|DWORD = SUB (x: v82|DWORD, ~y: v81|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction v84|DWORD = ADD (x: v83|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v85|DWORD = SHL v84|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction v86|DWORD = SUB (x: v85|DWORD, ~y: v84|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction v87|DWORD = ADD (x: v86|DWORD, y: v50|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v88|DWORD = SHL v87|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction v89|DWORD = SUB (x: v88|DWORD, ~y: v87|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v90|DWORD = ADD (x: v89|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction v91|DWORD = SHL v90|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction v92|DWORD = SUB (x: v91|DWORD, ~y: v90|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction v93|DWORD = ADD (x: v92|DWORD, y: v52|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction v94|DWORD = SHL v93|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction v95|DWORD = SUB (x: v94|DWORD, ~y: v93|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction v96|DWORD = ADD (x: v95|DWORD, y: v53|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction v97|DWORD = SHL v96|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v98|DWORD = SUB (x: v97|DWORD, ~y: v96|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v99|DWORD = ADD (x: v98|DWORD, y: v54|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction v100|DWORD = SHL v99|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction v101|DWORD = SUB (x: v100|DWORD, ~y: v99|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v125|QWORD = MOVE v126|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction v102|DWORD = MOVSXB [v1|QWORD[.] + v40|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  268  <|@ instruction v103|DWORD = ADD (x: v101|DWORD, y: v102|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v118|DWORD = MOVE v119|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  270  <|@ instruction v104|DWORD = LEA [v38|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = MOVE v117|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  272  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v115|DWORD = MOVE v116|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  276  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  278  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  280  <|@ instruction CMPBRANCH (x: v12|DWORD, y: v106|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction v107|DWORD = SHL v105|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction v108|DWORD = SUB (x: v107|DWORD, ~y: v105|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction v109|DWORD = MOVSXB [v1|QWORD[.] + v106|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  290  <|@ instruction v110|DWORD = ADD (x: v108|DWORD, y: v109|DWORD) size: DWORD <|@ <|@
      nr  292  <|@ instruction v111|DWORD = INC v106|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v105|DWORD = MOVE v110|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  294  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  300  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  302  <|@ instruction rax|DWORD = MOVE v114|DWORD moveKind: DWORD <|@ <|@
      nr  304  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v114|DWORD = MOVE v0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  308  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v113|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] // MoveResolver resolve mapping <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v113|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] // MoveResolver resolve mapping <|@ <|@
      nr  316  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v113|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v112|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] // MoveResolver resolve mapping <|@ <|@
      nr  320  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  322  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v112|DWORD) size: DWORD <|@ <|@
      nr  326  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v113|QWORD) size: QWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   16  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   18  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   20  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   22  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   26  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   28  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   32  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   34  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   36  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   38  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   40  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   42  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   50  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   52  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   62  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   66  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   68  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   70  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   72  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   90  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  112  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  114  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  118  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  120  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  126  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  128  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  130  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE r8|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  132  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  142  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  144  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  146  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  148  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  150  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  152  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  154  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  158  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:3|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:4|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  166  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:6|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:7|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  170  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:8|QWORD = MOVE rcx|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:3|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:4|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:5|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:6|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:7|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction rcx|QWORD = MOVE vstack:8|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  270  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  272  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE vstack:0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  276  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  278  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  280  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  290  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  292  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  294  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  300  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  302  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  304  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  308  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] // MoveResolver resolve mapping <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] // MoveResolver resolve mapping <|@ <|@
      nr  316  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] // MoveResolver resolve mapping <|@ <|@
      nr  320  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  322  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  326  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr   16  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   18  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   20  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   22  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   26  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   28  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   32  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   34  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   36  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   38  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   40  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   42  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   50  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   52  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   62  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   66  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   68  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   70  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   72  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   74  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   90  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   98  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  102  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  112  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  114  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  118  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  120  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  126  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  128  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  130  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction vstack:1|DWORD = MOVE r8|DWORD moveKind: DWORD // LSRAEliminateSpillMove: store at definition <|@ <|@
      nr  132  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  142  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  144  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  146  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  148  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  150  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  152  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  154  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  158  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:2|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  160  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:3|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  162  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:4|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  164  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:5|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  166  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:6|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  168  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:7|DWORD = MOVE r11|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  170  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr   -1  <|@ instruction vstack:8|QWORD = MOVE rcx|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  172  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  204  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  210  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  216  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:3|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:4|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  240  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:5|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  246  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:6|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  252  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:7|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  264  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction rcx|QWORD = MOVE vstack:8|QWORD moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE vstack:2|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  270  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE vstack:1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  272  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  274  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE vstack:0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  276  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  278  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  280  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  282  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  284  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  290  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  292  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  294  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  300  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  302  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  304  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  308  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] // MoveResolver resolve mapping <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] // MoveResolver resolve mapping <|@ <|@
      nr  316  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] // MoveResolver resolve mapping <|@ <|@
      nr  320  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  322  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  324  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  326  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  328  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackSlot numbering"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction vstack:0|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction vstack:1|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction vstack:2|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction vstack:3|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction vstack:4|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction vstack:5|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction vstack:6|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction vstack:7|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction vstack:8|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:3|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:4|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:5|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: vstack:6|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: vstack:7|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE vstack:8|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE vstack:2|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE vstack:1|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE vstack:0|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  336  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before stack slot allocation"
  vstack:0|d DWORD "[vstack:0|d]" vstack:0|d -1 [134, 310[ "NOT_SUPPORTED"
  vstack:1|d DWORD "[vstack:1|d]" vstack:1|d -1 [144, 307[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[vstack:2|d]" vstack:2|d -1 [174, 300[ "NOT_SUPPORTED"
  vstack:3|d DWORD "[vstack:3|d]" vstack:3|d -1 [178, 258[ "NOT_SUPPORTED"
  vstack:4|d DWORD "[vstack:4|d]" vstack:4|d -1 [182, 264[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[vstack:5|d]" vstack:5|d -1 [186, 270[ "NOT_SUPPORTED"
  vstack:6|d DWORD "[vstack:6|d]" vstack:6|d -1 [190, 276[ "NOT_SUPPORTED"
  vstack:7|d DWORD "[vstack:7|d]" vstack:7|d -1 [194, 282[ "NOT_SUPPORTED"
  vstack:8|q QWORD "[vstack:8|q]" vstack:8|q -1 [198, 294[ "NOT_SUPPORTED"
end_intervals
begin_intervals
  name "After stack slot allocation"
  vstack:0|d DWORD "[stack:28|d]" vstack:0|d -1 [134, 310[ "NOT_SUPPORTED"
  vstack:1|d DWORD "[stack:32|d]" vstack:1|d -1 [144, 307[ "NOT_SUPPORTED"
  vstack:2|d DWORD "[stack:36|d]" vstack:2|d -1 [174, 300[ "NOT_SUPPORTED"
  vstack:3|d DWORD "[stack:40|d]" vstack:3|d -1 [178, 258[ "NOT_SUPPORTED"
  vstack:4|d DWORD "[stack:44|d]" vstack:4|d -1 [182, 264[ "NOT_SUPPORTED"
  vstack:5|d DWORD "[stack:48|d]" vstack:5|d -1 [186, 270[ "NOT_SUPPORTED"
  vstack:6|d DWORD "[stack:52|d]" vstack:6|d -1 [190, 276[ "NOT_SUPPORTED"
  vstack:7|d DWORD "[stack:56|d]" vstack:7|d -1 [194, 282[ "NOT_SUPPORTED"
  vstack:8|q QWORD "[stack:64|q]" vstack:8|q -1 [198, 294[ "NOT_SUPPORTED"
end_intervals
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  336  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  336  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  336  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  336  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   88  <|@ instruction JUMP ~[] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction JUMP ~[] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  334  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  336  <|@ instruction JUMP ~[] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache] <|@ <|@
      nr    8  <|@ instruction r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD <|@ <|@
      nr   16  <|@ instruction rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD <|@ <|@
      nr   18  <|@ instruction rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD <|@ <|@
      nr   20  <|@ instruction MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|QWORD = INC rbx|QWORD size: QWORD <|@ <|@
      nr   24  <|@ instruction MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD <|@ <|@
      nr   26  <|@ instruction BLACKHOLE [r9|DWORD[_] * 8 + 53944] <|@ <|@
      nr   28  <|@ instruction BLACKHOLE [rax|DWORD[_] * 8 + 53944] <|@ <|@
      nr   30  <|@ instruction BLACKHOLE [r11|DWORD[_] * 8 + 53944] <|@ <|@
      nr   32  <|@ instruction BLACKHOLE [r10|DWORD[_] * 8 + 53944] <|@ <|@
      nr   34  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   42  <|@ instruction r11|DWORD = INC rcx|DWORD size: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr   94  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   96  <|@ instruction r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  102  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  104  <|@ instruction r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr  106  <|@ instruction CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  108  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: > <|@ <|@
      nr  110  <|@ instruction JUMP ~[] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576827989091578539
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  128  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  130  <|@ instruction JUMP ~[] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4607041418467971883
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606952756478744928
    begin_IR
      LIR
      nr  132  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  134  <|@ instruction stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD <|@ <|@
      nr  136  <|@ instruction r8|DWORD = LEA [rax|DWORD - 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction CMP rax|DWORD y: -2147483632 size: DWORD <|@ <|@
      nr  140  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  142  <|@ instruction r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  144  <|@ instruction stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  146  <|@ instruction JUMP ~[] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4608773533884542443
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  156  <|@ instruction rcx|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr  158  <|@ instruction rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD <|@ <|@
      nr  160  <|@ instruction rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD <|@ <|@
      nr  162  <|@ instruction rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD <|@ <|@
      nr  164  <|@ instruction rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD <|@ <|@
      nr  166  <|@ instruction r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD <|@ <|@
      nr  168  <|@ instruction r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD <|@ <|@
      nr  174  <|@ instruction stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  176  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD <|@ <|@
      nr  178  <|@ instruction stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  180  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD <|@ <|@
      nr  182  <|@ instruction stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  184  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD <|@ <|@
      nr  186  <|@ instruction stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  188  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD <|@ <|@
      nr  190  <|@ instruction stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  192  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD <|@ <|@
      nr  194  <|@ instruction stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD <|@ <|@
      nr  196  <|@ instruction r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD <|@ <|@
      nr  198  <|@ instruction stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD <|@ <|@
      nr  200  <|@ instruction rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  202  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  212  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  214  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  218  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  220  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  224  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  226  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  232  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  236  <|@ instruction r9|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  238  <|@ instruction r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r10|DWORD = SHL r9|DWORD y: 5 size: DWORD <|@ <|@
      nr  244  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  250  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  254  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  262  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD <|@ <|@
      nr  266  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  268  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  270  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD <|@ <|@
      nr  272  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  274  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  276  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD <|@ <|@
      nr  284  <|@ instruction rax|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  286  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD <|@ <|@
      nr  290  <|@ instruction r10|DWORD = SHL rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  292  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  294  <|@ instruction rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD <|@ <|@
      nr  296  <|@ instruction rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD <|@ <|@
      nr  298  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  300  <|@ instruction r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD <|@ <|@
      nr  302  <|@ instruction r11|DWORD = LEA [r11|DWORD + 16] size: DWORD <|@ <|@
      nr  304  <|@ instruction r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD <|@ <|@
      nr  306  <|@ instruction JUMP ~[] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4612424160389332302
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606952756478744929
    begin_IR
      LIR
      nr  308  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  310  <|@ instruction rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  312  <|@ instruction JUMP ~[] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576827989091578540
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction r8|DWORD = SHL r10|DWORD y: 5 size: DWORD <|@ <|@
      nr  322  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr  324  <|@ instruction r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  326  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  328  <|@ instruction r11|DWORD = INC r11|DWORD size: DWORD <|@ <|@
      nr  330  <|@ instruction r10|DWORD = MOVE r8|DWORD moveKind: DWORD <|@ <|@
      nr  332  <|@ instruction JUMP ~[] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4607041418467971884
    begin_IR
      LIR
      nr  314  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  316  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  360  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  362  <|@ instruction rax|DWORD = MOVE r10|DWORD moveKind: DWORD <|@ <|@
      nr  364  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction r9|QWORD = MOVSXD r11|DWORD size: QWORD <|@ <|@
      nr   50  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   52  <|@ instruction rbx|QWORD = MOVSXD rbx|DWORD size: QWORD <|@ <|@
      nr   54  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   56  <|@ instruction r9|QWORD = DEC r9|QWORD size: QWORD <|@ <|@
      nr   58  <|@ instruction rbx|QWORD = MOV r10|DWORD size: DWORD <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4602449156851374432
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4583006415689143296
    begin_IR
      LIR
      nr  354  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  356  <|@ instruction r10|DWORD = MOVE rsi|DWORD moveKind: DWORD <|@ <|@
      nr  358  <|@ instruction JUMP ~[] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   82  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   84  <|@ instruction JUMP ~[] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  346  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  348  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  350  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  352  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  338  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  340  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  342  <|@ instruction r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5] <|@ <|@
      nr  344  <|@ instruction JUMP ~[] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   70  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   72  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5] <|@ <|@
      nr   76  <|@ instruction JUMP ~[] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     31
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: iadd          
    24: istore_0      
    25: iinc          
    28: goto          8
    31: iload_0       
    32: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 89842400c0feff4883ec389041817f20000000000f851403000048896c243048b8addeaddeaddeadde448b5078448b5874448b487c8b40704a8b1cd5b8d20000488d7b0d4a893cd5b8d2000048ffc34a891cddb8d200008bc14103c03bc10f8e7f020000448b520c448bd941ffc3413bc30f8f41020000443bd10f8690020000448bd641c1e205442bd6440fbe440a104503d0448d4102413bc0448bc8450f4fc8e9330000006666660f1f840000000000666666906666660f1f840000000000458bc241c1e005452bc2460fbe541a104503c241ffc3458bd0453bcb7fe289442424448d40f081f81000008041b900000080450f4cc14489442420e964010000460fbe4c1a104963cb0fbe5c0a110fbe7c0a120fbe740a130fbe6c0a14440fbe6c0a15440fbe740a160fbe440a17440fbe440a1844895c241c440fbe5c0a1944895c2418440fbe5c0a1a44895c2414440fbe5c0a1b44895c2410440fbe5c0a1c44895c240c440fbe5c0a1d44895c2408440fbe5c0a1e48890c24418bcac1e105412bca4103c9448bd141c1e205442bd14403d3458bca41c1e105452bca4403cf458bd141c1e205452bd14403d6458bca41c1e105452bca4403cd458bd141c1e205452bd14503d5458bca41c1e105452bca4503ce458bd141c1e205452bd14403d0418bc2c1e005412bc24103c0448bd041c1e205442bd04403542418418bc2c1e005412bc203442414448bd041c1e205442bd04403542410418bc2c1e005412bc20344240c448bd041c1e205442bd04403542408418bc2c1e005412bc24103c3448bd041c1e205442bd0488b0c240fbe440a1f4403d0448b5c241c458d5b10448b442420453bc30f8f93feffff8b442424e92300000066660f1f840000000000458bc241c1e005452bc2460fbe541a104503c241ffc3458bd0413bc37fe2418bc2488b6c24304883c438493ba7500400000f8787000000c34d63cb8bd8412bdb4863db4c03cb49ffc9418bda493bd90f8613000000453bd30f8799fdffffe93c000000448bd6ebb649c7c31800000041bae59affff458997840400004d899f90040000e8000000000f1f84000000000049c7c30000000041bae5a5ffffebd649c7c31800000041bae59affffebc748896c2430e800000000e9ddfcfffff4488d0d65ffffff49898f68040000e9affcfffff441c78784040000f5abffff49c7879004000000000000e8000000000f1f840000000000e800000000f4e800000000f4  <||@
  Comment 0 [stack overflow check]  <||@
  Comment 0 VERIFIED_ENTRY  <||@
  Comment 12 FRAME_COMPLETE  <||@
  Comment 12 ENTRY_BARRIER_PATCH  <||@
  Comment 26 block B0 null  <||@
  Comment 26 0 [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 26 2 stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD  <||@
  Comment 31 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD  <||@
  Comment 31 6 rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache]  <||@
  Comment 31 {Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache]}  <||@
  Comment 41 8 r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD  <||@
  Comment 45 10 r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD  <||@
  Comment 49 12 r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD  <||@
  Comment 53 14 rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD  <||@
  Comment 56 16 rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD  <||@
  Comment 64 18 rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD  <||@
  Comment 68 20 MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD  <||@
  Comment 76 22 rbx|QWORD = INC rbx|QWORD size: QWORD  <||@
  Comment 79 24 MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD  <||@
  Comment 87 26 BLACKHOLE [r9|DWORD[_] * 8 + 53944]  <||@
  Comment 87 28 BLACKHOLE [rax|DWORD[_] * 8 + 53944]  <||@
  Comment 87 30 BLACKHOLE [r11|DWORD[_] * 8 + 53944]  <||@
  Comment 87 32 BLACKHOLE [r10|DWORD[_] * 8 + 53944]  <||@
  Comment 87 34 rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 92 36 CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD  <||@
  Comment 100 block B1 null  <||@
  Comment 100 38 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 100 40 r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0]  <||@
  Comment 100 [rdx:0]at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 100 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 104 42 r11|DWORD = INC rcx|DWORD size: DWORD  <||@
  Comment 110 44 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD  <||@
  Comment 119 block B8 null  <||@
  Comment 119 90 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 119 92 CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD  <||@
  Comment 128 block B9 null  <||@
  Comment 128 94 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 128 96 r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD  <||@
  Comment 135 98 r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD  <||@
  Comment 138 100 r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 144 102 r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 147 104 r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD  <||@
  Comment 151 106 CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 154 108 r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: >  <||@
  Comment 161 110 JUMP ~[] destination: B9 -> B10  <||@
  Comment 166 block B11 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 166 116 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 192 118 r8|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 199 120 r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 202 122 r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 208 124 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 211 126 r11|DWORD = INC r11|DWORD size: DWORD  <||@
  Comment 214 128 r10|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 217 130 JUMP ~[] destination: B11 -> B10  <||@
  Comment 217 block B10 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 217 112 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 217 114 CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD  <||@
  Comment 222 block B12 null  <||@
  Comment 222 132 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 222 134 stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD  <||@
  Comment 226 136 r8|DWORD = LEA [rax|DWORD - 16] size: DWORD  <||@
  Comment 230 138 CMP rax|DWORD y: -2147483632 size: DWORD  <||@
  Comment 236 140 r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000]  <||@
  Comment 242 142 r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: <  <||@
  Comment 246 144 stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 251 146 JUMP ~[] destination: B12 -> B13  <||@
  Comment 256 block B14 loop 1 depth 1 header:147|LoopBegin  <||@
  Comment 256 152 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 256 154 r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 262 156 rcx|QWORD = MOVSXD r11|DWORD size: QWORD  <||@
  Comment 265 158 rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD  <||@
  Comment 270 160 rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD  <||@
  Comment 275 162 rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD  <||@
  Comment 280 164 rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD  <||@
  Comment 285 166 r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD  <||@
  Comment 291 168 r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD  <||@
  Comment 297 170 rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD  <||@
  Comment 302 172 r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD  <||@
  Comment 308 174 stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 313 176 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD  <||@
  Comment 319 178 stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 324 180 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD  <||@
  Comment 330 182 stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 335 184 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD  <||@
  Comment 341 186 stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 346 188 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD  <||@
  Comment 352 190 stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 357 192 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD  <||@
  Comment 363 194 stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 368 196 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD  <||@
  Comment 374 198 stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD  <||@
  Comment 378 200 rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 384 202 rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 387 204 rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 390 206 r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD  <||@
  Comment 397 208 r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD  <||@
  Comment 400 210 r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 403 212 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 410 214 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 413 216 r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD  <||@
  Comment 416 218 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 423 220 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 426 222 r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD  <||@
  Comment 429 224 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 436 226 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 439 228 r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD  <||@
  Comment 442 230 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 449 232 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 452 234 r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD  <||@
  Comment 455 236 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 462 238 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 465 240 r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD  <||@
  Comment 468 242 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 475 244 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 478 246 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 481 248 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 487 250 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 490 252 rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 493 254 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 500 256 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 503 258 r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD  <||@
  Comment 508 260 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 514 262 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 517 264 rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD  <||@
  Comment 521 266 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 528 268 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 531 270 r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD  <||@
  Comment 536 272 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 542 274 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 545 276 rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD  <||@
  Comment 549 278 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 556 280 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 559 282 r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD  <||@
  Comment 564 284 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 570 286 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 573 288 rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD  <||@
  Comment 576 290 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 583 292 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 586 294 rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD  <||@
  Comment 590 296 rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD  <||@
  Comment 595 298 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 598 300 r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD  <||@
  Comment 603 302 r11|DWORD = LEA [r11|DWORD + 16] size: DWORD  <||@
  Comment 607 304 r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD  <||@
  Comment 612 306 JUMP ~[] destination: B14 -> B13  <||@
  Comment 612 block B13 loop 1 depth 1 header:147|LoopBegin  <||@
  Comment 612 148 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 612 150 CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD  <||@
  Comment 621 block B15 null  <||@
  Comment 621 308 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 621 310 rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD  <||@
  Comment 625 312 JUMP ~[] destination: B15 -> B16  <||@
  Comment 630 block B17 loop 2 depth 1 header:170|LoopBegin  <||@
  Comment 630 318 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 640 320 r8|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 647 322 r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 650 324 r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 656 326 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 659 328 r11|DWORD = INC r11|DWORD size: DWORD  <||@
  Comment 662 330 r10|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 665 332 JUMP ~[] destination: B17 -> B16  <||@
  Comment 665 block B16 loop 2 depth 1 header:170|LoopBegin  <||@
  Comment 665 314 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 665 316 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD  <||@
  Comment 670 block B22 null  <||@
  Comment 670 360 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 670 362 rax|DWORD = MOVE r10|DWORD moveKind: DWORD  <||@
  Comment 673 364 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6  <||@
  Comment 682 POLL_RETURN_FAR  <||@
  Comment 696 block B2 null  <||@
  Comment 696 46 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 696 48 r9|QWORD = MOVSXD r11|DWORD size: QWORD  <||@
  Comment 699 50 rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 704 52 rbx|QWORD = MOVSXD rbx|DWORD size: QWORD  <||@
  Comment 707 54 r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD  <||@
  Comment 710 56 r9|QWORD = DEC r9|QWORD size: QWORD  <||@
  Comment 713 58 rbx|QWORD = MOV r10|DWORD size: DWORD  <||@
  Comment 716 60 CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD  <||@
  Comment 725 block B3 null  <||@
  Comment 725 62 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 725 64 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD  <||@
  Comment 739 block B21 null  <||@
  Comment 739 354 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 739 356 r10|DWORD = MOVE rsi|DWORD moveKind: DWORD  <||@
  Comment 742 358 JUMP ~[] destination: B21 -> B22  <||@
  Comment 744 block B6 null  <||@
  Comment 744 78 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 744 80 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 751 82 r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5]  <||@
  Comment 757 84 JUMP ~[] destination: B6 -> B20  <||@
  Comment 757 block B20 null  <||@
  Comment 757 346 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 757 348 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 764 350 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 771 352 DEOPT info [bci:0]  <||@
  Comment 771 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f02c54335a8, value=139649430892922]:0x7f02aab8b17a}  <||@
  Comment 776 [rdx:0]at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 784 block B19 null  <||@
  Comment 784 338 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 784 340 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 791 342 r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5]  <||@
  Comment 797 344 JUMP ~[] destination: B19 -> B20  <||@
  Comment 799 block B5 null  <||@
  Comment 799 70 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 799 72 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 806 74 r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5]  <||@
  Comment 812 76 JUMP ~[] destination: B5 -> B20  <||@
  Comment 819 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f02c5433598, value=139649430762016]:0x7f02aab6b220}  <||@
  Comment 844 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f02c54335a0, value=139649430896640]:0x7f02aab8c000}  <||@
  Comment 872 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f02c54335a8, value=139649430892922]:0x7f02aab8b17a}  <||@
  Comment 877 [rdx:0]at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 885 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f02aacc7700:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 885 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 891 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f02c54335b8, value=139649430892320]:0x7f02aab8af20}  <||@
  Comment 891 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-6741[jdk.internal.util.ArraysSupport.hashCode(int, byte[], int, int)]"
  method "HotSpotCompilation-6741[jdk.internal.util.ArraysSupport.hashCode(int, byte[], int, int)]"
  date 1714038124374
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7f02abccd800 89842400c0feff4883ec389041817f20000000000f851403000048896c243048b8d88c5e2e06000000448b5078448b5874448b487c8b40704a8b1cd5b8d20000488d7b0d4a893cd5b8d2000048ffc34a891cddb8d200008bc14103c03bc10f8e7f020000448b520c448bd941ffc3413bc30f8f41020000443bd10f8690020000448bd641c1e205442bd6440fbe440a104503d0448d4102413bc0448bc8450f4fc8e9330000006666660f1f840000000000666666906666660f1f840000000000458bc241c1e005452bc2460fbe541a104503c241ffc3458bd0453bcb7fe289442424448d40f081f81000008041b900000080450f4cc14489442420e964010000460fbe4c1a104963cb0fbe5c0a110fbe7c0a120fbe740a130fbe6c0a14440fbe6c0a15440fbe740a160fbe440a17440fbe440a1844895c241c440fbe5c0a1944895c2418440fbe5c0a1a44895c2414440fbe5c0a1b44895c2410440fbe5c0a1c44895c240c440fbe5c0a1d44895c2408440fbe5c0a1e48890c24418bcac1e105412bca4103c9448bd141c1e205442bd14403d3458bca41c1e105452bca4403cf458bd141c1e205452bd14403d6458bca41c1e105452bca4403cd458bd141c1e205452bd14503d5458bca41c1e105452bca4503ce458bd141c1e205452bd14403d0418bc2c1e005412bc24103c0448bd041c1e205442bd04403542418418bc2c1e005412bc203442414448bd041c1e205442bd04403542410418bc2c1e005412bc20344240c448bd041c1e205442bd04403542408418bc2c1e005412bc24103c3448bd041c1e205442bd0488b0c240fbe440a1f4403d0448b5c241c458d5b10448b442420453bc30f8f93feffff8b442424e92300000066660f1f840000000000458bc241c1e005452bc2460fbe541a104503c241ffc3458bd0413bc37fe2418bc2488b6c24304883c438493ba7500400000f8787000000c34d63cb8bd8412bdb4863db4c03cb49ffc9418bda493bd90f8613000000453bd30f8799fdffffe93c000000448bd6ebb649c7c31800000041bae59affff458997840400004d899f90040000e872d6ebfe0f1f84000000000049c7c30000000041bae5a5ffffebd649c7c31800000041bae59affffebc748896c2430e8e8d6e9fee9ddfcfffff4488d0d65ffffff49898f68040000e9afe4ebfef441c78784040000f5abffff49c7879004000000000000e80dd6ebfe0f1f840000000000e8869bfffef4e8a0d3ebfef4f4f4f4f4f4f4f4  <||@
  Comment 0 [stack overflow check]  <||@
  Comment 0 VERIFIED_ENTRY  <||@
  Comment 12 FRAME_COMPLETE  <||@
  Comment 12 ENTRY_BARRIER_PATCH  <||@
  Comment 26 block B0 null  <||@
  Comment 26 0 [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 26 2 stack:16|QWORD = MOVE rbp|QWORD moveKind: QWORD  <||@
  Comment 31 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@e5eef76 slotKind: QWORD  <||@
  Comment 31 6 rax|QWORD[.] = HOTSPOTLOADOBJECTCONSTANT input: Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache]  <||@
  Comment 31 {Object[Class:jdk.graal.compiler.hotspot.meta.Bubo.BuboCache]}  <||@
  Comment 41 8 r10|DWORD[_] = MOV [rax|QWORD[.] + 120] size: DWORD  <||@
  Comment 45 10 r11|DWORD[_] = MOV [rax|QWORD[.] + 116] size: DWORD  <||@
  Comment 49 12 r9|DWORD[_] = MOV [rax|QWORD[.] + 124] size: DWORD  <||@
  Comment 53 14 rax|DWORD[_] = MOV [rax|QWORD[.] + 112] size: DWORD  <||@
  Comment 56 16 rbx|QWORD = MOV [r10|DWORD[_] * 8 + 53944] size: QWORD  <||@
  Comment 64 18 rdi|QWORD = LEA [rbx|QWORD + 13] size: QWORD  <||@
  Comment 68 20 MOV (x: [r10|DWORD[_] * 8 + 53944], y: rdi|QWORD) size: QWORD  <||@
  Comment 76 22 rbx|QWORD = INC rbx|QWORD size: QWORD  <||@
  Comment 79 24 MOV (x: [r11|DWORD[_] * 8 + 53944], y: rbx|QWORD) size: QWORD  <||@
  Comment 87 26 BLACKHOLE [r9|DWORD[_] * 8 + 53944]  <||@
  Comment 87 28 BLACKHOLE [rax|DWORD[_] * 8 + 53944]  <||@
  Comment 87 30 BLACKHOLE [r11|DWORD[_] * 8 + 53944]  <||@
  Comment 87 32 BLACKHOLE [r10|DWORD[_] * 8 + 53944]  <||@
  Comment 87 34 rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 92 36 CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9745023603034433 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD  <||@
  Comment 100 block B1 null  <||@
  Comment 100 38 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 100 40 r10|DWORD = MOV [rdx|QWORD[.] + 12] size: DWORD state [bci:0]  <||@
  Comment 100 [rdx:0]at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 100 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 104 42 r11|DWORD = INC rcx|DWORD size: DWORD  <||@
  Comment 110 44 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD  <||@
  Comment 119 block B8 null  <||@
  Comment 119 90 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 119 92 CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD  <||@
  Comment 128 block B9 null  <||@
  Comment 128 94 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 128 96 r10|DWORD = SHL rsi|DWORD y: 5 size: DWORD  <||@
  Comment 135 98 r10|DWORD = SUB (x: r10|DWORD, ~y: rsi|DWORD) size: DWORD  <||@
  Comment 138 100 r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 144 102 r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 147 104 r8|DWORD = LEA [rcx|DWORD + 2] size: DWORD  <||@
  Comment 151 106 CMP (x: rax|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 154 108 r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r8|DWORD) condition: >  <||@
  Comment 161 110 JUMP ~[] destination: B9 -> B10  <||@
  Comment 166 block B11 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 166 116 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 192 118 r8|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 199 120 r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 202 122 r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 208 124 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 211 126 r11|DWORD = INC r11|DWORD size: DWORD  <||@
  Comment 214 128 r10|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 217 130 JUMP ~[] destination: B11 -> B10  <||@
  Comment 217 block B10 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 217 112 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 217 114 CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD  <||@
  Comment 222 block B12 null  <||@
  Comment 222 132 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 222 134 stack:28|DWORD = MOVE rax|DWORD moveKind: DWORD  <||@
  Comment 226 136 r8|DWORD = LEA [rax|DWORD - 16] size: DWORD  <||@
  Comment 230 138 CMP rax|DWORD y: -2147483632 size: DWORD  <||@
  Comment 236 140 r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000]  <||@
  Comment 242 142 r8|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r9|DWORD) condition: <  <||@
  Comment 246 144 stack:32|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 251 146 JUMP ~[] destination: B12 -> B13  <||@
  Comment 256 block B14 loop 1 depth 1 header:147|LoopBegin  <||@
  Comment 256 152 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 256 154 r9|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 262 156 rcx|QWORD = MOVSXD r11|DWORD size: QWORD  <||@
  Comment 265 158 rbx|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 17] size: DWORD  <||@
  Comment 270 160 rdi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 18] size: DWORD  <||@
  Comment 275 162 rsi|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 19] size: DWORD  <||@
  Comment 280 164 rbp|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 20] size: DWORD  <||@
  Comment 285 166 r13|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 21] size: DWORD  <||@
  Comment 291 168 r14|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 22] size: DWORD  <||@
  Comment 297 170 rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 23] size: DWORD  <||@
  Comment 302 172 r8|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 24] size: DWORD  <||@
  Comment 308 174 stack:36|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 313 176 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 25] size: DWORD  <||@
  Comment 319 178 stack:40|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 324 180 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 26] size: DWORD  <||@
  Comment 330 182 stack:44|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 335 184 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 27] size: DWORD  <||@
  Comment 341 186 stack:48|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 346 188 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 28] size: DWORD  <||@
  Comment 352 190 stack:52|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 357 192 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 29] size: DWORD  <||@
  Comment 363 194 stack:56|DWORD = MOVE r11|DWORD moveKind: DWORD  <||@
  Comment 368 196 r11|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 30] size: DWORD  <||@
  Comment 374 198 stack:64|QWORD = MOVE rcx|QWORD moveKind: QWORD  <||@
  Comment 378 200 rcx|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 384 202 rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 387 204 rcx|DWORD = ADD (x: rcx|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 390 206 r10|DWORD = SHL rcx|DWORD y: 5 size: DWORD  <||@
  Comment 397 208 r10|DWORD = SUB (x: r10|DWORD, ~y: rcx|DWORD) size: DWORD  <||@
  Comment 400 210 r10|DWORD = ADD (x: r10|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 403 212 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 410 214 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 413 216 r9|DWORD = ADD (x: r9|DWORD, y: rdi|DWORD) size: DWORD  <||@
  Comment 416 218 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 423 220 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 426 222 r10|DWORD = ADD (x: r10|DWORD, y: rsi|DWORD) size: DWORD  <||@
  Comment 429 224 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 436 226 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 439 228 r9|DWORD = ADD (x: r9|DWORD, y: rbp|DWORD) size: DWORD  <||@
  Comment 442 230 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 449 232 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 452 234 r10|DWORD = ADD (x: r10|DWORD, y: r13|DWORD) size: DWORD  <||@
  Comment 455 236 r9|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 462 238 r9|DWORD = SUB (x: r9|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 465 240 r9|DWORD = ADD (x: r9|DWORD, y: r14|DWORD) size: DWORD  <||@
  Comment 468 242 r10|DWORD = SHL r9|DWORD y: 5 size: DWORD  <||@
  Comment 475 244 r10|DWORD = SUB (x: r10|DWORD, ~y: r9|DWORD) size: DWORD  <||@
  Comment 478 246 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 481 248 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 487 250 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 490 252 rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 493 254 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 500 256 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 503 258 r10|DWORD = ADD (x: r10|DWORD, y: stack:40|DWORD) size: DWORD  <||@
  Comment 508 260 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 514 262 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 517 264 rax|DWORD = ADD (x: rax|DWORD, y: stack:44|DWORD) size: DWORD  <||@
  Comment 521 266 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 528 268 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 531 270 r10|DWORD = ADD (x: r10|DWORD, y: stack:48|DWORD) size: DWORD  <||@
  Comment 536 272 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 542 274 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 545 276 rax|DWORD = ADD (x: rax|DWORD, y: stack:52|DWORD) size: DWORD  <||@
  Comment 549 278 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 556 280 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 559 282 r10|DWORD = ADD (x: r10|DWORD, y: stack:56|DWORD) size: DWORD  <||@
  Comment 564 284 rax|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 570 286 rax|DWORD = SUB (x: rax|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 573 288 rax|DWORD = ADD (x: rax|DWORD, y: r11|DWORD) size: DWORD  <||@
  Comment 576 290 r10|DWORD = SHL rax|DWORD y: 5 size: DWORD  <||@
  Comment 583 292 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 586 294 rcx|QWORD = MOVE stack:64|QWORD moveKind: QWORD  <||@
  Comment 590 296 rax|DWORD = MOVSXB [rdx|QWORD[.] + rcx|QWORD * 1 + 31] size: DWORD  <||@
  Comment 595 298 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 598 300 r11|DWORD = MOVE stack:36|DWORD moveKind: DWORD  <||@
  Comment 603 302 r11|DWORD = LEA [r11|DWORD + 16] size: DWORD  <||@
  Comment 607 304 r8|DWORD = MOVE stack:32|DWORD moveKind: DWORD  <||@
  Comment 612 306 JUMP ~[] destination: B14 -> B13  <||@
  Comment 612 block B13 loop 1 depth 1 header:147|LoopBegin  <||@
  Comment 612 148 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 612 150 CMPBRANCH (x: r8|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5813635227954954 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD  <||@
  Comment 621 block B15 null  <||@
  Comment 621 308 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 621 310 rax|DWORD = MOVE stack:28|DWORD moveKind: DWORD  <||@
  Comment 625 312 JUMP ~[] destination: B15 -> B16  <||@
  Comment 630 block B17 loop 2 depth 1 header:170|LoopBegin  <||@
  Comment 630 318 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 640 320 r8|DWORD = SHL r10|DWORD y: 5 size: DWORD  <||@
  Comment 647 322 r8|DWORD = SUB (x: r8|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 650 324 r10|DWORD = MOVSXB [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 656 326 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 659 328 r11|DWORD = INC r11|DWORD size: DWORD  <||@
  Comment 662 330 r10|DWORD = MOVE r8|DWORD moveKind: DWORD  <||@
  Comment 665 332 JUMP ~[] destination: B17 -> B16  <||@
  Comment 665 block B16 loop 2 depth 1 header:170|LoopBegin  <||@
  Comment 665 314 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 665 316 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD  <||@
  Comment 670 block B22 null  <||@
  Comment 670 360 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 670 362 rax|DWORD = MOVE r10|DWORD moveKind: DWORD  <||@
  Comment 673 364 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@285aeac6  <||@
  Comment 682 POLL_RETURN_FAR  <||@
  Comment 696 block B2 null  <||@
  Comment 696 46 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 696 48 r9|QWORD = MOVSXD r11|DWORD size: QWORD  <||@
  Comment 699 50 rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 704 52 rbx|QWORD = MOVSXD rbx|DWORD size: QWORD  <||@
  Comment 707 54 r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD  <||@
  Comment 710 56 r9|QWORD = DEC r9|QWORD size: QWORD  <||@
  Comment 713 58 rbx|QWORD = MOV r10|DWORD size: DWORD  <||@
  Comment 716 60 CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD  <||@
  Comment 725 block B3 null  <||@
  Comment 725 62 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 725 64 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD  <||@
  Comment 739 block B21 null  <||@
  Comment 739 354 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 739 356 r10|DWORD = MOVE rsi|DWORD moveKind: DWORD  <||@
  Comment 742 358 JUMP ~[] destination: B21 -> B22  <||@
  Comment 744 block B6 null  <||@
  Comment 744 78 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 744 80 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 751 82 r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5]  <||@
  Comment 757 84 JUMP ~[] destination: B6 -> B20  <||@
  Comment 757 block B20 null  <||@
  Comment 757 346 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 757 348 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 764 350 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 771 352 DEOPT info [bci:0]  <||@
  Comment 771 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f02c54335a8, value=139649430892922]:0x7f02aab8b17a}  <||@
  Comment 776 [rdx:0]at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 784 block B19 null  <||@
  Comment 784 338 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 784 340 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 791 342 r10|DWORD = MOVE input: int[-23067|0xffffffffffffa5e5]  <||@
  Comment 797 344 JUMP ~[] destination: B19 -> B20  <||@
  Comment 799 block B5 null  <||@
  Comment 799 70 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 799 72 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 806 74 r10|DWORD = MOVE input: int[-25883|0xffffffffffff9ae5]  <||@
  Comment 812 76 JUMP ~[] destination: B5 -> B20  <||@
  Comment 819 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f02c5433598, value=139649430762016]:0x7f02aab6b220}  <||@
  Comment 844 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f02c54335a0, value=139649430896640]:0x7f02aab8c000}  <||@
  Comment 872 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f02c54335a8, value=139649430892922]:0x7f02aab8b17a}  <||@
  Comment 877 [rdx:0]at jdk.internal.util.ArraysSupport.hashCode(ArraysSupport.java:223) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 885 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f02aacc7700:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 885 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 891 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f02c54335b8, value=139649430892320]:0x7f02aab8af20}  <||@
  Comment 891 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
