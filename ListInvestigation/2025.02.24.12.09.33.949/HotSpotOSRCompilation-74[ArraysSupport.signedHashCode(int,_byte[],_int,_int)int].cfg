begin_compilation
  name " HotSpotOSRCompilation-74[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)@8]"
  method "HotSpotOSRCompilation-74[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)@8]"
  date 1740398974648
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v212 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: i217 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: i217  <|@  <|@
f <@~|@floating>@ <|@
tid j213 <|@
d <@d|@=== Debug Properties ===
index: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i64
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
v214 v509 v510 v511 v512 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v509 <|@
d <@d|@=== Debug Properties ===
displacement: 40
stamp: void*
stride: S1
=== Inputs ===
base: j213 
index: - 
=== Succesors ===
=== Usages ===
i217 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j213 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i217 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v509 
lastLocationAccess: - 
=== Succesors ===
next: a220 
=== Usages ===
?54 i98 i97 i81 
=== Predecessor ===
v212 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v509 lastLocationAccess: - #next: a220  <|@  <|@
f <@~|@floating>@ <|@
tid v510 <|@
d <@d|@=== Debug Properties ===
displacement: 32
stamp: void*
stride: S1
=== Inputs ===
base: j213 
index: - 
=== Succesors ===
=== Usages ===
a220 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j213 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a220 <|@
d <@d|@=== Debug Properties ===
accessStamp: a java.lang.Object
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: a java.lang.Object
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v510 
lastLocationAccess: - 
=== Succesors ===
next: i223 
=== Usages ===
v126 ?54 v521 v522 v520 v505 v506 v507 v508 v513 v514 v515 v516 v517 v518 v519 
=== Predecessor ===
i217 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v510 lastLocationAccess: - #next: i223  <|@  <|@
f <@~|@floating>@ <|@
tid v511 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S1
=== Inputs ===
base: j213 
index: - 
=== Succesors ===
=== Usages ===
i223 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j213 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i223 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v511 
lastLocationAccess: - 
=== Succesors ===
next: i226 
=== Usages ===
?54 v55 i292 v189 v102 i178 i406 v267 v291 
=== Predecessor ===
a220 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v511 lastLocationAccess: - #next: i226  <|@  <|@
f <@~|@floating>@ <|@
tid v512 <|@
d <@d|@=== Debug Properties ===
displacement: 0
stamp: void*
stride: S1
=== Inputs ===
base: j213 
index: - 
=== Succesors ===
=== Usages ===
i226 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j213 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i226 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v512 
lastLocationAccess: - 
=== Succesors ===
next: v214 
=== Usages ===
?54 v55 j167 i73 i123 v135 i294 
=== Predecessor ===
i223 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v512 lastLocationAccess: - #next: v214  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v214 <|@
d <@d|@=== Debug Properties ===
bci: -5
descriptor: HotSpotForeignCallDescriptor{OSR_migration_end(long)void, callSideEffect=HAS_SIDE_EFFECT, canDeoptimize=false, isGuaranteedSafepoint=false, killedLocations=[], transition=LEAF_NO_VZERO}
descriptorName: OSR_migration_end
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
validateDeoptFrameStates: true
=== Inputs ===
stateAfter: - 
stateDuring: - 
arguments: j213 
=== Succesors ===
next: v455 
=== Usages ===
=== Predecessor ===
i226 >@ <|@
instruction <@ForeignCall|@jdk.graal.compiler.nodes.extended.ForeignCallNode>@ stateAfter: - stateDuring: - arguments: j213 #next: v455  <|@  <|@
f <@~|@floating>@ <|@
tid v126 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a220 
=== Succesors ===
=== Usages ===
v473 v455 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a220  <|@  <|@
f <@*|@fixed>@ <|@
tid v455 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
profileData: INJECTED designatedSuccessorProbability: 0.09999999999999998
stamp: void
=== Inputs ===
condition: v126 
=== Succesors ===
trueSuccessor: v453 
falseSuccessor: v454 
=== Usages ===
=== Predecessor ===
v214 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v126 #trueSuccessor: v453 #falseSuccessor: v454  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v453 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v451 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v451  <|@  <|@
f <@~|@floating>@ <|@
tid v457 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
rawvalue: null
stableDimension: 0
stamp: Klass* NULL
stampKind: Klass*
value: Object[null]
=== Inputs ===
=== Succesors ===
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v451 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v456 
=== Predecessor ===
v453 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v454 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v491 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v491  <|@  <|@
f <@~|@floating>@ <|@
tid v522 <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: - 
=== Succesors ===
=== Usages ===
v491 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v491 <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140232611594240 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: Klass*!(compressed base: 140232611594240 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v522 
lastLocationAccess: - 
=== Succesors ===
next: v452 
=== Usages ===
v461 
=== Predecessor ===
v454 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v522 lastLocationAccess: - #next: v452  <|@  <|@
f <@~|@floating>@ <|@
tid v461 <|@
d <@d|@=== Debug Properties ===
encoding: base: 140232611594240 shift: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v491 
=== Succesors ===
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v491  <|@  <|@
f <@*|@fixed>@ <|@
tid v452 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v456 
=== Predecessor ===
v491 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid v462 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: Klass*
valueDescription: Klass*
=== Inputs ===
merge: v456 
values: v457 v461 
=== Succesors ===
=== Usages ===
v231 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v456 values: v457 v461  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v456 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v451 v452 
=== Succesors ===
next: v473 
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v451 v452 #next: v473  <|@  <|@
tid ?54 <|@
d <@d|@=== Debug Properties ===
bci: 8
bytecode: iload
code: ResolvedJavaMethodBytecode<ArraysSupport.signedHashCode(int, byte[], int, int)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
sourceFile: ArraysSupport.java
sourceLine: 216
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i217 a220 - - i223 i226 
=== Succesors ===
=== Usages ===
v440 i492 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i217 a220 - - i223 i226  <|@  <|@
f <@*|@fixed>@ <|@
tid v473 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
profileData: INJECTED designatedSuccessorProbability: 0.4
stamp: void
=== Inputs ===
condition: v126 
=== Succesors ===
trueSuccessor: v469 
falseSuccessor: v472 
=== Usages ===
=== Predecessor ===
v456 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v126 #trueSuccessor: v469 #falseSuccessor: v472  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v469 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v467 
=== Usages ===
=== Predecessor ===
v473 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v467  <|@  <|@
f <@*|@fixed>@ <|@
tid v467 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v466 
=== Predecessor ===
v469 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v472 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v471 
=== Usages ===
=== Predecessor ===
v473 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v471  <|@  <|@
f <@~|@floating>@ <|@
tid v228 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
rawvalue: meta{HotSpotType<[B, resolved>}
stableDimension: 0
stamp: Klass*!
stampKind: Klass*
value: meta{HotSpotType<[B, resolved>}
=== Inputs ===
=== Succesors ===
=== Usages ===
v231 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v231 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v462 
y: v228 
=== Succesors ===
=== Usages ===
v471 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v462 y: v228  <|@  <|@
f <@*|@fixed>@ <|@
tid v471 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v231 
=== Succesors ===
trueSuccessor: v470 
falseSuccessor: v194 
=== Usages ===
=== Predecessor ===
v472 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v231 #trueSuccessor: v470 #falseSuccessor: v194  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v470 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v468 
=== Usages ===
=== Predecessor ===
v471 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v468  <|@  <|@
f <@*|@fixed>@ <|@
tid v468 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v466 
=== Predecessor ===
v470 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v466 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v467 v468 
=== Succesors ===
next: v58 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v467 v468 #next: v58  <|@  <|@
f <@~|@floating>@ <|@
tid v55 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i226 
y: i223 
=== Succesors ===
=== Usages ===
v58 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i226 y: i223  <|@  <|@
f <@*|@fixed>@ <|@
tid v58 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: PROFILED designatedSuccessorProbability: 0.9223806489882901
stamp: void
=== Inputs ===
condition: v55 
=== Succesors ===
trueSuccessor: v57 
falseSuccessor: v56 
=== Usages ===
=== Predecessor ===
v466 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v55 #trueSuccessor: v57 #falseSuccessor: v56  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v57 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i492 
=== Usages ===
=== Predecessor ===
v58 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i492  <|@  <|@
f <@~|@floating>@ <|@
tid v505 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: - 
=== Succesors ===
=== Usages ===
i492 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i492 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-33291|0xffffffffffff7df5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?54 
guard: - 
address: v505 
lastLocationAccess: - 
=== Succesors ===
next: v203 
=== Usages ===
v135 v147 v186 j177 
=== Predecessor ===
v57 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?54 guard: - address: v505 lastLocationAccess: - #next: v203  <|@  <|@
f <@~|@floating>@ <|@
tid v135 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i226 
y: i492 
=== Succesors ===
=== Usages ===
v203 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i226 y: i492  <|@  <|@
f <@~|@floating>@ <|@
tid j224 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j439 j439 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v203 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v135 
=== Succesors ===
trueSuccessor: v200 
falseSuccessor: v202 
=== Usages ===
=== Predecessor ===
i492 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v135 #trueSuccessor: v200 #falseSuccessor: v202  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v200 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i493 
=== Usages ===
=== Predecessor ===
v203 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i493  <|@  <|@
f <@~|@floating>@ <|@
tid j167 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i226 
=== Succesors ===
=== Usages ===
v506 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i226  <|@  <|@
f <@~|@floating>@ <|@
tid v506 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j167 
=== Succesors ===
=== Usages ===
i493 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j167  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i493 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v506 
lastLocationAccess: - 
=== Succesors ===
next: v105 
=== Usages ===
i168 
=== Predecessor ===
v200 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v506 lastLocationAccess: - #next: v105  <|@  <|@
f <@~|@floating>@ <|@
tid i94 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i95 i97 i111 i251 i274 i303 i327 i337 i357 i367 i377 i386 i397 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i97 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i217 
y: i94 
=== Succesors ===
=== Usages ===
i98 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i217 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i98 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i97 
y: i217 
=== Succesors ===
=== Usages ===
i72 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i97 y: i217  <|@  <|@
f <@~|@floating>@ <|@
tid i168 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i493 
=== Succesors ===
=== Usages ===
i72 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i493  <|@  <|@
f <@~|@floating>@ <|@
tid i72 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i98 
y: i168 
=== Succesors ===
=== Usages ===
i81 i111 i112 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i98 y: i168  <|@  <|@
f <@~|@floating>@ <|@
tid i44 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i45 i73 i249 i272 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i73 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i226 
y: i44 
=== Succesors ===
=== Usages ===
j169 v102 v147 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i226 y: i44  <|@  <|@
f <@~|@floating>@ <|@
tid v102 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i73 
y: i223 
=== Succesors ===
=== Usages ===
v105 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i73 y: i223  <|@  <|@
f <@*|@fixed>@ <|@
tid v105 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.9158488948170731
stamp: void
=== Inputs ===
condition: v102 
=== Succesors ===
trueSuccessor: v104 
falseSuccessor: v103 
=== Usages ===
=== Predecessor ===
i493 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v102 #trueSuccessor: v104 #falseSuccessor: v103  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v104 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: v481 
=== Usages ===
=== Predecessor ===
v105 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v481  <|@  <|@
f <@~|@floating>@ <|@
tid i122 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i123 i318 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i123 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i226 
y: i122 
=== Succesors ===
=== Usages ===
i120 i178 j180 v186 v189 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i226 y: i122  <|@  <|@
f <@~|@floating>@ <|@
tid v189 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i123 
y: i223 
=== Succesors ===
=== Usages ===
v481 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i123 y: i223  <|@  <|@
f <@*|@fixed>@ <|@
tid v481 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v189 
=== Succesors ===
trueSuccessor: v480 
falseSuccessor: v477 
=== Usages ===
=== Predecessor ===
v104 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v189 #trueSuccessor: v480 #falseSuccessor: v477  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v480 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v489 
=== Usages ===
=== Predecessor ===
v481 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v489  <|@  <|@
f <@~|@floating>@ <|@
tid j180 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i123 
=== Succesors ===
=== Usages ===
j433 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i123  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i223 
y: i123 
=== Succesors ===
=== Usages ===
j181 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i223 y: i123  <|@  <|@
f <@~|@floating>@ <|@
tid j181 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i178 
=== Succesors ===
=== Usages ===
j433 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i178  <|@  <|@
f <@~|@floating>@ <|@
tid j433 <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967296 - 4294967294]
=== Inputs ===
x: j180 
y: j181 
=== Succesors ===
=== Usages ===
j434 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j180 y: j181  <|@  <|@
f <@~|@floating>@ <|@
tid j182 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -1
stableDimension: 0
stamp: i64 [-1]
stampKind: i64
value: long[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
j434 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j434 <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967297 - 4294967293]
=== Inputs ===
x: j433 
y: j182 
=== Succesors ===
=== Usages ===
v185 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j433 y: j182  <|@  <|@
f <@~|@floating>@ <|@
tid j177 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [0 - 2147483647] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i492 
=== Succesors ===
=== Usages ===
v185 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i492  <|@  <|@
f <@~|@floating>@ <|@
tid v185 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j434 
y: j177 
=== Succesors ===
=== Usages ===
v489 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: j434 y: j177  <|@  <|@
f <@~|@floating>@ <|@
tid j448 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 664
stableDimension: 0
stamp: i64 [664]
stampKind: i64
value: long[664|0x298]
=== Inputs ===
=== Succesors ===
=== Usages ===
j439 j439 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i447 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -40475
stableDimension: 0
stamp: i32 [-40475]
stampKind: i32
value: int[-40475|0xffffffffffff61e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i438 i438 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v489 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v185 
=== Succesors ===
trueSuccessor: v488 
falseSuccessor: v485 
=== Usages ===
=== Predecessor ===
v480 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v185 #trueSuccessor: v488 #falseSuccessor: v485  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v488 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v487 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v487  <|@  <|@
f <@~|@floating>@ <|@
tid v186 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i123 
y: i492 
=== Succesors ===
=== Usages ===
v487 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i123 y: i492  <|@  <|@
f <@*|@fixed>@ <|@
tid v487 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v186 
=== Succesors ===
trueSuccessor: v478 
falseSuccessor: v486 
=== Usages ===
=== Predecessor ===
v488 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v186 #trueSuccessor: v478 #falseSuccessor: v486  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v478 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v476 
=== Usages ===
=== Predecessor ===
v487 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v476  <|@  <|@
f <@*|@fixed>@ <|@
tid v476 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v474 
=== Predecessor ===
v478 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v486 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v490 
=== Usages ===
=== Predecessor ===
v487 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v490  <|@  <|@
f <@*|@fixed>@ <|@
tid v490 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
v486 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v485 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v446 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v446  <|@  <|@
f <@*|@fixed>@ <|@
tid v446 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
v485 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v477 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v475 
=== Usages ===
=== Predecessor ===
v481 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v475  <|@  <|@
f <@*|@fixed>@ <|@
tid v475 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v474 
=== Predecessor ===
v477 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v474 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v475 v476 
=== Succesors ===
next: v211 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v475 v476 #next: v211  <|@  <|@
f <@~|@floating>@ <|@
tid v147 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i73 
y: i492 
=== Succesors ===
=== Usages ===
v211 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i73 y: i492  <|@  <|@
f <@*|@fixed>@ <|@
tid v211 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v147 
=== Succesors ===
trueSuccessor: v208 
falseSuccessor: v210 
=== Usages ===
=== Predecessor ===
v474 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v147 #trueSuccessor: v208 #falseSuccessor: v210  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v208 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i494 
=== Usages ===
=== Predecessor ===
v211 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i494  <|@  <|@
f <@~|@floating>@ <|@
tid j169 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i73 
=== Succesors ===
=== Usages ===
v507 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i73  <|@  <|@
f <@~|@floating>@ <|@
tid v507 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j169 
=== Succesors ===
=== Usages ===
i494 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j169  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i494 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v507 
lastLocationAccess: - 
=== Succesors ===
next: v8 
=== Usages ===
i170 
=== Predecessor ===
v208 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v507 lastLocationAccess: - #next: v8  <|@  <|@
f <@~|@floating>@ <|@
tid i111 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i72 
y: i94 
=== Succesors ===
=== Usages ===
i112 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i72 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i112 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i111 
y: i72 
=== Succesors ===
=== Usages ===
i108 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i111 y: i72  <|@  <|@
f <@~|@floating>@ <|@
tid i170 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i494 
=== Succesors ===
=== Usages ===
i108 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i494  <|@  <|@
f <@~|@floating>@ <|@
tid i108 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i112 
y: i170 
=== Succesors ===
=== Usages ===
i121 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i112 y: i170  <|@  <|@
f <@~|@floating>@ <|@
tid i293 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 3
stableDimension: 0
stamp: i32 [3]
stampKind: i32
value: int[3|0x3]
=== Inputs ===
=== Succesors ===
=== Usages ===
i294 i347 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i294 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i226 
y: i293 
=== Succesors ===
=== Usages ===
v291 i292 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i226 y: i293  <|@  <|@
f <@~|@floating>@ <|@
tid v291 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i294 
y: i223 
=== Succesors ===
=== Usages ===
i292 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i294 y: i223  <|@  <|@
f <@~|@floating>@ <|@
tid i292 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v291 
trueValue: i294 
falseValue: i223 
=== Succesors ===
=== Usages ===
v21 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v291 trueValue: i294 falseValue: i223  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
i494 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i121 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i108 i43 
=== Succesors ===
=== Usages ===
i254 i95 i96 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i108 i43  <|@  <|@
f <@~|@floating>@ <|@
tid i120 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i123 i45 
=== Succesors ===
=== Usages ===
v21 i45 j171 i253 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i123 i45  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 10.883385225021215
loopType: PRE_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: true
peelings: 2
rotated: false
splits: 2
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: v27 
=== Usages ===
i121 v23 v46 i120 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: v27  <|@  <|@
f <@~|@floating>@ <|@
tid v21 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i120 
y: i292 
=== Succesors ===
=== Usages ===
v27 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i120 y: i292  <|@  <|@
f <@*|@fixed>@ <|@
tid v27 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v21 
=== Succesors ===
trueSuccessor: v26 
falseSuccessor: v23 
=== Usages ===
=== Predecessor ===
v9 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v21 #trueSuccessor: v26 #falseSuccessor: v23  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v26 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i495 
=== Usages ===
=== Predecessor ===
v27 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i495  <|@  <|@
f <@~|@floating>@ <|@
tid j171 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i120 
=== Succesors ===
=== Usages ===
v508 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i120  <|@  <|@
f <@~|@floating>@ <|@
tid v508 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j171 
=== Succesors ===
=== Usages ===
i495 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j171  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i495 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v508 
lastLocationAccess: - 
=== Succesors ===
next: v46 
=== Usages ===
i172 
=== Predecessor ===
v26 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v508 lastLocationAccess: - #next: v46  <|@  <|@
f <@~|@floating>@ <|@
tid i95 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i121 
y: i94 
=== Succesors ===
=== Usages ===
i96 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i121 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i96 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i95 
y: i121 
=== Succesors ===
=== Usages ===
i43 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i95 y: i121  <|@  <|@
f <@~|@floating>@ <|@
tid i172 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i495 
=== Succesors ===
=== Usages ===
i43 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i495  <|@  <|@
f <@~|@floating>@ <|@
tid i43 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i96 
y: i172 
=== Succesors ===
=== Usages ===
i121 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i96 y: i172  <|@  <|@
f <@~|@floating>@ <|@
tid i45 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i120 
y: i44 
=== Succesors ===
=== Usages ===
i120 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i120 y: i44  <|@  <|@
f <@*|@fixed>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i495 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v23 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v262 
=== Usages ===
=== Predecessor ===
v27 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v262  <|@  <|@
f <@~|@floating>@ <|@
tid i405 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -8
stableDimension: 0
stamp: i32 [-8]
stampKind: i32
value: int[-8|0xfffffffffffffff8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i406 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i406 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i223 
y: i405 
=== Succesors ===
=== Usages ===
v244 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i223 y: i405  <|@  <|@
f <@*|@fixed>@ <|@
tid v262 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v243 
=== Predecessor ===
v23 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i253 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v243 
values: i120 i402 
=== Succesors ===
=== Usages ===
v244 i249 j258 i276 i318 i347 i348 i397 i399 i401 i402 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v243 values: i120 i402  <|@  <|@
f <@~|@floating>@ <|@
tid i254 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v243 
values: i121 i385 
=== Succesors ===
=== Usages ===
i251 i252 i277 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v243 values: i121 i385  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v243 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 10.883385225021215
loopType: MAIN_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: true
peelings: 2
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 8
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v262 
=== Succesors ===
next: v247 
=== Usages ===
v245 v250 i253 i254 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v262 #next: v247  <|@  <|@
f <@~|@floating>@ <|@
tid v244 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i253 
y: i406 
=== Succesors ===
=== Usages ===
v247 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i253 y: i406  <|@  <|@
f <@*|@fixed>@ <|@
tid v247 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.26493459207822856
stamp: void
=== Inputs ===
condition: v244 
=== Succesors ===
trueSuccessor: v246 
falseSuccessor: v245 
=== Usages ===
=== Predecessor ===
v243 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v244 #trueSuccessor: v246 #falseSuccessor: v245  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v246 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i496 
=== Usages ===
=== Predecessor ===
v247 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i496  <|@  <|@
f <@~|@floating>@ <|@
tid j258 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i253 
=== Succesors ===
=== Usages ===
v513 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i253  <|@  <|@
f <@~|@floating>@ <|@
tid v513 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j258 
=== Succesors ===
=== Usages ===
i496 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j258  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i496 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v513 
lastLocationAccess: - 
=== Succesors ===
next: i497 
=== Usages ===
i259 
=== Predecessor ===
v246 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v513 lastLocationAccess: - #next: i497  <|@  <|@
f <@~|@floating>@ <|@
tid i249 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i44 
=== Succesors ===
=== Usages ===
j308 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i44  <|@  <|@
f <@~|@floating>@ <|@
tid j308 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i249 
=== Succesors ===
=== Usages ===
v515 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i249  <|@  <|@
f <@~|@floating>@ <|@
tid v515 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j308 
=== Succesors ===
=== Usages ===
i497 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j308  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i497 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v515 
lastLocationAccess: - 
=== Succesors ===
next: i498 
=== Usages ===
i309 
=== Predecessor ===
i496 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v515 lastLocationAccess: - #next: i498  <|@  <|@
f <@~|@floating>@ <|@
tid i318 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i122 
=== Succesors ===
=== Usages ===
j332 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i122  <|@  <|@
f <@~|@floating>@ <|@
tid j332 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i318 
=== Succesors ===
=== Usages ===
v516 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i318  <|@  <|@
f <@~|@floating>@ <|@
tid v516 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j332 
=== Succesors ===
=== Usages ===
i498 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j332  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i498 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v516 
lastLocationAccess: - 
=== Succesors ===
next: i499 
=== Usages ===
i333 
=== Predecessor ===
i497 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v516 lastLocationAccess: - #next: i499  <|@  <|@
f <@~|@floating>@ <|@
tid i347 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i293 
=== Succesors ===
=== Usages ===
j342 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i293  <|@  <|@
f <@~|@floating>@ <|@
tid j342 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i347 
=== Succesors ===
=== Usages ===
v517 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i347  <|@  <|@
f <@~|@floating>@ <|@
tid v517 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j342 
=== Succesors ===
=== Usages ===
i499 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j342  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i499 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v517 
lastLocationAccess: - 
=== Succesors ===
next: i500 
=== Usages ===
i343 
=== Predecessor ===
i498 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v517 lastLocationAccess: - #next: i500  <|@  <|@
f <@~|@floating>@ <|@
tid i346 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 4
stableDimension: 0
stamp: i32 [4]
stampKind: i32
value: int[4|0x4]
=== Inputs ===
=== Succesors ===
=== Usages ===
i348 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i348 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i346 
=== Succesors ===
=== Usages ===
j362 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i346  <|@  <|@
f <@~|@floating>@ <|@
tid j362 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i348 
=== Succesors ===
=== Usages ===
v518 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i348  <|@  <|@
f <@~|@floating>@ <|@
tid v518 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j362 
=== Succesors ===
=== Usages ===
i500 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j362  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i500 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v518 
lastLocationAccess: - 
=== Succesors ===
next: i501 
=== Usages ===
i363 
=== Predecessor ===
i499 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v518 lastLocationAccess: - #next: i501  <|@  <|@
f <@~|@floating>@ <|@
tid i397 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i94 
=== Succesors ===
=== Usages ===
j372 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid j372 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i397 
=== Succesors ===
=== Usages ===
v519 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i397  <|@  <|@
f <@~|@floating>@ <|@
tid v519 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j372 
=== Succesors ===
=== Usages ===
i501 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j372  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i501 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v519 
lastLocationAccess: - 
=== Succesors ===
next: i502 
=== Usages ===
i373 
=== Predecessor ===
i500 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v519 lastLocationAccess: - #next: i502  <|@  <|@
f <@~|@floating>@ <|@
tid i398 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 6
stableDimension: 0
stamp: i32 [6]
stampKind: i32
value: int[6|0x6]
=== Inputs ===
=== Succesors ===
=== Usages ===
i399 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i399 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i398 
=== Succesors ===
=== Usages ===
j382 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i398  <|@  <|@
f <@~|@floating>@ <|@
tid j382 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i399 
=== Succesors ===
=== Usages ===
v520 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i399  <|@  <|@
f <@~|@floating>@ <|@
tid v520 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j382 
=== Succesors ===
=== Usages ===
i502 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j382  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i502 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v520 
lastLocationAccess: - 
=== Succesors ===
next: i503 
=== Usages ===
i383 
=== Predecessor ===
i501 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v520 lastLocationAccess: - #next: i503  <|@  <|@
f <@~|@floating>@ <|@
tid i400 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i401 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i401 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i400 
=== Succesors ===
=== Usages ===
j391 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i400  <|@  <|@
f <@~|@floating>@ <|@
tid j391 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i401 
=== Succesors ===
=== Usages ===
v521 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i401  <|@  <|@
f <@~|@floating>@ <|@
tid v521 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j391 
=== Succesors ===
=== Usages ===
i503 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j391  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i503 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v521 
lastLocationAccess: - 
=== Succesors ===
next: v250 
=== Usages ===
i392 
=== Predecessor ===
i502 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v521 lastLocationAccess: - #next: v250  <|@  <|@
f <@~|@floating>@ <|@
tid i251 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i254 
y: i94 
=== Succesors ===
=== Usages ===
i252 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i254 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i252 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i251 
y: i254 
=== Succesors ===
=== Usages ===
i248 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i251 y: i254  <|@  <|@
f <@~|@floating>@ <|@
tid i259 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i496 
=== Succesors ===
=== Usages ===
i248 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i496  <|@  <|@
f <@~|@floating>@ <|@
tid i248 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i252 
y: i259 
=== Succesors ===
=== Usages ===
i304 i303 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i252 y: i259  <|@  <|@
f <@~|@floating>@ <|@
tid i303 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i248 
y: i94 
=== Succesors ===
=== Usages ===
i304 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i248 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i304 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i303 
y: i248 
=== Succesors ===
=== Usages ===
i300 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i303 y: i248  <|@  <|@
f <@~|@floating>@ <|@
tid i309 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i497 
=== Succesors ===
=== Usages ===
i300 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i497  <|@  <|@
f <@~|@floating>@ <|@
tid i300 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i304 
y: i309 
=== Succesors ===
=== Usages ===
i328 i327 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i304 y: i309  <|@  <|@
f <@~|@floating>@ <|@
tid i327 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i300 
y: i94 
=== Succesors ===
=== Usages ===
i328 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i300 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i328 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i327 
y: i300 
=== Succesors ===
=== Usages ===
i324 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i327 y: i300  <|@  <|@
f <@~|@floating>@ <|@
tid i333 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i498 
=== Succesors ===
=== Usages ===
i324 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i498  <|@  <|@
f <@~|@floating>@ <|@
tid i324 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i328 
y: i333 
=== Succesors ===
=== Usages ===
i337 i338 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i328 y: i333  <|@  <|@
f <@~|@floating>@ <|@
tid i337 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i324 
y: i94 
=== Succesors ===
=== Usages ===
i338 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i324 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i338 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i337 
y: i324 
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i337 y: i324  <|@  <|@
f <@~|@floating>@ <|@
tid i343 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i499 
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i499  <|@  <|@
f <@~|@floating>@ <|@
tid i336 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i338 
y: i343 
=== Succesors ===
=== Usages ===
i358 i357 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i338 y: i343  <|@  <|@
f <@~|@floating>@ <|@
tid i357 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i336 
y: i94 
=== Succesors ===
=== Usages ===
i358 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i336 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i358 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i357 
y: i336 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i357 y: i336  <|@  <|@
f <@~|@floating>@ <|@
tid i363 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i500 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i500  <|@  <|@
f <@~|@floating>@ <|@
tid i354 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i358 
y: i363 
=== Succesors ===
=== Usages ===
i367 i368 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i358 y: i363  <|@  <|@
f <@~|@floating>@ <|@
tid i367 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i354 
y: i94 
=== Succesors ===
=== Usages ===
i368 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i354 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i368 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i367 
y: i354 
=== Succesors ===
=== Usages ===
i366 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i367 y: i354  <|@  <|@
f <@~|@floating>@ <|@
tid i373 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i501 
=== Succesors ===
=== Usages ===
i366 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i501  <|@  <|@
f <@~|@floating>@ <|@
tid i366 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i368 
y: i373 
=== Succesors ===
=== Usages ===
i377 i378 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i368 y: i373  <|@  <|@
f <@~|@floating>@ <|@
tid i377 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i366 
y: i94 
=== Succesors ===
=== Usages ===
i378 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i366 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i378 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i377 
y: i366 
=== Succesors ===
=== Usages ===
i376 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i377 y: i366  <|@  <|@
f <@~|@floating>@ <|@
tid i383 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i502 
=== Succesors ===
=== Usages ===
i376 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i502  <|@  <|@
f <@~|@floating>@ <|@
tid i376 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i378 
y: i383 
=== Succesors ===
=== Usages ===
i386 i387 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i378 y: i383  <|@  <|@
f <@~|@floating>@ <|@
tid i386 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i376 
y: i94 
=== Succesors ===
=== Usages ===
i387 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i376 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i387 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i386 
y: i376 
=== Succesors ===
=== Usages ===
i385 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i386 y: i376  <|@  <|@
f <@~|@floating>@ <|@
tid i392 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i503 
=== Succesors ===
=== Usages ===
i385 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i503  <|@  <|@
f <@~|@floating>@ <|@
tid i385 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i387 
y: i392 
=== Succesors ===
=== Usages ===
i254 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i387 y: i392  <|@  <|@
f <@~|@floating>@ <|@
tid i396 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 8
stableDimension: 0
stamp: i32 [8]
stampKind: i32
value: int[8|0x8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i402 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i402 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i396 
=== Succesors ===
=== Usages ===
i253 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i396  <|@  <|@
f <@*|@fixed>@ <|@
tid v250 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v243 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i503 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v243  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v245 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v243 
=== Succesors ===
next: v285 
=== Usages ===
=== Predecessor ===
v247 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v243 #next: v285  <|@  <|@
f <@*|@fixed>@ <|@
tid v285 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v266 
=== Predecessor ===
v245 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i276 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v266 
values: i253 i272 
=== Succesors ===
=== Usages ===
v267 i272 j281 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v266 values: i253 i272  <|@  <|@
f <@~|@floating>@ <|@
tid i277 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v266 
values: i254 i271 
=== Succesors ===
=== Usages ===
i274 i275 i81 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v266 values: i254 i271  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v266 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 10.883385225021215
loopType: POST_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: true
peelings: 2
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v285 
=== Succesors ===
next: v270 
=== Usages ===
v268 v273 i276 i277 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v285 #next: v270  <|@  <|@
f <@~|@floating>@ <|@
tid v267 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i276 
y: i223 
=== Succesors ===
=== Usages ===
v270 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i276 y: i223  <|@  <|@
f <@*|@fixed>@ <|@
tid v270 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v267 
=== Succesors ===
trueSuccessor: v269 
falseSuccessor: v268 
=== Usages ===
=== Predecessor ===
v266 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v267 #trueSuccessor: v269 #falseSuccessor: v268  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v269 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i504 
=== Usages ===
=== Predecessor ===
v270 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i504  <|@  <|@
f <@~|@floating>@ <|@
tid j281 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i276 
=== Succesors ===
=== Usages ===
v514 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i276  <|@  <|@
f <@~|@floating>@ <|@
tid v514 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j281 
=== Succesors ===
=== Usages ===
i504 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j281  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i504 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v514 
lastLocationAccess: - 
=== Succesors ===
next: v273 
=== Usages ===
i282 
=== Predecessor ===
v269 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v514 lastLocationAccess: - #next: v273  <|@  <|@
f <@~|@floating>@ <|@
tid i274 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i277 
y: i94 
=== Succesors ===
=== Usages ===
i275 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i277 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i275 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i274 
y: i277 
=== Succesors ===
=== Usages ===
i271 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i274 y: i277  <|@  <|@
f <@~|@floating>@ <|@
tid i282 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i504 
=== Succesors ===
=== Usages ===
i271 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i504  <|@  <|@
f <@~|@floating>@ <|@
tid i271 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i275 
y: i282 
=== Succesors ===
=== Usages ===
i277 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i275 y: i282  <|@  <|@
f <@~|@floating>@ <|@
tid i272 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i276 
y: i44 
=== Succesors ===
=== Usages ===
i276 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i276 y: i44  <|@  <|@
f <@*|@fixed>@ <|@
tid v273 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v266 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i504 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v266  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v268 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v266 
=== Succesors ===
next: v77 
=== Usages ===
=== Predecessor ===
v270 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v266 #next: v77  <|@  <|@
f <@*|@fixed>@ <|@
tid v77 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v76 
=== Predecessor ===
v268 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v210 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v449 
=== Usages ===
=== Predecessor ===
v211 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v449  <|@  <|@
f <@~|@floating>@ <|@
tid i450 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -37915
stableDimension: 0
stamp: i32 [-37915]
stampKind: i32
value: int[-37915|0xffffffffffff6be5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i438 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v449 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
v210 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v103 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v124 
=== Usages ===
=== Predecessor ===
v105 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v124  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v76 
=== Predecessor ===
v103 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v202 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v444 
=== Usages ===
=== Predecessor ===
v203 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v444  <|@  <|@
f <@~|@floating>@ <|@
tid i445 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -34843
stableDimension: 0
stamp: i32 [-34843]
stampKind: i32
value: int[-34843|0xffffffffffff77e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i438 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v444 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
v202 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v56 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v78 
=== Usages ===
=== Predecessor ===
v58 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v78  <|@  <|@
f <@*|@fixed>@ <|@
tid v78 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v76 
=== Predecessor ===
v56 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i81 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v76 
values: i277 i217 i72 
=== Succesors ===
=== Usages ===
v47 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v76 values: i277 i217 i72  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v76 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v77 v78 v124 
=== Succesors ===
next: v47 
=== Usages ===
i81 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v77 v78 v124 #next: v47  <|@  <|@
f <@*|@fixed>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 36]
stamp: void
=== Inputs ===
memoryMap: - 
result: i81 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v76 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i81  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v194 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v441 
=== Usages ===
=== Predecessor ===
v471 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v441  <|@  <|@
f <@~|@floating>@ <|@
tid j443 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 20
stableDimension: 0
stamp: i64 [20]
stampKind: i64
value: long[20|0x14]
=== Inputs ===
=== Succesors ===
=== Usages ===
j439 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i442 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -32828
stableDimension: 0
stamp: i32 [-32828]
stampKind: i32
value: int[-32828|0xffffffffffff7fc4]
=== Inputs ===
=== Succesors ===
=== Usages ===
i438 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v441 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
v194 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i438 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [-40475 - -32828] bits:1...1011xxxx111x0010x
valueDescription: i32
=== Inputs ===
merge: v435 
values: i442 i445 i447 i450 i447 
=== Succesors ===
=== Usages ===
v440 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v435 values: i442 i445 i447 i450 i447  <|@  <|@
f <@~|@floating>@ <|@
tid j439 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i64 [0 - 664] bits:0...0x0x00xxx00
valueDescription: i64
=== Inputs ===
merge: v435 
values: j443 j224 j448 j224 j448 
=== Succesors ===
=== Usages ===
v440 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v435 values: j443 j224 j448 j224 j448  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v435 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v441 v444 v446 v449 v490 
=== Succesors ===
next: v440 
=== Usages ===
i438 j439 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v441 v444 v446 v449 v490 #next: v440  <|@  <|@
f <@*|@fixed>@ <|@
tid v440 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateBefore: ?54 
actionAndReason: i438 
speculation: j439 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v435 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?54 actionAndReason: i438 speculation: j439  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   -1  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [Object[null]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v8|QWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v16|DWORD] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v34|DWORD, v35|DWORD] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v29|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v78|DWORD, v77|DWORD] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v37|DWORD, v38|DWORD] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v85|DWORD, v84|DWORD] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v80|DWORD] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v14|DWORD] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v1|DWORD] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v86|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-34843|0xffffffffffff77e5], long[0|0x0]] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-37915|0xffffffffffff6be5], long[0|0x0]] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32828|0xffffffffffff7fc4], long[20|0x14]] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr   -1  <|@ instruction [v87|DWORD, v88|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v212 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: i217 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: i217  <|@  <|@
f <@~|@floating>@ <|@
tid j213 <|@
result v0|QWORD <|@
d <@d|@=== Debug Properties ===
index: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i64
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
v214 v509 v510 v511 v512 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v509 <|@
result [v0|QWORD + 40] <|@
d <@d|@=== Debug Properties ===
displacement: 40
stamp: void*
stride: S1
=== Inputs ===
base: j213 
index: - 
=== Succesors ===
=== Usages ===
i217 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j213 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i217 <|@
result v1|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v509 
lastLocationAccess: - 
=== Succesors ===
next: a220 
=== Usages ===
?54 i98 i97 i81 
=== Predecessor ===
v212 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v509 lastLocationAccess: - #next: a220  <|@  <|@
f <@~|@floating>@ <|@
tid v510 <|@
result [v0|QWORD + 32] <|@
d <@d|@=== Debug Properties ===
displacement: 32
stamp: void*
stride: S1
=== Inputs ===
base: j213 
index: - 
=== Succesors ===
=== Usages ===
a220 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j213 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a220 <|@
result v2|QWORD[.] <|@
d <@d|@=== Debug Properties ===
accessStamp: a java.lang.Object
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: a java.lang.Object
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v510 
lastLocationAccess: - 
=== Succesors ===
next: i223 
=== Usages ===
v126 ?54 v521 v522 v520 v505 v506 v507 v508 v513 v514 v515 v516 v517 v518 v519 
=== Predecessor ===
i217 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v510 lastLocationAccess: - #next: i223  <|@  <|@
f <@~|@floating>@ <|@
tid v511 <|@
result [v0|QWORD + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S1
=== Inputs ===
base: j213 
index: - 
=== Succesors ===
=== Usages ===
i223 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j213 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i223 <|@
result v3|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v511 
lastLocationAccess: - 
=== Succesors ===
next: i226 
=== Usages ===
?54 v55 i292 v189 v102 i178 i406 v267 v291 
=== Predecessor ===
a220 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v511 lastLocationAccess: - #next: i226  <|@  <|@
f <@~|@floating>@ <|@
tid v512 <|@
result [v0|QWORD] <|@
d <@d|@=== Debug Properties ===
displacement: 0
stamp: void*
stride: S1
=== Inputs ===
base: j213 
index: - 
=== Succesors ===
=== Usages ===
i226 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j213 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i226 <|@
result v4|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ANY_LOCATION
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v512 
lastLocationAccess: - 
=== Succesors ===
next: v214 
=== Usages ===
?54 v55 j167 i73 i123 v135 i294 
=== Predecessor ===
i223 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v512 lastLocationAccess: - #next: v214  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v214 <|@
d <@d|@=== Debug Properties ===
bci: -5
descriptor: HotSpotForeignCallDescriptor{OSR_migration_end(long)void, callSideEffect=HAS_SIDE_EFFECT, canDeoptimize=false, isGuaranteedSafepoint=false, killedLocations=[], transition=LEAF_NO_VZERO}
descriptorName: OSR_migration_end
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
validateDeoptFrameStates: true
=== Inputs ===
stateAfter: - 
stateDuring: - 
arguments: j213 
=== Succesors ===
next: v455 
=== Usages ===
=== Predecessor ===
i226 >@ <|@
instruction <@ForeignCall|@jdk.graal.compiler.nodes.extended.ForeignCallNode>@ stateAfter: - stateDuring: - arguments: j213 #next: v455  <|@  <|@
f <@~|@floating>@ <|@
tid v126 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
nullConstant: Object[null]
stamp: void
=== Inputs ===
value: a220 
=== Succesors ===
=== Usages ===
v473 v455 
=== Predecessor ===
- >@ <|@
instruction <@IsNull|@jdk.graal.compiler.nodes.calc.IsNullNode>@ value: a220  <|@  <|@
f <@*|@fixed>@ <|@
tid v455 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
profileData: INJECTED designatedSuccessorProbability: 0.09999999999999998
stamp: void
=== Inputs ===
condition: v126 
=== Succesors ===
trueSuccessor: v453 
falseSuccessor: v454 
=== Usages ===
=== Predecessor ===
v214 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v126 #trueSuccessor: v453 #falseSuccessor: v454  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v453 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v451 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v451  <|@  <|@
f <@~|@floating>@ <|@
tid v457 <|@
result Object[null] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
rawvalue: null
stableDimension: 0
stamp: Klass* NULL
stampKind: Klass*
value: Object[null]
=== Inputs ===
=== Succesors ===
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v451 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v456 
=== Predecessor ===
v453 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [Object[null]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v454 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v491 
=== Usages ===
=== Predecessor ===
v455 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v491  <|@  <|@
f <@~|@floating>@ <|@
tid v522 <|@
result [v2|QWORD[.] + 8] <|@
d <@d|@=== Debug Properties ===
displacement: 8
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: - 
=== Succesors ===
=== Usages ===
v491 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v491 <|@
result v5|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: Klass*!(compressed base: 140232611594240 shift: 0)
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: CompressedHub:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: Klass*!(compressed base: 140232611594240 shift: 0)
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v522 
lastLocationAccess: - 
=== Succesors ===
next: v452 
=== Usages ===
v461 
=== Predecessor ===
v454 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v522 lastLocationAccess: - #next: v452  <|@  <|@
f <@~|@floating>@ <|@
tid v461 <|@
result v6|QWORD <|@
d <@d|@=== Debug Properties ===
encoding: base: 140232611594240 shift: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
op: Uncompress
stamp: Klass*!
=== Inputs ===
value: v491 
=== Succesors ===
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: v491  <|@  <|@
f <@*|@fixed>@ <|@
tid v452 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v456 
=== Predecessor ===
v491 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   -1  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid v462 <|@
result v8|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: Klass*
valueDescription: Klass*
=== Inputs ===
merge: v456 
values: v457 v461 
=== Succesors ===
=== Usages ===
v231 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v456 values: v457 v461  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v456 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v451 v452 
=== Succesors ===
next: v473 
=== Usages ===
v462 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v451 v452 #next: v473  <|@  <|@
tid ?54 <|@
d <@d|@=== Debug Properties ===
bci: 8
bytecode: iload
code: ResolvedJavaMethodBytecode<ArraysSupport.signedHashCode(int, byte[], int, int)>
localsSize: 6
locksSize: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
sourceFile: ArraysSupport.java
sourceLine: 216
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i217 a220 - - i223 i226 
=== Succesors ===
=== Usages ===
v440 i492 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i217 a220 - - i223 i226  <|@  <|@
f <@*|@fixed>@ <|@
tid v473 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
profileData: INJECTED designatedSuccessorProbability: 0.4
stamp: void
=== Inputs ===
condition: v126 
=== Succesors ===
trueSuccessor: v469 
falseSuccessor: v472 
=== Usages ===
=== Predecessor ===
v456 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v126 #trueSuccessor: v469 #falseSuccessor: v472  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v8|QWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v469 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v467 
=== Usages ===
=== Predecessor ===
v473 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v467  <|@  <|@
f <@*|@fixed>@ <|@
tid v467 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v466 
=== Predecessor ===
v469 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v472 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v471 
=== Usages ===
=== Predecessor ===
v473 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v471  <|@  <|@
f <@~|@floating>@ <|@
tid v228 <|@
result v9|QWORD <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
rawvalue: meta{HotSpotType<[B, resolved>}
stableDimension: 0
stamp: Klass*!
stampKind: Klass*
value: meta{HotSpotType<[B, resolved>}
=== Inputs ===
=== Succesors ===
=== Usages ===
v231 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v231 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: v462 
y: v228 
=== Succesors ===
=== Usages ===
v471 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.PointerEqualsNode>@ x: v462 y: v228  <|@  <|@
f <@*|@fixed>@ <|@
tid v471 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v231 
=== Succesors ===
trueSuccessor: v470 
falseSuccessor: v194 
=== Usages ===
=== Predecessor ===
v472 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v231 #trueSuccessor: v470 #falseSuccessor: v194  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v470 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v468 
=== Usages ===
=== Predecessor ===
v471 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v468  <|@  <|@
f <@*|@fixed>@ <|@
tid v468 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v466 
=== Predecessor ===
v470 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v466 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v467 v468 
=== Succesors ===
next: v58 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v467 v468 #next: v58  <|@  <|@
f <@~|@floating>@ <|@
tid v55 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i226 
y: i223 
=== Succesors ===
=== Usages ===
v58 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i226 y: i223  <|@  <|@
f <@*|@fixed>@ <|@
tid v58 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: PROFILED designatedSuccessorProbability: 0.9223806489882901
stamp: void
=== Inputs ===
condition: v55 
=== Succesors ===
trueSuccessor: v57 
falseSuccessor: v56 
=== Usages ===
=== Predecessor ===
v466 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v55 #trueSuccessor: v57 #falseSuccessor: v56  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v57 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i492 
=== Usages ===
=== Predecessor ===
v58 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i492  <|@  <|@
f <@~|@floating>@ <|@
tid v505 <|@
result [v2|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: - 
=== Succesors ===
=== Usages ===
i492 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i492 <|@
result v10|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-33291|0xffffffffffff7df5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?54 
guard: - 
address: v505 
lastLocationAccess: - 
=== Succesors ===
next: v203 
=== Usages ===
v135 v147 v186 j177 
=== Predecessor ===
v57 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?54 guard: - address: v505 lastLocationAccess: - #next: v203  <|@  <|@
f <@~|@floating>@ <|@
tid v135 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i226 
y: i492 
=== Succesors ===
=== Usages ===
v203 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i226 y: i492  <|@  <|@
f <@~|@floating>@ <|@
tid j224 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j439 j439 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v203 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v135 
=== Succesors ===
trueSuccessor: v200 
falseSuccessor: v202 
=== Usages ===
=== Predecessor ===
i492 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v135 #trueSuccessor: v200 #falseSuccessor: v202  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v200 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i493 
=== Usages ===
=== Predecessor ===
v203 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i493  <|@  <|@
f <@~|@floating>@ <|@
tid j167 <|@
result v4|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i226 
=== Succesors ===
=== Usages ===
v506 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i226  <|@  <|@
f <@~|@floating>@ <|@
tid v506 <|@
result [v2|QWORD[.] + v4|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j167 
=== Succesors ===
=== Usages ===
i493 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j167  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i493 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v506 
lastLocationAccess: - 
=== Succesors ===
next: v105 
=== Usages ===
i168 
=== Predecessor ===
v200 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v506 lastLocationAccess: - #next: v105  <|@  <|@
f <@~|@floating>@ <|@
tid i94 <|@
result int[5|0x5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i95 i97 i111 i251 i274 i303 i327 i337 i357 i367 i377 i386 i397 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i97 <|@
result v11|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i217 
y: i94 
=== Succesors ===
=== Usages ===
i98 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i217 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i98 <|@
result v12|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i97 
y: i217 
=== Succesors ===
=== Usages ===
i72 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i97 y: i217  <|@  <|@
f <@~|@floating>@ <|@
tid i168 <|@
result v13|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i493 
=== Succesors ===
=== Usages ===
i72 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i493  <|@  <|@
f <@~|@floating>@ <|@
tid i72 <|@
result v14|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i98 
y: i168 
=== Succesors ===
=== Usages ===
i81 i111 i112 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i98 y: i168  <|@  <|@
f <@~|@floating>@ <|@
tid i44 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i45 i73 i249 i272 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i73 <|@
result v15|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i226 
y: i44 
=== Succesors ===
=== Usages ===
j169 v102 v147 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i226 y: i44  <|@  <|@
f <@~|@floating>@ <|@
tid v102 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i73 
y: i223 
=== Succesors ===
=== Usages ===
v105 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i73 y: i223  <|@  <|@
f <@*|@fixed>@ <|@
tid v105 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.9158488948170731
stamp: void
=== Inputs ===
condition: v102 
=== Succesors ===
trueSuccessor: v104 
falseSuccessor: v103 
=== Usages ===
=== Predecessor ===
i493 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v102 #trueSuccessor: v104 #falseSuccessor: v103  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v104 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: v481 
=== Usages ===
=== Predecessor ===
v105 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v481  <|@  <|@
f <@~|@floating>@ <|@
tid i122 <|@
result int[2|0x2] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i123 i318 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i123 <|@
result v16|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i226 
y: i122 
=== Succesors ===
=== Usages ===
i120 i178 j180 v186 v189 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i226 y: i122  <|@  <|@
f <@~|@floating>@ <|@
tid v189 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i123 
y: i223 
=== Succesors ===
=== Usages ===
v481 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i123 y: i223  <|@  <|@
f <@*|@fixed>@ <|@
tid v481 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v189 
=== Succesors ===
trueSuccessor: v480 
falseSuccessor: v477 
=== Usages ===
=== Predecessor ===
v104 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v189 #trueSuccessor: v480 #falseSuccessor: v477  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v480 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v489 
=== Usages ===
=== Predecessor ===
v481 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v489  <|@  <|@
f <@~|@floating>@ <|@
tid j180 <|@
result v17|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i123 
=== Succesors ===
=== Usages ===
j433 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i123  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
result v18|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i223 
y: i123 
=== Succesors ===
=== Usages ===
j181 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i223 y: i123  <|@  <|@
f <@~|@floating>@ <|@
tid j181 <|@
result v19|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i178 
=== Succesors ===
=== Usages ===
j433 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i178  <|@  <|@
f <@~|@floating>@ <|@
tid j433 <|@
result v20|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967296 - 4294967294]
=== Inputs ===
x: j180 
y: j181 
=== Succesors ===
=== Usages ===
j434 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j180 y: j181  <|@  <|@
f <@~|@floating>@ <|@
tid j182 <|@
result long[-1|0xffffffffffffffff] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -1
stableDimension: 0
stamp: i64 [-1]
stampKind: i64
value: long[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
j434 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j434 <|@
result v21|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967297 - 4294967293]
=== Inputs ===
x: j433 
y: j182 
=== Succesors ===
=== Usages ===
v185 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j433 y: j182  <|@  <|@
f <@~|@floating>@ <|@
tid j177 <|@
result v22|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [0 - 2147483647] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i492 
=== Succesors ===
=== Usages ===
v185 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i492  <|@  <|@
f <@~|@floating>@ <|@
tid v185 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j434 
y: j177 
=== Succesors ===
=== Usages ===
v489 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: j434 y: j177  <|@  <|@
f <@~|@floating>@ <|@
tid j448 <|@
result long[664|0x298] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 664
stableDimension: 0
stamp: i64 [664]
stampKind: i64
value: long[664|0x298]
=== Inputs ===
=== Succesors ===
=== Usages ===
j439 j439 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i447 <|@
result int[-40475|0xffffffffffff61e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -40475
stableDimension: 0
stamp: i32 [-40475]
stampKind: i32
value: int[-40475|0xffffffffffff61e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i438 i438 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v489 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v185 
=== Succesors ===
trueSuccessor: v488 
falseSuccessor: v485 
=== Usages ===
=== Predecessor ===
v480 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v185 #trueSuccessor: v488 #falseSuccessor: v485  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v488 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v487 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v487  <|@  <|@
f <@~|@floating>@ <|@
tid v186 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i123 
y: i492 
=== Succesors ===
=== Usages ===
v487 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i123 y: i492  <|@  <|@
f <@*|@fixed>@ <|@
tid v487 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v186 
=== Succesors ===
trueSuccessor: v478 
falseSuccessor: v486 
=== Usages ===
=== Predecessor ===
v488 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v186 #trueSuccessor: v478 #falseSuccessor: v486  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v478 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v476 
=== Usages ===
=== Predecessor ===
v487 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v476  <|@  <|@
f <@*|@fixed>@ <|@
tid v476 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v474 
=== Predecessor ===
v478 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v486 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v490 
=== Usages ===
=== Predecessor ===
v487 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v490  <|@  <|@
f <@*|@fixed>@ <|@
tid v490 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
v486 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v485 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v446 
=== Usages ===
=== Predecessor ===
v489 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v446  <|@  <|@
f <@*|@fixed>@ <|@
tid v446 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
v485 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v477 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v475 
=== Usages ===
=== Predecessor ===
v481 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v475  <|@  <|@
f <@*|@fixed>@ <|@
tid v475 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v474 
=== Predecessor ===
v477 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v474 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v475 v476 
=== Succesors ===
next: v211 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v475 v476 #next: v211  <|@  <|@
f <@~|@floating>@ <|@
tid v147 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i73 
y: i492 
=== Succesors ===
=== Usages ===
v211 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i73 y: i492  <|@  <|@
f <@*|@fixed>@ <|@
tid v211 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v147 
=== Succesors ===
trueSuccessor: v208 
falseSuccessor: v210 
=== Usages ===
=== Predecessor ===
v474 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v147 #trueSuccessor: v208 #falseSuccessor: v210  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v208 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i494 
=== Usages ===
=== Predecessor ===
v211 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i494  <|@  <|@
f <@~|@floating>@ <|@
tid j169 <|@
result v15|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i73 
=== Succesors ===
=== Usages ===
v507 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i73  <|@  <|@
f <@~|@floating>@ <|@
tid v507 <|@
result [v2|QWORD[.] + v15|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j169 
=== Succesors ===
=== Usages ===
i494 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j169  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i494 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v507 
lastLocationAccess: - 
=== Succesors ===
next: v8 
=== Usages ===
i170 
=== Predecessor ===
v208 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v507 lastLocationAccess: - #next: v8  <|@  <|@
f <@~|@floating>@ <|@
tid i111 <|@
result v23|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i72 
y: i94 
=== Succesors ===
=== Usages ===
i112 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i72 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i112 <|@
result v24|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i111 
y: i72 
=== Succesors ===
=== Usages ===
i108 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i111 y: i72  <|@  <|@
f <@~|@floating>@ <|@
tid i170 <|@
result v25|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i494 
=== Succesors ===
=== Usages ===
i108 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i494  <|@  <|@
f <@~|@floating>@ <|@
tid i108 <|@
result v26|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i112 
y: i170 
=== Succesors ===
=== Usages ===
i121 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i112 y: i170  <|@  <|@
f <@~|@floating>@ <|@
tid i293 <|@
result int[3|0x3] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 3
stableDimension: 0
stamp: i32 [3]
stampKind: i32
value: int[3|0x3]
=== Inputs ===
=== Succesors ===
=== Usages ===
i294 i347 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i294 <|@
result v27|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i226 
y: i293 
=== Succesors ===
=== Usages ===
v291 i292 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i226 y: i293  <|@  <|@
f <@~|@floating>@ <|@
tid v291 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i294 
y: i223 
=== Succesors ===
=== Usages ===
i292 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i294 y: i223  <|@  <|@
f <@~|@floating>@ <|@
tid i292 <|@
result v28|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v291 
trueValue: i294 
falseValue: i223 
=== Succesors ===
=== Usages ===
v21 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v291 trueValue: i294 falseValue: i223  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
i494 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v16|DWORD] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i121 <|@
result v29|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i108 i43 
=== Succesors ===
=== Usages ===
i254 i95 i96 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i108 i43  <|@  <|@
f <@~|@floating>@ <|@
tid i120 <|@
result v30|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i123 i45 
=== Succesors ===
=== Usages ===
v21 i45 j171 i253 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i123 i45  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 10.883385225021215
loopType: PRE_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: true
peelings: 2
rotated: false
splits: 2
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: v27 
=== Usages ===
i121 v23 v46 i120 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: v27  <|@  <|@
f <@~|@floating>@ <|@
tid v21 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i120 
y: i292 
=== Succesors ===
=== Usages ===
v27 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i120 y: i292  <|@  <|@
f <@*|@fixed>@ <|@
tid v27 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v21 
=== Succesors ===
trueSuccessor: v26 
falseSuccessor: v23 
=== Usages ===
=== Predecessor ===
v9 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v21 #trueSuccessor: v26 #falseSuccessor: v23  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v26 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i495 
=== Usages ===
=== Predecessor ===
v27 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i495  <|@  <|@
f <@~|@floating>@ <|@
tid j171 <|@
result v30|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i120 
=== Succesors ===
=== Usages ===
v508 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i120  <|@  <|@
f <@~|@floating>@ <|@
tid v508 <|@
result [v2|QWORD[.] + v30|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j171 
=== Succesors ===
=== Usages ===
i495 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j171  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i495 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v508 
lastLocationAccess: - 
=== Succesors ===
next: v46 
=== Usages ===
i172 
=== Predecessor ===
v26 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v508 lastLocationAccess: - #next: v46  <|@  <|@
f <@~|@floating>@ <|@
tid i95 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i121 
y: i94 
=== Succesors ===
=== Usages ===
i96 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i121 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i96 <|@
result v32|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i95 
y: i121 
=== Succesors ===
=== Usages ===
i43 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i95 y: i121  <|@  <|@
f <@~|@floating>@ <|@
tid i172 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i495 
=== Succesors ===
=== Usages ===
i43 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i495  <|@  <|@
f <@~|@floating>@ <|@
tid i43 <|@
result v34|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i96 
y: i172 
=== Succesors ===
=== Usages ===
i121 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i96 y: i172  <|@  <|@
f <@~|@floating>@ <|@
tid i45 <|@
result v35|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i120 
y: i44 
=== Succesors ===
=== Usages ===
i120 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i120 y: i44  <|@  <|@
f <@*|@fixed>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i495 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v34|DWORD, v35|DWORD] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v23 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v262 
=== Usages ===
=== Predecessor ===
v27 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v262  <|@  <|@
f <@~|@floating>@ <|@
tid i405 <|@
result int[-8|0xfffffffffffffff8] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -8
stableDimension: 0
stamp: i32 [-8]
stampKind: i32
value: int[-8|0xfffffffffffffff8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i406 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i406 <|@
result v36|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i223 
y: i405 
=== Succesors ===
=== Usages ===
v244 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i223 y: i405  <|@  <|@
f <@*|@fixed>@ <|@
tid v262 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v243 
=== Predecessor ===
v23 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v29|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i253 <|@
result v37|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v243 
values: i120 i402 
=== Succesors ===
=== Usages ===
v244 i249 j258 i276 i318 i347 i348 i397 i399 i401 i402 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v243 values: i120 i402  <|@  <|@
f <@~|@floating>@ <|@
tid i254 <|@
result v38|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v243 
values: i121 i385 
=== Succesors ===
=== Usages ===
i251 i252 i277 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v243 values: i121 i385  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v243 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 10.883385225021215
loopType: MAIN_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: true
peelings: 2
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 8
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v262 
=== Succesors ===
next: v247 
=== Usages ===
v245 v250 i253 i254 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v262 #next: v247  <|@  <|@
f <@~|@floating>@ <|@
tid v244 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i253 
y: i406 
=== Succesors ===
=== Usages ===
v247 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i253 y: i406  <|@  <|@
f <@*|@fixed>@ <|@
tid v247 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.26493459207822856
stamp: void
=== Inputs ===
condition: v244 
=== Succesors ===
trueSuccessor: v246 
falseSuccessor: v245 
=== Usages ===
=== Predecessor ===
v243 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v244 #trueSuccessor: v246 #falseSuccessor: v245  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v246 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i496 
=== Usages ===
=== Predecessor ===
v247 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i496  <|@  <|@
f <@~|@floating>@ <|@
tid j258 <|@
result v37|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i253 
=== Succesors ===
=== Usages ===
v513 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i253  <|@  <|@
f <@~|@floating>@ <|@
tid v513 <|@
result [v2|QWORD[.] + v37|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j258 
=== Succesors ===
=== Usages ===
i496 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j258  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i496 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v513 
lastLocationAccess: - 
=== Succesors ===
next: i497 
=== Usages ===
i259 
=== Predecessor ===
v246 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v513 lastLocationAccess: - #next: i497  <|@  <|@
f <@~|@floating>@ <|@
tid i249 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i44 
=== Succesors ===
=== Usages ===
j308 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i44  <|@  <|@
f <@~|@floating>@ <|@
tid j308 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i249 
=== Succesors ===
=== Usages ===
v515 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i249  <|@  <|@
f <@~|@floating>@ <|@
tid v515 <|@
result [v2|QWORD[.] + v40|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j308 
=== Succesors ===
=== Usages ===
i497 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j308  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i497 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v515 
lastLocationAccess: - 
=== Succesors ===
next: i498 
=== Usages ===
i309 
=== Predecessor ===
i496 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v515 lastLocationAccess: - #next: i498  <|@  <|@
f <@~|@floating>@ <|@
tid i318 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i122 
=== Succesors ===
=== Usages ===
j332 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i122  <|@  <|@
f <@~|@floating>@ <|@
tid j332 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i318 
=== Succesors ===
=== Usages ===
v516 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i318  <|@  <|@
f <@~|@floating>@ <|@
tid v516 <|@
result [v2|QWORD[.] + v42|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j332 
=== Succesors ===
=== Usages ===
i498 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j332  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i498 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v516 
lastLocationAccess: - 
=== Succesors ===
next: i499 
=== Usages ===
i333 
=== Predecessor ===
i497 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v516 lastLocationAccess: - #next: i499  <|@  <|@
f <@~|@floating>@ <|@
tid i347 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i293 
=== Succesors ===
=== Usages ===
j342 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i293  <|@  <|@
f <@~|@floating>@ <|@
tid j342 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i347 
=== Succesors ===
=== Usages ===
v517 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i347  <|@  <|@
f <@~|@floating>@ <|@
tid v517 <|@
result [v2|QWORD[.] + v44|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j342 
=== Succesors ===
=== Usages ===
i499 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j342  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i499 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v517 
lastLocationAccess: - 
=== Succesors ===
next: i500 
=== Usages ===
i343 
=== Predecessor ===
i498 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v517 lastLocationAccess: - #next: i500  <|@  <|@
f <@~|@floating>@ <|@
tid i346 <|@
result int[4|0x4] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 4
stableDimension: 0
stamp: i32 [4]
stampKind: i32
value: int[4|0x4]
=== Inputs ===
=== Succesors ===
=== Usages ===
i348 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i348 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i346 
=== Succesors ===
=== Usages ===
j362 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i346  <|@  <|@
f <@~|@floating>@ <|@
tid j362 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i348 
=== Succesors ===
=== Usages ===
v518 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i348  <|@  <|@
f <@~|@floating>@ <|@
tid v518 <|@
result [v2|QWORD[.] + v46|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j362 
=== Succesors ===
=== Usages ===
i500 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j362  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i500 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v518 
lastLocationAccess: - 
=== Succesors ===
next: i501 
=== Usages ===
i363 
=== Predecessor ===
i499 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v518 lastLocationAccess: - #next: i501  <|@  <|@
f <@~|@floating>@ <|@
tid i397 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i94 
=== Succesors ===
=== Usages ===
j372 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid j372 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i397 
=== Succesors ===
=== Usages ===
v519 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i397  <|@  <|@
f <@~|@floating>@ <|@
tid v519 <|@
result [v2|QWORD[.] + v48|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j372 
=== Succesors ===
=== Usages ===
i501 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j372  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i501 <|@
result v49|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v519 
lastLocationAccess: - 
=== Succesors ===
next: i502 
=== Usages ===
i373 
=== Predecessor ===
i500 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v519 lastLocationAccess: - #next: i502  <|@  <|@
f <@~|@floating>@ <|@
tid i398 <|@
result int[6|0x6] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 6
stableDimension: 0
stamp: i32 [6]
stampKind: i32
value: int[6|0x6]
=== Inputs ===
=== Succesors ===
=== Usages ===
i399 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i399 <|@
result v50|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i398 
=== Succesors ===
=== Usages ===
j382 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i398  <|@  <|@
f <@~|@floating>@ <|@
tid j382 <|@
result v50|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i399 
=== Succesors ===
=== Usages ===
v520 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i399  <|@  <|@
f <@~|@floating>@ <|@
tid v520 <|@
result [v2|QWORD[.] + v50|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j382 
=== Succesors ===
=== Usages ===
i502 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j382  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i502 <|@
result v51|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v520 
lastLocationAccess: - 
=== Succesors ===
next: i503 
=== Usages ===
i383 
=== Predecessor ===
i501 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v520 lastLocationAccess: - #next: i503  <|@  <|@
f <@~|@floating>@ <|@
tid i400 <|@
result int[7|0x7] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i401 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i401 <|@
result v52|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i400 
=== Succesors ===
=== Usages ===
j391 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i400  <|@  <|@
f <@~|@floating>@ <|@
tid j391 <|@
result v52|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i401 
=== Succesors ===
=== Usages ===
v521 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i401  <|@  <|@
f <@~|@floating>@ <|@
tid v521 <|@
result [v2|QWORD[.] + v52|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j391 
=== Succesors ===
=== Usages ===
i503 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j391  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i503 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v521 
lastLocationAccess: - 
=== Succesors ===
next: v250 
=== Usages ===
i392 
=== Predecessor ===
i502 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v521 lastLocationAccess: - #next: v250  <|@  <|@
f <@~|@floating>@ <|@
tid i251 <|@
result v53|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i254 
y: i94 
=== Succesors ===
=== Usages ===
i252 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i254 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i252 <|@
result v54|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i251 
y: i254 
=== Succesors ===
=== Usages ===
i248 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i251 y: i254  <|@  <|@
f <@~|@floating>@ <|@
tid i259 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i496 
=== Succesors ===
=== Usages ===
i248 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i496  <|@  <|@
f <@~|@floating>@ <|@
tid i248 <|@
result v55|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i252 
y: i259 
=== Succesors ===
=== Usages ===
i304 i303 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i252 y: i259  <|@  <|@
f <@~|@floating>@ <|@
tid i303 <|@
result v56|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i248 
y: i94 
=== Succesors ===
=== Usages ===
i304 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i248 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i304 <|@
result v57|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i303 
y: i248 
=== Succesors ===
=== Usages ===
i300 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i303 y: i248  <|@  <|@
f <@~|@floating>@ <|@
tid i309 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i497 
=== Succesors ===
=== Usages ===
i300 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i497  <|@  <|@
f <@~|@floating>@ <|@
tid i300 <|@
result v58|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i304 
y: i309 
=== Succesors ===
=== Usages ===
i328 i327 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i304 y: i309  <|@  <|@
f <@~|@floating>@ <|@
tid i327 <|@
result v59|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i300 
y: i94 
=== Succesors ===
=== Usages ===
i328 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i300 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i328 <|@
result v60|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i327 
y: i300 
=== Succesors ===
=== Usages ===
i324 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i327 y: i300  <|@  <|@
f <@~|@floating>@ <|@
tid i333 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i498 
=== Succesors ===
=== Usages ===
i324 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i498  <|@  <|@
f <@~|@floating>@ <|@
tid i324 <|@
result v61|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i328 
y: i333 
=== Succesors ===
=== Usages ===
i337 i338 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i328 y: i333  <|@  <|@
f <@~|@floating>@ <|@
tid i337 <|@
result v62|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i324 
y: i94 
=== Succesors ===
=== Usages ===
i338 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i324 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i338 <|@
result v63|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i337 
y: i324 
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i337 y: i324  <|@  <|@
f <@~|@floating>@ <|@
tid i343 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i499 
=== Succesors ===
=== Usages ===
i336 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i499  <|@  <|@
f <@~|@floating>@ <|@
tid i336 <|@
result v64|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i338 
y: i343 
=== Succesors ===
=== Usages ===
i358 i357 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i338 y: i343  <|@  <|@
f <@~|@floating>@ <|@
tid i357 <|@
result v65|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i336 
y: i94 
=== Succesors ===
=== Usages ===
i358 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i336 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i358 <|@
result v66|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i357 
y: i336 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i357 y: i336  <|@  <|@
f <@~|@floating>@ <|@
tid i363 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i500 
=== Succesors ===
=== Usages ===
i354 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i500  <|@  <|@
f <@~|@floating>@ <|@
tid i354 <|@
result v67|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i358 
y: i363 
=== Succesors ===
=== Usages ===
i367 i368 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i358 y: i363  <|@  <|@
f <@~|@floating>@ <|@
tid i367 <|@
result v68|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i354 
y: i94 
=== Succesors ===
=== Usages ===
i368 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i354 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i368 <|@
result v69|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i367 
y: i354 
=== Succesors ===
=== Usages ===
i366 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i367 y: i354  <|@  <|@
f <@~|@floating>@ <|@
tid i373 <|@
result v49|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i501 
=== Succesors ===
=== Usages ===
i366 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i501  <|@  <|@
f <@~|@floating>@ <|@
tid i366 <|@
result v70|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i368 
y: i373 
=== Succesors ===
=== Usages ===
i377 i378 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i368 y: i373  <|@  <|@
f <@~|@floating>@ <|@
tid i377 <|@
result v71|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i366 
y: i94 
=== Succesors ===
=== Usages ===
i378 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i366 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i378 <|@
result v72|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i377 
y: i366 
=== Succesors ===
=== Usages ===
i376 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i377 y: i366  <|@  <|@
f <@~|@floating>@ <|@
tid i383 <|@
result v51|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i502 
=== Succesors ===
=== Usages ===
i376 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i502  <|@  <|@
f <@~|@floating>@ <|@
tid i376 <|@
result v73|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i378 
y: i383 
=== Succesors ===
=== Usages ===
i386 i387 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i378 y: i383  <|@  <|@
f <@~|@floating>@ <|@
tid i386 <|@
result v74|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i376 
y: i94 
=== Succesors ===
=== Usages ===
i387 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i376 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i387 <|@
result v75|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i386 
y: i376 
=== Succesors ===
=== Usages ===
i385 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i386 y: i376  <|@  <|@
f <@~|@floating>@ <|@
tid i392 <|@
result v76|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i503 
=== Succesors ===
=== Usages ===
i385 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i503  <|@  <|@
f <@~|@floating>@ <|@
tid i385 <|@
result v77|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i387 
y: i392 
=== Succesors ===
=== Usages ===
i254 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i387 y: i392  <|@  <|@
f <@~|@floating>@ <|@
tid i396 <|@
result int[8|0x8] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 8
stableDimension: 0
stamp: i32 [8]
stampKind: i32
value: int[8|0x8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i402 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i402 <|@
result v78|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i253 
y: i396 
=== Succesors ===
=== Usages ===
i253 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i396  <|@  <|@
f <@*|@fixed>@ <|@
tid v250 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v243 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i503 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v243  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v78|DWORD, v77|DWORD] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v245 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v243 
=== Succesors ===
next: v285 
=== Usages ===
=== Predecessor ===
v247 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v243 #next: v285  <|@  <|@
f <@*|@fixed>@ <|@
tid v285 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v266 
=== Predecessor ===
v245 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v37|DWORD, v38|DWORD] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i276 <|@
result v79|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v266 
values: i253 i272 
=== Succesors ===
=== Usages ===
v267 i272 j281 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v266 values: i253 i272  <|@  <|@
f <@~|@floating>@ <|@
tid i277 <|@
result v80|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v266 
values: i254 i271 
=== Succesors ===
=== Usages ===
i274 i275 i81 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v266 values: i254 i271  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v266 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 10.883385225021215
loopType: POST_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: true
peelings: 2
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v285 
=== Succesors ===
next: v270 
=== Usages ===
v268 v273 i276 i277 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v285 #next: v270  <|@  <|@
f <@~|@floating>@ <|@
tid v267 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i276 
y: i223 
=== Succesors ===
=== Usages ===
v270 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i276 y: i223  <|@  <|@
f <@*|@fixed>@ <|@
tid v270 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v267 
=== Succesors ===
trueSuccessor: v269 
falseSuccessor: v268 
=== Usages ===
=== Predecessor ===
v266 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v267 #trueSuccessor: v269 #falseSuccessor: v268  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v269 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i504 
=== Usages ===
=== Predecessor ===
v270 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i504  <|@  <|@
f <@~|@floating>@ <|@
tid j281 <|@
result v79|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i276 
=== Succesors ===
=== Usages ===
v514 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i276  <|@  <|@
f <@~|@floating>@ <|@
tid v514 <|@
result [v2|QWORD[.] + v79|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a220 
index: j281 
=== Succesors ===
=== Usages ===
i504 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a220 index: j281  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i504 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v514 
lastLocationAccess: - 
=== Succesors ===
next: v273 
=== Usages ===
i282 
=== Predecessor ===
v269 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v514 lastLocationAccess: - #next: v273  <|@  <|@
f <@~|@floating>@ <|@
tid i274 <|@
result v81|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i277 
y: i94 
=== Succesors ===
=== Usages ===
i275 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i277 y: i94  <|@  <|@
f <@~|@floating>@ <|@
tid i275 <|@
result v82|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i274 
y: i277 
=== Succesors ===
=== Usages ===
i271 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i274 y: i277  <|@  <|@
f <@~|@floating>@ <|@
tid i282 <|@
result v83|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i504 
=== Succesors ===
=== Usages ===
i271 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i504  <|@  <|@
f <@~|@floating>@ <|@
tid i271 <|@
result v84|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i275 
y: i282 
=== Succesors ===
=== Usages ===
i277 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i275 y: i282  <|@  <|@
f <@~|@floating>@ <|@
tid i272 <|@
result v85|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i276 
y: i44 
=== Succesors ===
=== Usages ===
i276 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i276 y: i44  <|@  <|@
f <@*|@fixed>@ <|@
tid v273 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v266 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i504 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v266  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v85|DWORD, v84|DWORD] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v268 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v266 
=== Succesors ===
next: v77 
=== Usages ===
=== Predecessor ===
v270 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v266 #next: v77  <|@  <|@
f <@*|@fixed>@ <|@
tid v77 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v76 
=== Predecessor ===
v268 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v80|DWORD] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v210 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v449 
=== Usages ===
=== Predecessor ===
v211 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v449  <|@  <|@
f <@~|@floating>@ <|@
tid i450 <|@
result int[-37915|0xffffffffffff6be5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -37915
stableDimension: 0
stamp: i32 [-37915]
stampKind: i32
value: int[-37915|0xffffffffffff6be5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i438 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v449 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
v210 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-37915|0xffffffffffff6be5], long[0|0x0]] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v103 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v124 
=== Usages ===
=== Predecessor ===
v105 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v124  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v76 
=== Predecessor ===
v103 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v14|DWORD] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v202 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v444 
=== Usages ===
=== Predecessor ===
v203 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v444  <|@  <|@
f <@~|@floating>@ <|@
tid i445 <|@
result int[-34843|0xffffffffffff77e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -34843
stableDimension: 0
stamp: i32 [-34843]
stampKind: i32
value: int[-34843|0xffffffffffff77e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i438 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v444 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
v202 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-34843|0xffffffffffff77e5], long[0|0x0]] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v56 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v78 
=== Usages ===
=== Predecessor ===
v58 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v78  <|@  <|@
f <@*|@fixed>@ <|@
tid v78 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v76 
=== Predecessor ===
v56 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v1|DWORD] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i81 <|@
result v86|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v76 
values: i277 i217 i72 
=== Succesors ===
=== Usages ===
v47 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v76 values: i277 i217 i72  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v76 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v77 v78 v124 
=== Succesors ===
next: v47 
=== Usages ===
i81 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v77 v78 v124 #next: v47  <|@  <|@
f <@*|@fixed>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 36]
stamp: void
=== Inputs ===
memoryMap: - 
result: i81 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v76 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i81  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v86|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v194 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
next: v441 
=== Usages ===
=== Predecessor ===
v471 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v441  <|@  <|@
f <@~|@floating>@ <|@
tid j443 <|@
result long[20|0x14] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 20
stableDimension: 0
stamp: i64 [20]
stampKind: i64
value: long[20|0x14]
=== Inputs ===
=== Succesors ===
=== Usages ===
j439 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i442 <|@
result int[-32828|0xffffffffffff7fc4] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -32828
stableDimension: 0
stamp: i32 [-32828]
stampKind: i32
value: int[-32828|0xffffffffffff7fc4]
=== Inputs ===
=== Succesors ===
=== Usages ===
i438 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v441 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v435 
=== Predecessor ===
v194 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32828|0xffffffffffff7fc4], long[20|0x14]] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i438 <|@
result v87|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [-40475 - -32828] bits:1...1011xxxx111x0010x
valueDescription: i32
=== Inputs ===
merge: v435 
values: i442 i445 i447 i450 i447 
=== Succesors ===
=== Usages ===
v440 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v435 values: i442 i445 i447 i450 i447  <|@  <|@
f <@~|@floating>@ <|@
tid j439 <|@
result v88|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i64 [0 - 664] bits:0...0x0x00xxx00
valueDescription: i64
=== Inputs ===
merge: v435 
values: j443 j224 j448 j224 j448 
=== Succesors ===
=== Usages ===
v440 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v435 values: j443 j224 j448 j224 j448  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v435 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v441 v444 v446 v449 v490 
=== Succesors ===
next: v440 
=== Usages ===
i438 j439 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v441 v444 v446 v449 v490 #next: v440  <|@  <|@
f <@*|@fixed>@ <|@
tid v440 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateBefore: ?54 
actionAndReason: i438 
speculation: j439 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v435 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?54 actionAndReason: i438 speculation: j439  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v87|DWORD, v88|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   -1  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [Object[null]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v8|QWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v16|DWORD] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v34|DWORD, v35|DWORD] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v29|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v78|DWORD, v77|DWORD] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v37|DWORD, v38|DWORD] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v85|DWORD, v84|DWORD] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v80|DWORD] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v14|DWORD] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v1|DWORD] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v86|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-34843|0xffffffffffff77e5], long[0|0x0]] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-37915|0xffffffffffff6be5], long[0|0x0]] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32828|0xffffffffffff7fc4], long[20|0x14]] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr   -1  <|@ instruction [v87|DWORD, v88|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   -1  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [Object[null]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v8|QWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v16|DWORD] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v34|DWORD, v35|DWORD] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v29|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v78|DWORD, v77|DWORD] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v37|DWORD, v38|DWORD] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v85|DWORD, v84|DWORD] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v80|DWORD] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v14|DWORD] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v1|DWORD] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v86|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-34843|0xffffffffffff77e5], long[0|0x0]] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-37915|0xffffffffffff6be5], long[0|0x0]] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32828|0xffffffffffff7fc4], long[20|0x14]] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr   -1  <|@ instruction [v87|DWORD, v88|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   -1  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [Object[null]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v8|QWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v16|DWORD] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v34|DWORD, v35|DWORD] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v29|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v78|DWORD, v77|DWORD] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v37|DWORD, v38|DWORD] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v85|DWORD, v84|DWORD] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v80|DWORD] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v14|DWORD] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v1|DWORD] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v86|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-34843|0xffffffffffff77e5], long[0|0x0]] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-37915|0xffffffffffff6be5], long[0|0x0]] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32828|0xffffffffffff7fc4], long[20|0x14]] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr   -1  <|@ instruction [v87|DWORD, v88|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   -1  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [Object[null]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v8|QWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v16|DWORD] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr   -1  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v34|DWORD, v35|DWORD] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v29|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr   -1  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v78|DWORD, v77|DWORD] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v37|DWORD, v38|DWORD] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v85|DWORD, v84|DWORD] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v80|DWORD] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v14|DWORD] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v1|DWORD] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [v86|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-34843|0xffffffffffff77e5], long[0|0x0]] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-37915|0xffffffffffff6be5], long[0|0x0]] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-32828|0xffffffffffff7fc4], long[20|0x14]] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr   -1  <|@ instruction [v87|DWORD, v88|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   16  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   18  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   20  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   26  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   28  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   30  <|@ instruction JUMP ~outgoingValues: [v6|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction JUMP ~outgoingValues: [Object[null]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [v8|QWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   38  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   68  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   72  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   92  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   96  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   98  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr  100  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr  128  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr  130  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v16|DWORD] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  134  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  142  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [v34|DWORD, v35|DWORD] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr  156  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v29|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  158  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  160  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  162  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  164  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  166  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr  168  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  170  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr  172  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  174  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr  176  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr  180  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  182  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr  184  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  186  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr  188  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr  192  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  240  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr  244  <|@ instruction JUMP ~outgoingValues: [v78|DWORD, v77|DWORD] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  248  <|@ instruction JUMP ~outgoingValues: [v37|DWORD, v38|DWORD] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  250  <|@ instruction [v79|DWORD, v80|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr  266  <|@ instruction JUMP ~outgoingValues: [v85|DWORD, v84|DWORD] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [v80|DWORD] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction JUMP ~outgoingValues: [v14|DWORD] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction JUMP ~outgoingValues: [v1|DWORD] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  280  <|@ instruction [v86|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr  284  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [int[-34843|0xffffffffffff77e5], long[0|0x0]] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  296  <|@ instruction JUMP ~outgoingValues: [int[-37915|0xffffffffffff6be5], long[0|0x0]] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction JUMP ~outgoingValues: [int[-32828|0xffffffffffff7fc4], long[20|0x14]] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  306  <|@ instruction [v87|DWORD, v88|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  308  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr  310  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr  312  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   16  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   18  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   20  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   26  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   28  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   30  <|@ instruction JUMP ~outgoingValues: [v6|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction JUMP ~outgoingValues: [Object[null]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [v8|QWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   38  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   68  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   72  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   92  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   96  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   98  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr  100  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr  128  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr  130  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v16|DWORD] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  134  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  142  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [v34|DWORD, v35|DWORD] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr  156  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v29|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  158  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  160  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  162  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  164  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  166  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr  168  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  170  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr  172  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  174  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr  176  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr  180  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  182  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr  184  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  186  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr  188  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr  192  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  240  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr  244  <|@ instruction JUMP ~outgoingValues: [v78|DWORD, v77|DWORD] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  248  <|@ instruction JUMP ~outgoingValues: [v37|DWORD, v38|DWORD] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  250  <|@ instruction [v79|DWORD, v80|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr  266  <|@ instruction JUMP ~outgoingValues: [v85|DWORD, v84|DWORD] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [v80|DWORD] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction JUMP ~outgoingValues: [v14|DWORD] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction JUMP ~outgoingValues: [v1|DWORD] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  280  <|@ instruction [v86|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr  284  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [int[-34843|0xffffffffffff77e5], long[0|0x0]] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  296  <|@ instruction JUMP ~outgoingValues: [int[-37915|0xffffffffffff6be5], long[0|0x0]] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction JUMP ~outgoingValues: [int[-32828|0xffffffffffff7fc4], long[20|0x14]] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  306  <|@ instruction [v87|DWORD, v88|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  308  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr  310  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr  312  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|d fixed "[rax|d]" rax|d v86|d [0, 1[[282, 284[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q v0|q [0, 6[[16, 18[ "NoOptimization"
  v0|q QWORD "[v0|q]" v0|q rsi|q [6, 16[6 MustHaveRegister 8 MustHaveRegister 10 MustHaveRegister 12 MustHaveRegister 14 MustHaveRegister 16 ShouldHaveRegister  "NoSpillStore"
  v1|d DWORD "[v1|d]" v1|d -1 [8, 116[[276, 279[[286, 313[8 MustHaveRegister 66 MustHaveRegister 68 ShouldHaveRegister 278 ShouldHaveRegister  "NoSpillStore"
  v2|q QWORD "[v2|q]" v2|q -1 [10, 268[[286, 313[10 MustHaveRegister 20 MustHaveRegister 24 MustHaveRegister 38 MustHaveRegister 60 MustHaveRegister 70 MustHaveRegister 122 MustHaveRegister 144 MustHaveRegister 151 LiveAtLoopEnd 164 MustHaveRegister 168 MustHaveRegister 172 MustHaveRegister 176 MustHaveRegister 180 MustHaveRegister 184 MustHaveRegister 188 MustHaveRegister 238 MustHaveRegister 245 LiveAtLoopEnd 260 MustHaveRegister 267 LiveAtLoopEnd  "NoSpillStore"
  v3|d DWORD "[v3|d]" v3|d -1 [12, 268[[286, 313[12 MustHaveRegister 56 MustHaveRegister 76 MustHaveRegister 82 MustHaveRegister 92 MustHaveRegister 128 MustHaveRegister 130 ShouldHaveRegister 154 MustHaveRegister 252 MustHaveRegister 267 LiveAtLoopEnd  "NoSpillStore"
  v4|d DWORD "[v4|d]" v4|d -1 [14, 126[[286, 313[14 MustHaveRegister 56 ShouldHaveRegister 62 ShouldHaveRegister 70 MustHaveRegister 74 ShouldHaveRegister 80 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[v5|d]" v5|d -1 [24, 28[24 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v6|q QWORD "[v6|q]" v6|q v5|d [28, 31[28 MustHaveRegister 30 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[v7|q]" v7|q -1 [26, 29[26 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[v8|q]" v8|q v6|q [36, 44[44 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[v9|q]" v9|q -1 [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[v10|d]" v10|d -1 [60, 114[60 MustHaveRegister 62 MustHaveRegister 100 ShouldHaveRegister 106 MustHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[v11|d]" v11|d v1|d [66, 68[66 MustHaveRegister 68 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[v12|d]" v12|d v11|d [68, 72[68 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v13|d DWORD "[v13|d]" v13|d -1 [70, 72[70 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[v14|d]" v14|d v12|d [72, 121[[272, 275[72 MustHaveRegister 118 MustHaveRegister 120 ShouldHaveRegister 274 ShouldHaveRegister  "NoSpillStore"
  v15|d DWORD "[v15|d]" v15|d v4|d [74, 122[74 MustHaveRegister 76 ShouldHaveRegister 114 ShouldHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[v16|d]" v16|d v30|d [80, 133[80 MustHaveRegister 82 ShouldHaveRegister 90 ShouldHaveRegister 92 ShouldHaveRegister 106 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v17|q QWORD "[v17|q]" v17|q -1 [90, 96[90 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[v18|d]" v18|d v3|d [92, 94[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v19|q QWORD "[v19|q]" v19|q -1 [94, 96[94 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v20|q QWORD "[v20|q]" v20|q v17|q [96, 98[96 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v21|q QWORD "[v21|q]" v21|q v20|q [98, 102[98 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v22|q QWORD "[v22|q]" v22|q v10|d [100, 102[100 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[v23|d]" v23|d v14|d [118, 120[118 MustHaveRegister 120 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[v24|d]" v24|d v23|d [120, 124[120 MustHaveRegister 124 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[v25|d]" v25|d -1 [122, 124[122 MustHaveRegister 124 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[v26|d]" v26|d v24|d [124, 133[124 MustHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[v27|d]" v27|d -1 [126, 131[126 MustHaveRegister 128 ShouldHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v28|d DWORD "[v28|d]" v28|d v3|d [130, 152[130 MustHaveRegister 136 MustHaveRegister 151 LiveAtLoopEnd  "NoSpillStore"
  v29|d DWORD "[v29|d]" v29|d v26|d [134, 143[[152, 157[140 MustHaveRegister 142 ShouldHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v30|d DWORD "[v30|d]" v30|d v16|d [134, 148[[152, 157[136 ShouldHaveRegister 144 MustHaveRegister 148 ShouldHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[v31|d]" v31|d v29|d [140, 142[140 MustHaveRegister 142 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[v32|d]" v32|d v31|d [142, 146[142 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[v33|d]" v33|d -1 [144, 146[144 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[v34|d]" v34|d v32|d [146, 151[146 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[v35|d]" v35|d v30|d [148, 151[148 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v36|d DWORD "[v36|d]" v36|d -1 [154, 246[154 MustHaveRegister 160 MustHaveRegister 245 LiveAtLoopEnd  "NoSpillStore"
  v37|d DWORD "[v37|d]" v37|d v30|d [158, 242[[246, 249[160 ShouldHaveRegister 164 MustHaveRegister 166 ShouldHaveRegister 170 MustHaveRegister 174 MustHaveRegister 178 MustHaveRegister 182 MustHaveRegister 186 MustHaveRegister 190 MustHaveRegister 242 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[v38|d]" v38|d v29|d [158, 195[[246, 249[192 MustHaveRegister 194 ShouldHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[v39|d]" v39|d -1 [164, 196[164 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[v40|d]" v40|d v37|d [166, 168[166 MustHaveRegister 168 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[v41|d]" v41|d -1 [168, 202[168 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v42|d DWORD "[v42|d]" v42|d -1 [170, 172[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[v43|d]" v43|d -1 [172, 208[172 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v44|d DWORD "[v44|d]" v44|d -1 [174, 176[174 MustHaveRegister 176 MustHaveRegister  "NoSpillStore"
  v45|d DWORD "[v45|d]" v45|d -1 [176, 214[176 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[v46|d]" v46|d -1 [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[v47|d]" v47|d -1 [180, 220[180 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[v48|d]" v48|d -1 [182, 184[182 MustHaveRegister 184 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[v49|d]" v49|d -1 [184, 226[184 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v50|d DWORD "[v50|d]" v50|d -1 [186, 188[186 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[v51|d]" v51|d -1 [188, 232[188 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[v52|d]" v52|d -1 [190, 238[190 MustHaveRegister 238 MustHaveRegister  "NoSpillStore"
  v53|d DWORD "[v53|d]" v53|d v38|d [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[v54|d]" v54|d v53|d [194, 196[194 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[v55|d]" v55|d v54|d [196, 201[196 MustHaveRegister 198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v56|d DWORD "[v56|d]" v56|d v55|d [198, 200[198 MustHaveRegister 200 MustHaveRegister  "NoSpillStore"
  v57|d DWORD "[v57|d]" v57|d v56|d [200, 202[200 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[v58|d]" v58|d v57|d [202, 207[202 MustHaveRegister 204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[v59|d]" v59|d v58|d [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[v60|d]" v60|d v59|d [206, 208[206 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[v61|d]" v61|d v60|d [208, 213[208 MustHaveRegister 210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v62|d DWORD "[v62|d]" v62|d v61|d [210, 212[210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[v63|d]" v63|d v62|d [212, 214[212 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[v64|d]" v64|d v63|d [214, 219[214 MustHaveRegister 216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[v65|d]" v65|d v64|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[v66|d]" v66|d v65|d [218, 220[218 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[v67|d]" v67|d v66|d [220, 225[220 MustHaveRegister 222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[v68|d]" v68|d v67|d [222, 224[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[v69|d]" v69|d v68|d [224, 226[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[v70|d]" v70|d v69|d [226, 231[226 MustHaveRegister 228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[v71|d]" v71|d v70|d [228, 230[228 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[v72|d]" v72|d v71|d [230, 232[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[v73|d]" v73|d v72|d [232, 237[232 MustHaveRegister 234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[v74|d]" v74|d v73|d [234, 236[234 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[v75|d]" v75|d v74|d [236, 240[236 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[v76|d]" v76|d -1 [238, 240[238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[v77|d]" v77|d v75|d [240, 245[240 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[v78|d]" v78|d -1 [242, 245[242 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[v79|d]" v79|d v37|d [250, 264[252 ShouldHaveRegister 260 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[v80|d]" v80|d v38|d [250, 259[[268, 271[256 MustHaveRegister 258 ShouldHaveRegister 270 ShouldHaveRegister  "NoSpillStore"
  v81|d DWORD "[v81|d]" v81|d v80|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[v82|d]" v82|d v81|d [258, 262[258 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[v83|d]" v83|d -1 [260, 262[260 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v84|d DWORD "[v84|d]" v84|d v82|d [262, 267[262 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[v85|d]" v85|d v79|d [264, 267[264 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[v86|d]" v86|d v80|d [280, 282[282 ShouldHaveRegister  "NoSpillStore"
  v87|d DWORD "[v87|d]" v87|d -1 [306, 308[308 MustHaveRegister  "NoSpillStore"
  v88|q QWORD "[v88|q]" v88|q -1 [306, 310[310 MustHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|d fixed "[rax|d]" rax|d v86|d [0, 1[[282, 284[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q v0|q [0, 6[[16, 18[ "NoOptimization"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [6, 16[6 MustHaveRegister 8 MustHaveRegister 10 MustHaveRegister 12 MustHaveRegister 14 MustHaveRegister 16 ShouldHaveRegister  "NoSpillStore"
  v1|d DWORD "[r10|d]" v1|d -1 [8, 116[[276, 279[[286, 313[8 MustHaveRegister 66 MustHaveRegister 68 ShouldHaveRegister 278 ShouldHaveRegister  "NoSpillStore"
  v2|q QWORD "[r11|q]" v2|q -1 [10, 268[[286, 313[10 MustHaveRegister 20 MustHaveRegister 24 MustHaveRegister 38 MustHaveRegister 60 MustHaveRegister 70 MustHaveRegister 122 MustHaveRegister 144 MustHaveRegister 151 LiveAtLoopEnd 164 MustHaveRegister 168 MustHaveRegister 172 MustHaveRegister 176 MustHaveRegister 180 MustHaveRegister 184 MustHaveRegister 188 MustHaveRegister 238 MustHaveRegister 245 LiveAtLoopEnd 260 MustHaveRegister 267 LiveAtLoopEnd  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d -1 [12, 158[12 MustHaveRegister 56 MustHaveRegister 76 MustHaveRegister 82 MustHaveRegister 92 MustHaveRegister 128 MustHaveRegister 130 ShouldHaveRegister 154 MustHaveRegister  "SpillInDominator"
  v4|d DWORD "[r9|d]" v4|d -1 [14, 126[[286, 313[14 MustHaveRegister 56 ShouldHaveRegister 62 ShouldHaveRegister 70 MustHaveRegister 74 ShouldHaveRegister 80 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[rax|d]" v5|d -1 [24, 28[24 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v6|q QWORD "[rax|q]" v6|q v5|d [28, 31[28 MustHaveRegister 30 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[rcx|q]" v7|q -1 [26, 29[26 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[rax|q]" v8|q v6|q [36, 44[44 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rcx|q]" v9|q -1 [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rax|d]" v10|d -1 [60, 114[60 MustHaveRegister 62 MustHaveRegister 100 ShouldHaveRegister 106 MustHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[rcx|d]" v11|d v1|d [66, 68[66 MustHaveRegister 68 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rcx|d]" v12|d v11|d [68, 72[68 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v13|d DWORD "[rbx|d]" v13|d -1 [70, 72[70 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[rcx|d]" v14|d v12|d [72, 121[[272, 275[72 MustHaveRegister 118 MustHaveRegister 120 ShouldHaveRegister 274 ShouldHaveRegister  "NoSpillStore"
  v15|d DWORD "[rbx|d]" v15|d v4|d [74, 122[74 MustHaveRegister 76 ShouldHaveRegister 114 ShouldHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[rdi|d]" v16|d v30|d [80, 133[80 MustHaveRegister 82 ShouldHaveRegister 90 ShouldHaveRegister 92 ShouldHaveRegister 106 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v17|q QWORD "[rdx|q]" v17|q -1 [90, 96[90 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[rsi|d]" v18|d v3|d [92, 94[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v19|q QWORD "[rsi|q]" v19|q -1 [94, 96[94 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v20|q QWORD "[rdx|q]" v20|q v17|q [96, 98[96 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v21|q QWORD "[rdx|q]" v21|q v20|q [98, 102[98 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v22|q QWORD "[rsi|q]" v22|q v10|d [100, 102[100 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[rax|d]" v23|d v14|d [118, 120[118 MustHaveRegister 120 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[rax|d]" v24|d v23|d [120, 124[120 MustHaveRegister 124 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r10|d]" v25|d -1 [122, 124[122 MustHaveRegister 124 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[rax|d]" v26|d v24|d [124, 133[124 MustHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r10|d]" v27|d -1 [126, 131[126 MustHaveRegister 128 ShouldHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v28|d DWORD "[r9|d]" v28|d v3|d [130, 152[130 MustHaveRegister 136 MustHaveRegister 151 LiveAtLoopEnd  "NoSpillStore"
  v29|d DWORD "[rax|d]" v29|d v26|d [134, 143[[152, 157[140 MustHaveRegister 142 ShouldHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v30|d DWORD "[rdi|d]" v30|d v16|d [134, 148[[152, 157[136 ShouldHaveRegister 144 MustHaveRegister 148 ShouldHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r10|d]" v31|d v29|d [140, 142[140 MustHaveRegister 142 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[r10|d]" v32|d v31|d [142, 146[142 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[rax|d]" v33|d -1 [144, 146[144 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[r10|d]" v34|d v32|d [146, 151[146 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rdi|d]" v35|d v30|d [148, 151[148 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v36|d DWORD "[r10|d]" v36|d -1 [154, 246[154 MustHaveRegister 160 MustHaveRegister 245 LiveAtLoopEnd  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d v30|d [158, 242[[246, 249[160 ShouldHaveRegister 164 MustHaveRegister 166 ShouldHaveRegister 170 MustHaveRegister 174 MustHaveRegister 178 MustHaveRegister 182 MustHaveRegister 186 MustHaveRegister 190 MustHaveRegister 242 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[rax|d]" v38|d v29|d [158, 195[[246, 249[192 MustHaveRegister 194 ShouldHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[r9|d]" v39|d -1 [164, 196[164 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[rcx|d]" v40|d v37|d [166, 168[166 MustHaveRegister 168 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[rcx|d]" v41|d -1 [168, 202[168 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v42|d DWORD "[rbx|d]" v42|d -1 [170, 172[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[rbx|d]" v43|d -1 [172, 208[172 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v44|d DWORD "[rdx|d]" v44|d -1 [174, 176[174 MustHaveRegister 176 MustHaveRegister  "NoSpillStore"
  v45|d DWORD "[rdx|d]" v45|d -1 [176, 214[176 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[rsi|d]" v46|d -1 [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rsi|d]" v47|d -1 [180, 220[180 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[rbp|d]" v48|d -1 [182, 184[182 MustHaveRegister 184 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[rbp|d]" v49|d -1 [184, 226[184 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v50|d DWORD "[r13|d]" v50|d -1 [186, 188[186 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[r13|d]" v51|d -1 [188, 232[188 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[r14|d]" v52|d -1 [190, 238[190 MustHaveRegister 238 MustHaveRegister  "NoSpillStore"
  v53|d DWORD "[r8|d]" v53|d v38|d [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r8|d]" v54|d v53|d [194, 196[194 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[r8|d]" v55|d v54|d [196, 201[196 MustHaveRegister 198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v56|d DWORD "[rax|d]" v56|d v55|d [198, 200[198 MustHaveRegister 200 MustHaveRegister  "NoSpillStore"
  v57|d DWORD "[rax|d]" v57|d v56|d [200, 202[200 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[rax|d]" v58|d v57|d [202, 207[202 MustHaveRegister 204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[r8|d]" v59|d v58|d [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r8|d]" v60|d v59|d [206, 208[206 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d v60|d [208, 213[208 MustHaveRegister 210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v62|d DWORD "[rax|d]" v62|d v61|d [210, 212[210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[rax|d]" v63|d v62|d [212, 214[212 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[rax|d]" v64|d v63|d [214, 219[214 MustHaveRegister 216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r8|d]" v65|d v64|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r8|d]" v66|d v65|d [218, 220[218 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d v66|d [220, 225[220 MustHaveRegister 222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[rax|d]" v68|d v67|d [222, 224[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[rax|d]" v69|d v68|d [224, 226[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[rax|d]" v70|d v69|d [226, 231[226 MustHaveRegister 228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[r8|d]" v71|d v70|d [228, 230[228 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[r8|d]" v72|d v71|d [230, 232[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r8|d]" v73|d v72|d [232, 237[232 MustHaveRegister 234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[rax|d]" v74|d v73|d [234, 236[234 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[rax|d]" v75|d v74|d [236, 240[236 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r8|d]" v76|d -1 [238, 240[238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[rax|d]" v77|d v75|d [240, 245[240 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[r8|d]" v78|d -1 [242, 245[242 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[rdi|d]" v79|d v37|d [250, 264[252 ShouldHaveRegister 260 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[rax|d]" v80|d v38|d [250, 259[[268, 271[256 MustHaveRegister 258 ShouldHaveRegister 270 ShouldHaveRegister  "NoSpillStore"
  v81|d DWORD "[r10|d]" v81|d v80|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[r10|d]" v82|d v81|d [258, 262[258 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[rax|d]" v83|d -1 [260, 262[260 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v84|d DWORD "[r10|d]" v84|d v82|d [262, 267[262 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[rdi|d]" v85|d v79|d [264, 267[264 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[rax|d]" v86|d v80|d [280, 282[282 ShouldHaveRegister  "NoSpillStore"
  v87|d DWORD "[rcx|d]" v87|d -1 [306, 308[308 MustHaveRegister  "NoSpillStore"
  v88|q QWORD "[rbx|q]" v88|q -1 [306, 310[310 MustHaveRegister  "NoSpillStore"
  v89|d DWORD "[r8|d]" v3|d v3|d [250, 268[[286, 313[252 MustHaveRegister 267 LiveAtLoopEnd  "SpillInDominator"
  v90|d DWORD "[vstack:0|d]" v3|d v3|d [158, 250[ "SpillInDominator"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   16  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   18  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   20  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   26  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   28  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   30  <|@ instruction JUMP ~outgoingValues: [v6|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction JUMP ~outgoingValues: [Object[null]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [v8|QWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   38  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   68  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   72  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   92  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   96  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   98  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr  100  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr  128  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr  130  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v16|DWORD] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  134  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  142  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [v34|DWORD, v35|DWORD] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr  156  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v29|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  158  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  160  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  162  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  164  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  166  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr  168  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  170  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr  172  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  174  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr  176  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr  180  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  182  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr  184  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  186  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr  188  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr  192  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  240  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr  244  <|@ instruction JUMP ~outgoingValues: [v78|DWORD, v77|DWORD] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  248  <|@ instruction JUMP ~outgoingValues: [v37|DWORD, v38|DWORD] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  250  <|@ instruction [v79|DWORD, v80|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr  266  <|@ instruction JUMP ~outgoingValues: [v85|DWORD, v84|DWORD] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [v80|DWORD] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction JUMP ~outgoingValues: [v14|DWORD] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction JUMP ~outgoingValues: [v1|DWORD] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  280  <|@ instruction [v86|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr  284  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [int[-34843|0xffffffffffff77e5], long[0|0x0]] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  296  <|@ instruction JUMP ~outgoingValues: [int[-37915|0xffffffffffff6be5], long[0|0x0]] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction JUMP ~outgoingValues: [int[-32828|0xffffffffffff7fc4], long[20|0x14]] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  306  <|@ instruction [v87|DWORD, v88|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  308  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr  310  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr  312  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|d fixed "[rax|d]" rax|d v86|d [0, 1[[282, 284[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q v0|q [0, 6[[16, 18[ "NoOptimization"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [6, 16[6 MustHaveRegister 8 MustHaveRegister 10 MustHaveRegister 12 MustHaveRegister 14 MustHaveRegister 16 ShouldHaveRegister  "NoSpillStore"
  v1|d DWORD "[r10|d]" v1|d -1 [8, 116[[276, 279[[286, 313[8 MustHaveRegister 66 MustHaveRegister 68 ShouldHaveRegister 278 ShouldHaveRegister  "NoSpillStore"
  v2|q QWORD "[r11|q]" v2|q -1 [10, 268[[286, 313[10 MustHaveRegister 20 MustHaveRegister 24 MustHaveRegister 38 MustHaveRegister 60 MustHaveRegister 70 MustHaveRegister 122 MustHaveRegister 144 MustHaveRegister 151 LiveAtLoopEnd 164 MustHaveRegister 168 MustHaveRegister 172 MustHaveRegister 176 MustHaveRegister 180 MustHaveRegister 184 MustHaveRegister 188 MustHaveRegister 238 MustHaveRegister 245 LiveAtLoopEnd 260 MustHaveRegister 267 LiveAtLoopEnd  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d -1 [12, 158[12 MustHaveRegister 56 MustHaveRegister 76 MustHaveRegister 82 MustHaveRegister 92 MustHaveRegister 128 MustHaveRegister 130 ShouldHaveRegister 154 MustHaveRegister  "SpillInDominator"
  v4|d DWORD "[r9|d]" v4|d -1 [14, 126[[286, 313[14 MustHaveRegister 56 ShouldHaveRegister 62 ShouldHaveRegister 70 MustHaveRegister 74 ShouldHaveRegister 80 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[rax|d]" v5|d -1 [24, 28[24 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v6|q QWORD "[rax|q]" v6|q v5|d [28, 31[28 MustHaveRegister 30 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[rcx|q]" v7|q -1 [26, 29[26 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[rax|q]" v8|q v6|q [36, 44[44 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rcx|q]" v9|q -1 [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rax|d]" v10|d -1 [60, 114[60 MustHaveRegister 62 MustHaveRegister 100 ShouldHaveRegister 106 MustHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[rcx|d]" v11|d v1|d [66, 68[66 MustHaveRegister 68 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rcx|d]" v12|d v11|d [68, 72[68 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v13|d DWORD "[rbx|d]" v13|d -1 [70, 72[70 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[rcx|d]" v14|d v12|d [72, 121[[272, 275[72 MustHaveRegister 118 MustHaveRegister 120 ShouldHaveRegister 274 ShouldHaveRegister  "NoSpillStore"
  v15|d DWORD "[rbx|d]" v15|d v4|d [74, 122[74 MustHaveRegister 76 ShouldHaveRegister 114 ShouldHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[rdi|d]" v16|d v30|d [80, 133[80 MustHaveRegister 82 ShouldHaveRegister 90 ShouldHaveRegister 92 ShouldHaveRegister 106 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v17|q QWORD "[rdx|q]" v17|q -1 [90, 96[90 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[rsi|d]" v18|d v3|d [92, 94[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v19|q QWORD "[rsi|q]" v19|q -1 [94, 96[94 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v20|q QWORD "[rdx|q]" v20|q v17|q [96, 98[96 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v21|q QWORD "[rdx|q]" v21|q v20|q [98, 102[98 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v22|q QWORD "[rsi|q]" v22|q v10|d [100, 102[100 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[rax|d]" v23|d v14|d [118, 120[118 MustHaveRegister 120 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[rax|d]" v24|d v23|d [120, 124[120 MustHaveRegister 124 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r10|d]" v25|d -1 [122, 124[122 MustHaveRegister 124 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[rax|d]" v26|d v24|d [124, 133[124 MustHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r10|d]" v27|d -1 [126, 131[126 MustHaveRegister 128 ShouldHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v28|d DWORD "[r9|d]" v28|d v3|d [130, 152[130 MustHaveRegister 136 MustHaveRegister 151 LiveAtLoopEnd  "NoSpillStore"
  v29|d DWORD "[rax|d]" v29|d v26|d [134, 143[[152, 157[140 MustHaveRegister 142 ShouldHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v30|d DWORD "[rdi|d]" v30|d v16|d [134, 148[[152, 157[136 ShouldHaveRegister 144 MustHaveRegister 148 ShouldHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r10|d]" v31|d v29|d [140, 142[140 MustHaveRegister 142 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[r10|d]" v32|d v31|d [142, 146[142 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[rax|d]" v33|d -1 [144, 146[144 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[r10|d]" v34|d v32|d [146, 151[146 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rdi|d]" v35|d v30|d [148, 151[148 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v36|d DWORD "[r10|d]" v36|d -1 [154, 246[154 MustHaveRegister 160 MustHaveRegister 245 LiveAtLoopEnd  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d v30|d [158, 242[[246, 249[160 ShouldHaveRegister 164 MustHaveRegister 166 ShouldHaveRegister 170 MustHaveRegister 174 MustHaveRegister 178 MustHaveRegister 182 MustHaveRegister 186 MustHaveRegister 190 MustHaveRegister 242 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[rax|d]" v38|d v29|d [158, 195[[246, 249[192 MustHaveRegister 194 ShouldHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[r9|d]" v39|d -1 [164, 196[164 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[rcx|d]" v40|d v37|d [166, 168[166 MustHaveRegister 168 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[rcx|d]" v41|d -1 [168, 202[168 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v42|d DWORD "[rbx|d]" v42|d -1 [170, 172[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[rbx|d]" v43|d -1 [172, 208[172 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v44|d DWORD "[rdx|d]" v44|d -1 [174, 176[174 MustHaveRegister 176 MustHaveRegister  "NoSpillStore"
  v45|d DWORD "[rdx|d]" v45|d -1 [176, 214[176 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[rsi|d]" v46|d -1 [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rsi|d]" v47|d -1 [180, 220[180 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[rbp|d]" v48|d -1 [182, 184[182 MustHaveRegister 184 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[rbp|d]" v49|d -1 [184, 226[184 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v50|d DWORD "[r13|d]" v50|d -1 [186, 188[186 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[r13|d]" v51|d -1 [188, 232[188 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[r14|d]" v52|d -1 [190, 238[190 MustHaveRegister 238 MustHaveRegister  "NoSpillStore"
  v53|d DWORD "[r8|d]" v53|d v38|d [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r8|d]" v54|d v53|d [194, 196[194 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[r8|d]" v55|d v54|d [196, 201[196 MustHaveRegister 198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v56|d DWORD "[rax|d]" v56|d v55|d [198, 200[198 MustHaveRegister 200 MustHaveRegister  "NoSpillStore"
  v57|d DWORD "[rax|d]" v57|d v56|d [200, 202[200 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[rax|d]" v58|d v57|d [202, 207[202 MustHaveRegister 204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[r8|d]" v59|d v58|d [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r8|d]" v60|d v59|d [206, 208[206 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d v60|d [208, 213[208 MustHaveRegister 210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v62|d DWORD "[rax|d]" v62|d v61|d [210, 212[210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[rax|d]" v63|d v62|d [212, 214[212 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[rax|d]" v64|d v63|d [214, 219[214 MustHaveRegister 216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r8|d]" v65|d v64|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r8|d]" v66|d v65|d [218, 220[218 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d v66|d [220, 225[220 MustHaveRegister 222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[rax|d]" v68|d v67|d [222, 224[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[rax|d]" v69|d v68|d [224, 226[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[rax|d]" v70|d v69|d [226, 231[226 MustHaveRegister 228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[r8|d]" v71|d v70|d [228, 230[228 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[r8|d]" v72|d v71|d [230, 232[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r8|d]" v73|d v72|d [232, 237[232 MustHaveRegister 234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[rax|d]" v74|d v73|d [234, 236[234 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[rax|d]" v75|d v74|d [236, 240[236 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r8|d]" v76|d -1 [238, 240[238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[rax|d]" v77|d v75|d [240, 245[240 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[r8|d]" v78|d -1 [242, 245[242 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[rdi|d]" v79|d v37|d [250, 264[252 ShouldHaveRegister 260 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[rax|d]" v80|d v38|d [250, 259[[268, 271[256 MustHaveRegister 258 ShouldHaveRegister 270 ShouldHaveRegister  "NoSpillStore"
  v81|d DWORD "[r10|d]" v81|d v80|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[r10|d]" v82|d v81|d [258, 262[258 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[rax|d]" v83|d -1 [260, 262[260 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v84|d DWORD "[r10|d]" v84|d v82|d [262, 267[262 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[rdi|d]" v85|d v79|d [264, 267[264 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[rax|d]" v86|d v80|d [280, 282[282 ShouldHaveRegister  "NoSpillStore"
  v87|d DWORD "[rcx|d]" v87|d -1 [306, 308[308 MustHaveRegister  "NoSpillStore"
  v88|q QWORD "[rbx|q]" v88|q -1 [306, 310[310 MustHaveRegister  "NoSpillStore"
  v89|d DWORD "[r8|d]" v3|d v3|d [250, 268[[286, 313[252 MustHaveRegister 267 LiveAtLoopEnd  "SpillInDominator"
  v90|d DWORD "[vstack:0|d]" v3|d v3|d [158, 250[ "SpillInDominator"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   16  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   18  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   20  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   26  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   28  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   30  <|@ instruction JUMP ~outgoingValues: [v6|QWORD] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   34  <|@ instruction JUMP ~outgoingValues: [Object[null]] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [v8|QWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   38  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   68  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   72  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   92  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   96  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   98  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr  100  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr  128  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr  130  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v16|DWORD] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  134  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  142  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [v34|DWORD, v35|DWORD] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: r8|DWORD moveKind: DWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  154  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr  156  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v29|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  158  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  160  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  162  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  164  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  166  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr  168  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  170  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr  172  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  174  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr  176  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr  180  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  182  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr  184  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  186  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr  188  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr  192  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  240  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr  244  <|@ instruction JUMP ~outgoingValues: [v78|DWORD, v77|DWORD] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  248  <|@ instruction JUMP ~outgoingValues: [v37|DWORD, v38|DWORD] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  250  <|@ instruction [v79|DWORD, v80|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr  266  <|@ instruction JUMP ~outgoingValues: [v85|DWORD, v84|DWORD] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [v80|DWORD] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  274  <|@ instruction JUMP ~outgoingValues: [v14|DWORD] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction JUMP ~outgoingValues: [v1|DWORD] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  280  <|@ instruction [v86|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr  284  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [int[-34843|0xffffffffffff77e5], long[0|0x0]] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  296  <|@ instruction JUMP ~outgoingValues: [int[-37915|0xffffffffffff6be5], long[0|0x0]] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  300  <|@ instruction JUMP ~outgoingValues: [int[-40475|0xffffffffffff61e5], long[664|0x298]] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  304  <|@ instruction JUMP ~outgoingValues: [int[-32828|0xffffffffffff7fc4], long[20|0x14]] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  306  <|@ instruction [v87|DWORD, v88|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  308  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr  310  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr  312  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|d fixed "[rax|d]" rax|d v86|d [0, 1[[282, 284[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|q fixed "[rsi|q]" rsi|q v0|q [0, 6[[16, 18[ "NoOptimization"
  v0|q QWORD "[rsi|q]" v0|q rsi|q [6, 16[6 MustHaveRegister 8 MustHaveRegister 10 MustHaveRegister 12 MustHaveRegister 14 MustHaveRegister 16 ShouldHaveRegister  "NoSpillStore"
  v1|d DWORD "[r10|d]" v1|d -1 [8, 116[[276, 279[[286, 313[8 MustHaveRegister 66 MustHaveRegister 68 ShouldHaveRegister 278 ShouldHaveRegister  "NoSpillStore"
  v2|q QWORD "[r11|q]" v2|q -1 [10, 268[[286, 313[10 MustHaveRegister 20 MustHaveRegister 24 MustHaveRegister 38 MustHaveRegister 60 MustHaveRegister 70 MustHaveRegister 122 MustHaveRegister 144 MustHaveRegister 151 LiveAtLoopEnd 164 MustHaveRegister 168 MustHaveRegister 172 MustHaveRegister 176 MustHaveRegister 180 MustHaveRegister 184 MustHaveRegister 188 MustHaveRegister 238 MustHaveRegister 245 LiveAtLoopEnd 260 MustHaveRegister 267 LiveAtLoopEnd  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d -1 [12, 158[12 MustHaveRegister 56 MustHaveRegister 76 MustHaveRegister 82 MustHaveRegister 92 MustHaveRegister 128 MustHaveRegister 130 ShouldHaveRegister 154 MustHaveRegister  "SpillInDominator"
  v4|d DWORD "[r9|d]" v4|d -1 [14, 126[[286, 313[14 MustHaveRegister 56 ShouldHaveRegister 62 ShouldHaveRegister 70 MustHaveRegister 74 ShouldHaveRegister 80 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v5|d DWORD "[rax|d]" v5|d -1 [24, 28[24 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v6|q QWORD "[rax|q]" v6|q v5|d [28, 31[28 MustHaveRegister 30 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[rcx|q]" v7|q -1 [26, 29[26 MustHaveRegister 28 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[rax|q]" v8|q v6|q [36, 44[44 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rcx|q]" v9|q -1 [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v10|d DWORD "[rax|d]" v10|d -1 [60, 114[60 MustHaveRegister 62 MustHaveRegister 100 ShouldHaveRegister 106 MustHaveRegister 114 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[rcx|d]" v11|d v1|d [66, 68[66 MustHaveRegister 68 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rcx|d]" v12|d v11|d [68, 72[68 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v13|d DWORD "[rbx|d]" v13|d -1 [70, 72[70 MustHaveRegister 72 ShouldHaveRegister  "NoSpillStore"
  v14|d DWORD "[rcx|d]" v14|d v12|d [72, 121[[272, 275[72 MustHaveRegister 118 MustHaveRegister 120 ShouldHaveRegister 274 ShouldHaveRegister  "NoSpillStore"
  v15|d DWORD "[rbx|d]" v15|d v4|d [74, 122[74 MustHaveRegister 76 ShouldHaveRegister 114 ShouldHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v16|d DWORD "[rdi|d]" v16|d v30|d [80, 133[80 MustHaveRegister 82 ShouldHaveRegister 90 ShouldHaveRegister 92 ShouldHaveRegister 106 ShouldHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v17|q QWORD "[rdx|q]" v17|q -1 [90, 96[90 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[rsi|d]" v18|d v3|d [92, 94[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v19|q QWORD "[rsi|q]" v19|q -1 [94, 96[94 MustHaveRegister 96 ShouldHaveRegister  "NoSpillStore"
  v20|q QWORD "[rdx|q]" v20|q v17|q [96, 98[96 MustHaveRegister 98 ShouldHaveRegister  "NoSpillStore"
  v21|q QWORD "[rdx|q]" v21|q v20|q [98, 102[98 MustHaveRegister 102 ShouldHaveRegister  "NoSpillStore"
  v22|q QWORD "[rsi|q]" v22|q v10|d [100, 102[100 MustHaveRegister 102 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[rax|d]" v23|d v14|d [118, 120[118 MustHaveRegister 120 MustHaveRegister  "NoSpillStore"
  v24|d DWORD "[rax|d]" v24|d v23|d [120, 124[120 MustHaveRegister 124 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r10|d]" v25|d -1 [122, 124[122 MustHaveRegister 124 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[rax|d]" v26|d v24|d [124, 133[124 MustHaveRegister 132 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r10|d]" v27|d -1 [126, 131[126 MustHaveRegister 128 ShouldHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v28|d DWORD "[r9|d]" v28|d v3|d [130, 152[130 MustHaveRegister 136 MustHaveRegister 151 LiveAtLoopEnd  "NoSpillStore"
  v29|d DWORD "[rax|d]" v29|d v26|d [134, 143[[152, 157[140 MustHaveRegister 142 ShouldHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v30|d DWORD "[rdi|d]" v30|d v16|d [134, 148[[152, 157[136 ShouldHaveRegister 144 MustHaveRegister 148 ShouldHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r10|d]" v31|d v29|d [140, 142[140 MustHaveRegister 142 MustHaveRegister  "NoSpillStore"
  v32|d DWORD "[r10|d]" v32|d v31|d [142, 146[142 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[rax|d]" v33|d -1 [144, 146[144 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v34|d DWORD "[r10|d]" v34|d v32|d [146, 151[146 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rdi|d]" v35|d v30|d [148, 151[148 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v36|d DWORD "[r10|d]" v36|d -1 [154, 246[154 MustHaveRegister 160 MustHaveRegister 245 LiveAtLoopEnd  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d v30|d [158, 242[[246, 249[160 ShouldHaveRegister 164 MustHaveRegister 166 ShouldHaveRegister 170 MustHaveRegister 174 MustHaveRegister 178 MustHaveRegister 182 MustHaveRegister 186 MustHaveRegister 190 MustHaveRegister 242 MustHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v38|d DWORD "[rax|d]" v38|d v29|d [158, 195[[246, 249[192 MustHaveRegister 194 ShouldHaveRegister 248 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[r9|d]" v39|d -1 [164, 196[164 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v40|d DWORD "[rcx|d]" v40|d v37|d [166, 168[166 MustHaveRegister 168 MustHaveRegister  "NoSpillStore"
  v41|d DWORD "[rcx|d]" v41|d -1 [168, 202[168 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v42|d DWORD "[rbx|d]" v42|d -1 [170, 172[170 MustHaveRegister 172 MustHaveRegister  "NoSpillStore"
  v43|d DWORD "[rbx|d]" v43|d -1 [172, 208[172 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v44|d DWORD "[rdx|d]" v44|d -1 [174, 176[174 MustHaveRegister 176 MustHaveRegister  "NoSpillStore"
  v45|d DWORD "[rdx|d]" v45|d -1 [176, 214[176 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v46|d DWORD "[rsi|d]" v46|d -1 [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rsi|d]" v47|d -1 [180, 220[180 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[rbp|d]" v48|d -1 [182, 184[182 MustHaveRegister 184 MustHaveRegister  "NoSpillStore"
  v49|d DWORD "[rbp|d]" v49|d -1 [184, 226[184 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v50|d DWORD "[r13|d]" v50|d -1 [186, 188[186 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v51|d DWORD "[r13|d]" v51|d -1 [188, 232[188 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[r14|d]" v52|d -1 [190, 238[190 MustHaveRegister 238 MustHaveRegister  "NoSpillStore"
  v53|d DWORD "[r8|d]" v53|d v38|d [192, 194[192 MustHaveRegister 194 MustHaveRegister  "NoSpillStore"
  v54|d DWORD "[r8|d]" v54|d v53|d [194, 196[194 MustHaveRegister 196 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[r8|d]" v55|d v54|d [196, 201[196 MustHaveRegister 198 MustHaveRegister 200 ShouldHaveRegister  "NoSpillStore"
  v56|d DWORD "[rax|d]" v56|d v55|d [198, 200[198 MustHaveRegister 200 MustHaveRegister  "NoSpillStore"
  v57|d DWORD "[rax|d]" v57|d v56|d [200, 202[200 MustHaveRegister 202 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[rax|d]" v58|d v57|d [202, 207[202 MustHaveRegister 204 MustHaveRegister 206 ShouldHaveRegister  "NoSpillStore"
  v59|d DWORD "[r8|d]" v59|d v58|d [204, 206[204 MustHaveRegister 206 MustHaveRegister  "NoSpillStore"
  v60|d DWORD "[r8|d]" v60|d v59|d [206, 208[206 MustHaveRegister 208 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d v60|d [208, 213[208 MustHaveRegister 210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v62|d DWORD "[rax|d]" v62|d v61|d [210, 212[210 MustHaveRegister 212 MustHaveRegister  "NoSpillStore"
  v63|d DWORD "[rax|d]" v63|d v62|d [212, 214[212 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[rax|d]" v64|d v63|d [214, 219[214 MustHaveRegister 216 MustHaveRegister 218 ShouldHaveRegister  "NoSpillStore"
  v65|d DWORD "[r8|d]" v65|d v64|d [216, 218[216 MustHaveRegister 218 MustHaveRegister  "NoSpillStore"
  v66|d DWORD "[r8|d]" v66|d v65|d [218, 220[218 MustHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d v66|d [220, 225[220 MustHaveRegister 222 MustHaveRegister 224 ShouldHaveRegister  "NoSpillStore"
  v68|d DWORD "[rax|d]" v68|d v67|d [222, 224[222 MustHaveRegister 224 MustHaveRegister  "NoSpillStore"
  v69|d DWORD "[rax|d]" v69|d v68|d [224, 226[224 MustHaveRegister 226 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[rax|d]" v70|d v69|d [226, 231[226 MustHaveRegister 228 MustHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[r8|d]" v71|d v70|d [228, 230[228 MustHaveRegister 230 MustHaveRegister  "NoSpillStore"
  v72|d DWORD "[r8|d]" v72|d v71|d [230, 232[230 MustHaveRegister 232 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r8|d]" v73|d v72|d [232, 237[232 MustHaveRegister 234 MustHaveRegister 236 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[rax|d]" v74|d v73|d [234, 236[234 MustHaveRegister 236 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[rax|d]" v75|d v74|d [236, 240[236 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r8|d]" v76|d -1 [238, 240[238 MustHaveRegister 240 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[rax|d]" v77|d v75|d [240, 245[240 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[r8|d]" v78|d -1 [242, 245[242 MustHaveRegister 244 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[rdi|d]" v79|d v37|d [250, 264[252 ShouldHaveRegister 260 MustHaveRegister 264 ShouldHaveRegister  "NoSpillStore"
  v80|d DWORD "[rax|d]" v80|d v38|d [250, 259[[268, 271[256 MustHaveRegister 258 ShouldHaveRegister 270 ShouldHaveRegister  "NoSpillStore"
  v81|d DWORD "[r10|d]" v81|d v80|d [256, 258[256 MustHaveRegister 258 MustHaveRegister  "NoSpillStore"
  v82|d DWORD "[r10|d]" v82|d v81|d [258, 262[258 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v83|d DWORD "[rax|d]" v83|d -1 [260, 262[260 MustHaveRegister 262 ShouldHaveRegister  "NoSpillStore"
  v84|d DWORD "[r10|d]" v84|d v82|d [262, 267[262 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v85|d DWORD "[rdi|d]" v85|d v79|d [264, 267[264 MustHaveRegister 266 ShouldHaveRegister  "NoSpillStore"
  v86|d DWORD "[rax|d]" v86|d v80|d [280, 282[282 ShouldHaveRegister  "NoSpillStore"
  v87|d DWORD "[rcx|d]" v87|d -1 [306, 308[308 MustHaveRegister  "NoSpillStore"
  v88|q QWORD "[rbx|q]" v88|q -1 [306, 310[310 MustHaveRegister  "NoSpillStore"
  v89|d DWORD "[r8|d]" v3|d v3|d [250, 268[[286, 313[252 MustHaveRegister 267 LiveAtLoopEnd  "SpillInDominator"
  v90|d DWORD "[vstack:0|d]" v3|d v3|d [158, 250[ "SpillInDominator"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   16  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   18  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   20  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   26  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   28  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   30  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v8|QWORD = MOVE input: Object[null] // MoveResolver resolve mapping <|@ <|@
      nr   34  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [v8|QWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   38  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   68  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   72  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   92  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   96  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   98  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr  100  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr  128  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr  130  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  134  <|@ instruction [v29|DWORD, v30|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  142  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: v34|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: r8|DWORD moveKind: DWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  154  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v90|DWORD = MOVE input: v3|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  156  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  158  <|@ instruction [v37|DWORD, v38|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  160  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  162  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  164  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  166  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr  168  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  170  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr  172  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  174  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr  176  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr  180  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  182  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr  184  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  186  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr  188  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr  192  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  240  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVE input: v78|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  244  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  250  <|@ instruction [v79|DWORD, v80|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = MOVE input: v84|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = MOVE input: v14|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  274  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = MOVE input: v1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  278  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  280  <|@ instruction [v86|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr  284  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] // MoveResolver resolve mapping <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOVE input: long[664|0x298] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] // MoveResolver resolve mapping <|@ <|@
      nr  296  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOVE input: long[664|0x298] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] // MoveResolver resolve mapping <|@ <|@
      nr  300  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] // MoveResolver resolve mapping <|@ <|@
      nr  304  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  306  <|@ instruction [v87|DWORD, v88|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  308  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr  310  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr  312  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD = MOVE input: rsi|QWORD moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD = MOV input: [v0|QWORD + 40] size: DWORD <|@ <|@
      nr   10  <|@ instruction v2|QWORD[.] = MOV input: [v0|QWORD + 32] size: QWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOV input: [v0|QWORD + 8] size: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = MOV input: [v0|QWORD] size: DWORD <|@ <|@
      nr   16  <|@ instruction rsi|QWORD = MOVE input: v0|QWORD moveKind: QWORD <|@ <|@
      nr   18  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   20  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction v5|DWORD = MOV input: [v2|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   26  <|@ instruction v7|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   28  <|@ instruction v6|QWORD = UNCOMPRESSPOINTER (input: v5|DWORD, ~baseRegister: v7|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   30  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v8|QWORD = MOVE input: Object[null] // MoveResolver resolve mapping <|@ <|@
      nr   34  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   38  <|@ instruction TESTBRANCH (x: v2|QWORD[.], y: v2|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction v9|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v9|QWORD, y: v8|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v4|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction v10|DWORD = MOV input: [v2|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v4|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction v11|DWORD = SHL x: v1|DWORD y: 5 size: DWORD <|@ <|@
      nr   68  <|@ instruction v12|DWORD = SUB (x: v11|DWORD, ~y: v1|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v13|DWORD = MOVZXB input: [v2|QWORD[.] + v4|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   72  <|@ instruction v14|DWORD = ADD (x: v12|DWORD, y: v13|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v15|DWORD = INC value: v4|DWORD size: DWORD <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v15|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction v16|DWORD = LEA address: [v4|DWORD + 2] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v16|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction v17|QWORD = MOVSXD value: v16|DWORD size: QWORD <|@ <|@
      nr   92  <|@ instruction v18|DWORD = SUB (x: v3|DWORD, ~y: v16|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction v19|QWORD = MOVSXD value: v18|DWORD size: QWORD <|@ <|@
      nr   96  <|@ instruction v20|QWORD = ADD (x: v17|QWORD, y: v19|QWORD) size: QWORD <|@ <|@
      nr   98  <|@ instruction v21|QWORD = DEC value: v20|QWORD size: QWORD <|@ <|@
      nr  100  <|@ instruction v22|QWORD = MOVE input: v10|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: v22|QWORD, y: v21|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v16|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: v10|DWORD, y: v15|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction v23|DWORD = SHL x: v14|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction v24|DWORD = SUB (x: v23|DWORD, ~y: v14|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction v25|DWORD = MOVZXB input: [v2|QWORD[.] + v15|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v26|DWORD = ADD (x: v24|DWORD, y: v25|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction v27|DWORD = LEA address: [v4|DWORD + 3] size: DWORD <|@ <|@
      nr  128  <|@ instruction CMP (x: v3|DWORD, y: v27|DWORD) size: DWORD <|@ <|@
      nr  130  <|@ instruction v28|DWORD = CMOVE (falseValue: v3|DWORD, ~trueValue: v27|DWORD) condition: > <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v30|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction v31|DWORD = SHL x: v29|DWORD y: 5 size: DWORD <|@ <|@
      nr  142  <|@ instruction v32|DWORD = SUB (x: v31|DWORD, ~y: v29|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction v33|DWORD = MOVZXB input: [v2|QWORD[.] + v30|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction v34|DWORD = ADD (x: v32|DWORD, y: v33|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v35|DWORD = INC value: v30|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: v34|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: r8|DWORD moveKind: DWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  154  <|@ instruction v36|DWORD = LEA address: [v3|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  156  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  158  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  160  <|@ instruction CMPBRANCH (x: v36|DWORD, y: v37|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  162  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  164  <|@ instruction v39|DWORD = MOVZXB input: [v2|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  166  <|@ instruction v40|DWORD = INC value: v37|DWORD size: DWORD <|@ <|@
      nr  168  <|@ instruction v41|DWORD = MOVZXB input: [v2|QWORD[.] + v40|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  170  <|@ instruction v42|DWORD = LEA address: [v37|DWORD + 2] size: DWORD <|@ <|@
      nr  172  <|@ instruction v43|DWORD = MOVZXB input: [v2|QWORD[.] + v42|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  174  <|@ instruction v44|DWORD = LEA address: [v37|DWORD + 3] size: DWORD <|@ <|@
      nr  176  <|@ instruction v45|DWORD = MOVZXB input: [v2|QWORD[.] + v44|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction v46|DWORD = LEA address: [v37|DWORD + 4] size: DWORD <|@ <|@
      nr  180  <|@ instruction v47|DWORD = MOVZXB input: [v2|QWORD[.] + v46|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  182  <|@ instruction v48|DWORD = LEA address: [v37|DWORD + 5] size: DWORD <|@ <|@
      nr  184  <|@ instruction v49|DWORD = MOVZXB input: [v2|QWORD[.] + v48|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  186  <|@ instruction v50|DWORD = LEA address: [v37|DWORD + 6] size: DWORD <|@ <|@
      nr  188  <|@ instruction v51|DWORD = MOVZXB input: [v2|QWORD[.] + v50|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v52|DWORD = LEA address: [v37|DWORD + 7] size: DWORD <|@ <|@
      nr  192  <|@ instruction v53|DWORD = SHL x: v38|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction v54|DWORD = SUB (x: v53|DWORD, ~y: v38|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction v55|DWORD = ADD (x: v54|DWORD, y: v39|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction v56|DWORD = SHL x: v55|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction v57|DWORD = SUB (x: v56|DWORD, ~y: v55|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction v58|DWORD = ADD (x: v57|DWORD, y: v41|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction v59|DWORD = SHL x: v58|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction v60|DWORD = SUB (x: v59|DWORD, ~y: v58|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction v61|DWORD = ADD (x: v60|DWORD, y: v43|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v62|DWORD = SHL x: v61|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction v63|DWORD = SUB (x: v62|DWORD, ~y: v61|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v64|DWORD = ADD (x: v63|DWORD, y: v45|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction v65|DWORD = SHL x: v64|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction v66|DWORD = SUB (x: v65|DWORD, ~y: v64|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction v67|DWORD = ADD (x: v66|DWORD, y: v47|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction v68|DWORD = SHL x: v67|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction v69|DWORD = SUB (x: v68|DWORD, ~y: v67|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction v70|DWORD = ADD (x: v69|DWORD, y: v49|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction v71|DWORD = SHL x: v70|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction v72|DWORD = SUB (x: v71|DWORD, ~y: v70|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction v73|DWORD = ADD (x: v72|DWORD, y: v51|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction v74|DWORD = SHL x: v73|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v73|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction v76|DWORD = MOVZXB input: [v2|QWORD[.] + v52|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  240  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction v78|DWORD = LEA address: [v37|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = MOVE input: v78|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  244  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v89|DWORD = MOVE input: v90|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: v3|DWORD, y: v79|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction v81|DWORD = SHL x: v80|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction v82|DWORD = SUB (x: v81|DWORD, ~y: v80|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction v83|DWORD = MOVZXB input: [v2|QWORD[.] + v79|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction v84|DWORD = ADD (x: v82|DWORD, y: v83|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction v85|DWORD = INC value: v79|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v80|DWORD = MOVE input: v84|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = MOVE input: v14|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  274  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v86|DWORD = MOVE input: v1|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  278  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  280  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVE input: v86|DWORD moveKind: DWORD <|@ <|@
      nr  284  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] // MoveResolver resolve mapping <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOVE input: long[664|0x298] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] // MoveResolver resolve mapping <|@ <|@
      nr  296  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOVE input: long[664|0x298] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] // MoveResolver resolve mapping <|@ <|@
      nr  300  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v88|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v87|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] // MoveResolver resolve mapping <|@ <|@
      nr  304  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  308  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v87|DWORD) size: DWORD <|@ <|@
      nr  310  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v88|QWORD) size: QWORD <|@ <|@
      nr  312  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: v1|DWORD v2|QWORD[.] - - v3|DWORD v4|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    8  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   12  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   14  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   18  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   20  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   26  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   28  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   30  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: Object[null] // MoveResolver resolve mapping <|@ <|@
      nr   34  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   38  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   68  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   72  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   92  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   96  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   98  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr  100  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  128  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  130  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  142  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: r8|DWORD moveKind: DWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  154  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  156  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  158  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  160  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  162  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  164  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  166  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  168  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  170  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  172  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  174  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  176  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  180  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  182  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  184  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  186  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  188  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  192  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  244  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  274  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  278  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  280  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  284  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] // MoveResolver resolve mapping <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] // MoveResolver resolve mapping <|@ <|@
      nr  296  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] // MoveResolver resolve mapping <|@ <|@
      nr  300  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] // MoveResolver resolve mapping <|@ <|@
      nr  304  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  308  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  310  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  312  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    8  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr   10  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   12  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   14  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   18  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   20  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   22  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   24  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   26  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   28  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   30  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   32  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|QWORD = MOVE input: Object[null] // MoveResolver resolve mapping <|@ <|@
      nr   34  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   36  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   38  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   62  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   64  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   68  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   72  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   76  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   80  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   82  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   88  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   92  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   96  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   98  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr  100  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  102  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  104  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  106  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  116  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  118  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  120  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  122  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  126  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  128  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  130  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  132  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  134  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  136  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  138  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  140  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  142  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  146  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  150  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: r8|DWORD moveKind: DWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr  154  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  156  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  158  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  160  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  162  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  164  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  166  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  168  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  170  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  172  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  174  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  176  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  178  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  180  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  182  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  184  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  186  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  188  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  192  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  194  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  198  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  202  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  206  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  208  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  242  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  244  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  246  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: vstack:0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  248  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  250  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  252  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  254  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  256  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  258  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  262  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  264  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  266  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  268  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  274  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  278  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  280  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  284  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  286  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] // MoveResolver resolve mapping <|@ <|@
      nr  288  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  290  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] // MoveResolver resolve mapping <|@ <|@
      nr  292  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  294  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] // MoveResolver resolve mapping <|@ <|@
      nr  296  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  298  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] // MoveResolver resolve mapping <|@ <|@
      nr  300  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  302  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] // MoveResolver resolve mapping <|@ <|@
      nr  304  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  306  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  308  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  310  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  312  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackSlot numbering"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction vstack:0|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: vstack:0|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before stack slot allocation"
  vstack:0|d DWORD "[vstack:0|d]" vstack:0|d -1 [170, 268[ "NOT_SUPPORTED"
end_intervals
begin_intervals
  name "After stack slot allocation"
  vstack:0|d DWORD "[stack:28|d]" vstack:0|d -1 [170, 268[ "NOT_SUPPORTED"
end_intervals
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B6" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B7" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   48  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   50  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" 
    xhandlers
    flags 
    probability 4600877379321698714
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B7 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B4" "B6" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B16" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B16 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  122  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  124  <|@ instruction JUMP ~outgoingValues: [] destination: B16 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B13" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B13 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B17" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr  102  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B13 -> B17 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" "B13" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B27" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B27 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B27"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B32" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  292  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  294  <|@ instruction JUMP ~outgoingValues: [] destination: B27 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B27" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B7" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B7 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B7 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B3" "B5" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B17" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B17 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B17" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B17 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B10" "B12" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B32" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B7" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B7 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B7 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B3" "B5" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B17" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B17 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B10" "B12" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B32" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B17" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B17 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B7" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B7 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B7 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B3" "B5" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B17" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B17 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B10" "B12" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B32" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B17" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B17 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B7" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B7 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B7 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B3" "B5" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B17" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B17 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B10" "B12" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B32" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B17" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B17 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B7" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B7 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B7 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B3" "B5" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@reference-map: [r11:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B17" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B17 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B10" "B12" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B32" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B17" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B17 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@reference-map: [r11:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B2" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD <|@ <|@
      nr    8  <|@ instruction r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD <|@ <|@
      nr   10  <|@ instruction r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD <|@ <|@
      nr   12  <|@ instruction r9|DWORD = MOV input: [rsi|QWORD] size: DWORD <|@ <|@
      nr   14  <|@ instruction - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD] <|@ <|@
      nr   16  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4606281698874543309
    begin_IR
      LIR
      nr   24  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   26  <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD <|@ <|@
      nr   28  <|@ instruction rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000] <|@ <|@
      nr   30  <|@ instruction rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0 <|@ <|@
      nr   32  <|@ instruction JUMP ~outgoingValues: [] destination: B2 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B1" "B2" 
    successors "B7" "B5" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   36  <|@ instruction TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B7 falseDestination: B3 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B7" "B33" 
    xhandlers
    flags 
    probability 4603579539098121011
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>} <|@ <|@
      nr   46  <|@ instruction CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B7 falseDestination: B5 -> B33 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B3" "B5" 
    successors "B8" "B31" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B9" "B30" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   56  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   58  <|@ st <@st|@reference-map: [r11:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8] <|@ <|@
      nr   60  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" "B29" 
    xhandlers
    flags 
    probability 4606483285839431255
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD <|@ <|@
      nr   66  <|@ instruction rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD <|@ <|@
      nr   68  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   70  <|@ instruction rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr   72  <|@ instruction rbx|DWORD = INC value: r9|DWORD size: DWORD <|@ <|@
      nr   74  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B11" "B17" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr   76  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   78  <|@ instruction rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B17 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B10" "B12" 
    successors "B18" "B28" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  126  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  128  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B19" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  130  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  132  <|@ instruction rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD <|@ <|@
      nr  134  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD <|@ <|@
      nr  136  <|@ instruction r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  138  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  140  <|@ instruction r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD <|@ <|@
      nr  142  <|@ instruction CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr  144  <|@ instruction r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr  146  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B19" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  152  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  154  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  160  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  162  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  164  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  166  <|@ instruction JUMP ~outgoingValues: [] destination: B20 -> B19 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B18" "B20" 
    successors "B20" "B21" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  148  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  150  <|@ instruction CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B19" 
    successors "B22" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  168  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  170  <|@ instruction stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  172  <|@ instruction r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD <|@ <|@
      nr  174  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B23"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B22" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4599156491405951762
    begin_IR
      LIR
      nr  180  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  182  <|@ instruction r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  184  <|@ instruction rcx|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  186  <|@ instruction rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  188  <|@ instruction rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD <|@ <|@
      nr  190  <|@ instruction rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  192  <|@ instruction rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD <|@ <|@
      nr  194  <|@ instruction rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  196  <|@ instruction rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD <|@ <|@
      nr  198  <|@ instruction rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  200  <|@ instruction rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD <|@ <|@
      nr  202  <|@ instruction rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  204  <|@ instruction r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD <|@ <|@
      nr  206  <|@ instruction r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  208  <|@ instruction r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  212  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  216  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  218  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  220  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  222  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  228  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  230  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  232  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD <|@ <|@
      nr  234  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  236  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  238  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  240  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  242  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  244  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  246  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  248  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  250  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  254  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  256  <|@ instruction r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  258  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  260  <|@ instruction r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD <|@ <|@
      nr  262  <|@ instruction rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  264  <|@ instruction JUMP ~outgoingValues: [] destination: B23 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B21" "B23" 
    successors "B23" "B24" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4607854503711442715
    begin_IR
      LIR
      nr  176  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  178  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B24"
    from_bci -1
    to_bci -1
    predecessors "B22" 
    successors "B25" 
    xhandlers
    flags 
    probability 4605784152878845101
    begin_IR
      LIR
      nr  266  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  268  <|@ instruction r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  270  <|@ instruction JUMP ~outgoingValues: [] destination: B24 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B26"
    from_bci -1
    to_bci -1
    predecessors "B25" 
    successors "B25" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576072528178511984
    begin_IR
      LIR
      nr  276  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  278  <|@ instruction r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  280  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  282  <|@ instruction rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  284  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  286  <|@ instruction rdi|DWORD = INC value: rdi|DWORD size: DWORD <|@ <|@
      nr  288  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  290  <|@ instruction JUMP ~outgoingValues: [] destination: B26 -> B25 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B25"
    from_bci -1
    to_bci -1
    predecessors "B24" "B26" 
    successors "B26" "B32" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4605861010791305391
    begin_IR
      LIR
      nr  272  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  274  <|@ instruction CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B32"
    from_bci -1
    to_bci -1
    predecessors "B25" "B31" "B29" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  324  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  326  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B12" "B15" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD <|@ <|@
      nr   86  <|@ instruction rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD <|@ <|@
      nr   90  <|@ instruction rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD <|@ <|@
      nr   92  <|@ instruction rdx|QWORD = DEC value: rdx|QWORD size: QWORD <|@ <|@
      nr   94  <|@ instruction rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   96  <|@ instruction CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B17" "B14" 
    xhandlers
    flags 
    probability 4601280553251474605
    begin_IR
      LIR
      nr   98  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  100  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B17 falseDestination: B12 -> B14 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B3" 
    xhandlers
    flags 
    probability 4591870180066957720
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction rax|QWORD = MOVE input: Object[null] <|@ <|@
      nr   22  <|@ instruction JUMP ~outgoingValues: [] destination: B1 -> B3 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B29"
    from_bci -1
    to_bci -1
    predecessors "B9" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854156
    begin_IR
      LIR
      nr  304  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  306  <|@ instruction rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr  308  <|@ instruction JUMP ~outgoingValues: [] destination: B29 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B31"
    from_bci -1
    to_bci -1
    predecessors "B7" 
    successors "B32" 
    xhandlers
    flags 
    probability 4590257484347854152
    begin_IR
      LIR
      nr  318  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  320  <|@ instruction rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  322  <|@ instruction JUMP ~outgoingValues: [] destination: B31 -> B32 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B11" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  114  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  116  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  120  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B34"
    from_bci -1
    to_bci -1
    predecessors "B33" "B30" "B15" "B28" "B14" 
    successors 
    xhandlers
    flags 
    probability 2365515704276353024
    begin_IR
      LIR
      nr  336  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  338  <|@ instruction MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD <|@ <|@
      nr  340  <|@ instruction MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD <|@ <|@
      nr  342  <|@ st <@st|@reference-map: [r11:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
locals: r10|DWORD r11|QWORD[.] - - r8|DWORD r9|DWORD 
>@ <|@ instruction DEOPT info [bci:8] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B33"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  328  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  330  <|@ instruction rbx|QWORD = MOVE input: long[20|0x14] <|@ <|@
      nr  332  <|@ instruction rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4] <|@ <|@
      nr  334  <|@ instruction JUMP ~outgoingValues: [] destination: B33 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B12" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction rbx|QWORD = MOVE input: long[664|0x298] <|@ <|@
      nr  110  <|@ instruction rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5] <|@ <|@
      nr  112  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B30"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  310  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  312  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  314  <|@ instruction rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5] <|@ <|@
      nr  316  <|@ instruction JUMP ~outgoingValues: [] destination: B30 -> B34 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B28"
    from_bci -1
    to_bci -1
    predecessors "B17" 
    successors "B34" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  296  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  298  <|@ instruction rbx|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  300  <|@ instruction rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5] <|@ <|@
      nr  302  <|@ instruction JUMP ~outgoingValues: [] destination: B28 -> B34 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 89842400c0feff4883ec189041817f20000000000f85b702000048896c2410448b56284c8b5e20448b4608448b0ee8000000004d85db0f8421020000418b430848b9000000738a7f0000488d04014d85db0f841300000048b9addeaddeaddeadde483bc80f852f020000453bc10f8efa010000418b430c413bc10f8635020000418bcac1e105412bca430fb65c0b1003cb418bd9ffc3443bc30f8eca010000418d7902443bc70f8f880100003bc30f860f0200008bc1c1e0052bc1450fb6541b104103c2458d5103453bc2458bc8450f4fcae921000000660f1f840000000000448bd041c1e205442bd0410fb6443b104403d0ffc7418bc2443bcf7fe34489442404458d50f8e9c50000006666660f1f84000000000066666690660f1f440000450fb64c3b108bcfffc1410fb64c0b108d5f02410fb65c1b108d5703410fb65413108d7704410fb67433108d6f05410fb66c2b10448d6f06470fb66c2b10448d7707448bc041c1e005442bc04503c1418bc0c1e005412bc003c1448bc041c1e005442bc04403c3418bc0c1e005412bc003c2448bc041c1e005442bc04403c6418bc0c1e005412bc003c5448bc041c1e005442bc04503c5418bc0c1e005412bc0470fb64433104103c0448d4708418bf8443bd70f8f47ffffff448b4424046690e9330000006666660f1f840000000000666666900f1f84000000000066666690448bd041c1e205442bd0410fb6443b104403d0ffc7418bc2443bc77fe3488b6c24104883c418493ba7500400000f87ae000000c34863d7418bf02bf74863f64803d648ffca8bf0483bf20f86220000003bc70f8754feffffe94a00000048c7c000000000e9e5fdffff8bc1ebb0418bc2ebab48c7c398020000b9e561ffff41898f8404000049899f90040000e8000000000f1f84000000000048c7c314000000b9c47fffffebd748c7c398020000b9e561ffffebc948c7c300000000b9e577ffffebbb48c7c300000000b9e56bffffebad48896c2410e800000000e93afdfffff4488d0d3effffff49898f68040000e90cfdfffff441c78784040000f57dffff49c7879004000000000000e8000000000f1f840000000000e800000000f46690e800000000f4  <||@
  Comment 0 [stack overflow check]  <||@
  Comment 0 OSR_ENTRY  <||@
  Comment 12 FRAME_COMPLETE  <||@
  Comment 12 ENTRY_BARRIER_PATCH  <||@
  Comment 26 block B0 null  <||@
  Comment 26 0 [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 26 2 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 31 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD  <||@
  Comment 31 6 r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD  <||@
  Comment 35 8 r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD  <||@
  Comment 39 10 r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD  <||@
  Comment 43 12 r9|DWORD = MOV input: [rsi|QWORD] size: DWORD  <||@
  Comment 46 14 - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD]  <||@
  Comment 46 {Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD]}  <||@
  Comment 51 16 TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD  <||@
  Comment 60 block B2 null  <||@
  Comment 60 24 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 60 26 rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD  <||@
  Comment 64 28 rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000]  <||@
  Comment 74 30 rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0  <||@
  Comment 78 32 JUMP ~outgoingValues: [] destination: B2 -> B3  <||@
  Comment 78 block B3 null  <||@
  Comment 78 34 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 78 36 TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B7 falseDestination: B3 -> B5 size: QWORD  <||@
  Comment 87 block B5 null  <||@
  Comment 87 42 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 87 44 rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>}  <||@
  Comment 87 {meta{HotSpotType<[B, resolved>}}  <||@
  Comment 97 46 CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B7 falseDestination: B5 -> B33 size: QWORD  <||@
  Comment 106 block B7 null  <||@
  Comment 106 52 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 106 54 CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD  <||@
  Comment 115 block B8 null  <||@
  Comment 115 56 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 115 58 rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8]  <||@
  Comment 115 [r11:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8, duringCall: false, rethrow: false]
              |0          |1             |2  |3  |4         |5        
     locals:  |r10|DWORD  |r11|QWORD[.]  |-  |-  |r8|DWORD  |r9|DWORD   <||@
  Comment 115 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 119 60 CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD  <||@
  Comment 128 block B9 null  <||@
  Comment 128 62 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 128 64 rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD  <||@
  Comment 134 66 rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 137 68 rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD  <||@
  Comment 143 70 rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 145 72 rbx|DWORD = INC value: r9|DWORD size: DWORD  <||@
  Comment 150 74 CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD  <||@
  Comment 159 block B10 null  <||@
  Comment 159 76 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 159 78 rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD  <||@
  Comment 163 80 CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B17 size: DWORD  <||@
  Comment 172 block B17 null  <||@
  Comment 172 126 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 172 128 CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD  <||@
  Comment 180 block B18 null  <||@
  Comment 180 130 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 180 132 rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD  <||@
  Comment 185 134 rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD  <||@
  Comment 187 136 r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 193 138 rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 196 140 r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD  <||@
  Comment 200 142 CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 203 144 r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: >  <||@
  Comment 210 146 JUMP ~outgoingValues: [] destination: B18 -> B19  <||@
  Comment 215 block B20 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 215 152 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 224 154 r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 231 156 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 234 158 rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 240 160 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 243 162 rdi|DWORD = INC value: rdi|DWORD size: DWORD  <||@
  Comment 245 164 rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 248 166 JUMP ~outgoingValues: [] destination: B20 -> B19  <||@
  Comment 248 block B19 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 248 148 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 248 150 CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD  <||@
  Comment 253 block B21 null  <||@
  Comment 253 168 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 253 170 stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD  <||@
  Comment 258 172 r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD  <||@
  Comment 262 174 JUMP ~outgoingValues: [] destination: B21 -> B22  <||@
  Comment 267 block B23 loop 1 depth 1 header:243|LoopBegin  <||@
  Comment 267 180 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 288 182 r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 294 184 rcx|DWORD = INC value: rdi|DWORD size: DWORD  <||@
  Comment 298 186 rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 304 188 rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD  <||@
  Comment 307 190 rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 313 192 rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD  <||@
  Comment 316 194 rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 322 196 rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD  <||@
  Comment 325 198 rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 331 200 rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD  <||@
  Comment 334 202 rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD  <||@
  Comment 340 204 r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD  <||@
  Comment 344 206 r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD  <||@
  Comment 350 208 r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD  <||@
  Comment 354 210 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 361 212 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 364 214 r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 367 216 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 373 218 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 376 220 rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD  <||@
  Comment 378 222 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 385 224 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 388 226 r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 391 228 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 397 230 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 400 232 rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD  <||@
  Comment 402 234 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 409 236 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 412 238 r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD  <||@
  Comment 415 240 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 421 242 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 424 244 rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD  <||@
  Comment 426 246 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 433 248 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 436 250 r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD  <||@
  Comment 439 252 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 445 254 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 448 256 r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD  <||@
  Comment 454 258 rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 457 260 r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD  <||@
  Comment 461 262 rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD  <||@
  Comment 464 264 JUMP ~outgoingValues: [] destination: B23 -> B22  <||@
  Comment 464 block B22 loop 1 depth 1 header:243|LoopBegin  <||@
  Comment 464 176 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 464 178 CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD  <||@
  Comment 473 block B24 null  <||@
  Comment 473 266 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 473 268 r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 478 270 JUMP ~outgoingValues: [] destination: B24 -> B25  <||@
  Comment 485 block B26 loop 2 depth 1 header:266|LoopBegin  <||@
  Comment 485 276 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 512 278 r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 519 280 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 522 282 rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 528 284 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 531 286 rdi|DWORD = INC value: rdi|DWORD size: DWORD  <||@
  Comment 533 288 rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 536 290 JUMP ~outgoingValues: [] destination: B26 -> B25  <||@
  Comment 536 block B25 loop 2 depth 1 header:266|LoopBegin  <||@
  Comment 536 272 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 536 274 CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD  <||@
  Comment 541 block B32 null  <||@
  Comment 541 324 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 541 326 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07  <||@
  Comment 550 POLL_RETURN_FAR  <||@
  Comment 564 block B11 null  <||@
  Comment 564 82 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 564 84 rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD  <||@
  Comment 567 86 rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD  <||@
  Comment 572 88 rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD  <||@
  Comment 575 90 rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD  <||@
  Comment 578 92 rdx|QWORD = DEC value: rdx|QWORD size: QWORD  <||@
  Comment 581 94 rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD  <||@
  Comment 583 96 CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD  <||@
  Comment 592 block B12 null  <||@
  Comment 592 98 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 592 100 CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B17 falseDestination: B12 -> B14 size: DWORD  <||@
  Comment 605 block B1 null  <||@
  Comment 605 18 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 605 20 rax|QWORD = MOVE input: Object[null]  <||@
  Comment 612 22 JUMP ~outgoingValues: [] destination: B1 -> B3  <||@
  Comment 617 block B29 null  <||@
  Comment 617 304 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 617 306 rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 619 308 JUMP ~outgoingValues: [] destination: B29 -> B32  <||@
  Comment 621 block B31 null  <||@
  Comment 621 318 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 621 320 rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 624 322 JUMP ~outgoingValues: [] destination: B31 -> B32  <||@
  Comment 626 block B15 null  <||@
  Comment 626 114 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 626 116 rbx|QWORD = MOVE input: long[664|0x298]  <||@
  Comment 633 118 rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5]  <||@
  Comment 638 120 JUMP ~outgoingValues: [] destination: B15 -> B34  <||@
  Comment 638 block B34 null  <||@
  Comment 638 336 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 638 338 MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD  <||@
  Comment 645 340 MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD  <||@
  Comment 652 342 DEOPT info [bci:8]  <||@
  Comment 652 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 657 [r11:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8, duringCall: false, rethrow: false]
              |0          |1             |2  |3  |4         |5        
     locals:  |r10|DWORD  |r11|QWORD[.]  |-  |-  |r8|DWORD  |r9|DWORD   <||@
  Comment 665 block B33 null  <||@
  Comment 665 328 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 665 330 rbx|QWORD = MOVE input: long[20|0x14]  <||@
  Comment 672 332 rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4]  <||@
  Comment 677 334 JUMP ~outgoingValues: [] destination: B33 -> B34  <||@
  Comment 679 block B14 null  <||@
  Comment 679 106 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 679 108 rbx|QWORD = MOVE input: long[664|0x298]  <||@
  Comment 686 110 rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5]  <||@
  Comment 691 112 JUMP ~outgoingValues: [] destination: B14 -> B34  <||@
  Comment 693 block B30 null  <||@
  Comment 693 310 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 693 312 rbx|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 700 314 rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5]  <||@
  Comment 705 316 JUMP ~outgoingValues: [] destination: B30 -> B34  <||@
  Comment 707 block B28 null  <||@
  Comment 707 296 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 707 298 rbx|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 714 300 rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5]  <||@
  Comment 719 302 JUMP ~outgoingValues: [] destination: B28 -> B34  <||@
  Comment 726 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f8ae4233598, value=140234155311648]:0x7f8acf034220}  <||@
  Comment 751 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f8ae42335a0, value=140234155446272]:0x7f8acf055000}  <||@
  Comment 779 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 784 [r11:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8, duringCall: false, rethrow: false]
              |0          |1             |2  |3  |4         |5        
     locals:  |r10|DWORD  |r11|QWORD[.]  |-  |-  |r8|DWORD  |r9|DWORD   <||@
  Comment 792 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f8acf0b4500:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 792 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 800 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f8ae42335b8, value=140234155441952]:0x7f8acf053f20}  <||@
  Comment 800 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotOSRCompilation-74[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)@8]"
  method "HotSpotOSRCompilation-74[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)@8]"
  date 1740398974946
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7f8acf0bed00 89842400c0feff4883ec189041817f20000000000f85b702000048896c2410448b56284c8b5e20448b4608448b0ee84df7ffff4d85db0f8421020000418b430848b9000000738a7f0000488d04014d85db0f841300000048b9c02200738a7f0000483bc80f852f020000453bc10f8efa010000418b430c413bc10f8635020000418bcac1e105412bca430fb65c0b1003cb418bd9ffc3443bc30f8eca010000418d7902443bc70f8f880100003bc30f860f0200008bc1c1e0052bc1450fb6541b104103c2458d5103453bc2458bc8450f4fcae921000000660f1f840000000000448bd041c1e205442bd0410fb6443b104403d0ffc7418bc2443bcf7fe34489442404458d50f8e9c50000006666660f1f84000000000066666690660f1f440000450fb64c3b108bcfffc1410fb64c0b108d5f02410fb65c1b108d5703410fb65413108d7704410fb67433108d6f05410fb66c2b10448d6f06470fb66c2b10448d7707448bc041c1e005442bc04503c1418bc0c1e005412bc003c1448bc041c1e005442bc04403c3418bc0c1e005412bc003c2448bc041c1e005442bc04403c6418bc0c1e005412bc003c5448bc041c1e005442bc04503c5418bc0c1e005412bc0470fb64433104103c0448d4708418bf8443bd70f8f47ffffff448b4424046690e9330000006666660f1f840000000000666666900f1f84000000000066666690448bd041c1e205442bd0410fb6443b104403d0ffc7418bc2443bc77fe3488b6c24104883c418493ba7500400000f87ae000000c34863d7418bf02bf74863f64803d648ffca8bf0483bf20f86220000003bc70f8754feffffe94a00000048c7c000000000e9e5fdffff8bc1ebb0418bc2ebab48c7c398020000b9e561ffff41898f8404000049899f90040000e8e951f9ff0f1f84000000000048c7c314000000b9c47fffffebd748c7c398020000b9e561ffffebc948c7c300000000b9e577ffffebbb48c7c300000000b9e56bffffebad48896c2410e84552f7ffe93afdfffff4488d0d3effffff49898f68040000e90c60f9fff441c78784040000f57dffff49c7879004000000000000e86a51f9ff0f1f840000000000e8e354fffff46690e8fb4ef9fff4f4f4  <||@
  Comment 0 [stack overflow check]  <||@
  Comment 0 OSR_ENTRY  <||@
  Comment 12 FRAME_COMPLETE  <||@
  Comment 12 ENTRY_BARRIER_PATCH  <||@
  Comment 26 block B0 null  <||@
  Comment 26 0 [rsi|QWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 26 2 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 31 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@4809e64e slotKind: QWORD  <||@
  Comment 31 6 r10|DWORD = MOV input: [rsi|QWORD + 40] size: DWORD  <||@
  Comment 35 8 r11|QWORD[.] = MOV input: [rsi|QWORD + 32] size: QWORD  <||@
  Comment 39 10 r8|DWORD = MOV input: [rsi|QWORD + 8] size: DWORD  <||@
  Comment 43 12 r9|DWORD = MOV input: [rsi|QWORD] size: DWORD  <||@
  Comment 46 14 - = NEAR_FOREIGN_CALL parameters: [rsi|QWORD] temps: [] callTarget: Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD]  <||@
  Comment 46 {Stub<OSR_migration_end(long)void>@0x7f8acf0be480:CallingConvention[rsi|QWORD]:CallingConvention[rsi|QWORD]}  <||@
  Comment 51 16 TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.09999999999999998 condition: = trueDestination: B0 -> B1 falseDestination: B0 -> B2 size: QWORD  <||@
  Comment 60 block B2 null  <||@
  Comment 60 24 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 60 26 rax|DWORD = MOV input: [r11|QWORD[.] + 8] size: DWORD  <||@
  Comment 64 28 rcx|QWORD = MOVE input: long[140232611594240|0x7f8a73000000]  <||@
  Comment 74 30 rax|QWORD = UNCOMPRESSPOINTER (input: rax|DWORD, ~baseRegister: rcx|QWORD) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@2f07d907 encoding: base: 140232611594240 shift: 0  <||@
  Comment 78 32 JUMP ~outgoingValues: [] destination: B2 -> B3  <||@
  Comment 78 block B3 null  <||@
  Comment 78 34 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 78 36 TESTBRANCH (x: r11|QWORD[.], y: r11|QWORD[.]) trueDestinationProbability: 0.4 condition: = trueDestination: B3 -> B7 falseDestination: B3 -> B5 size: QWORD  <||@
  Comment 87 block B5 null  <||@
  Comment 87 42 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 87 44 rcx|QWORD = HOTSPOTLOADMETASPACECONSTANT input: meta{HotSpotType<[B, resolved>}  <||@
  Comment 87 {meta{HotSpotType<[B, resolved>}}  <||@
  Comment 97 46 CMPBRANCH (x: rcx|QWORD, y: rax|QWORD) trueDestinationProbability: 1.0 condition: = trueDestination: B5 -> B7 falseDestination: B5 -> B33 size: QWORD  <||@
  Comment 106 block B7 null  <||@
  Comment 106 52 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 106 54 CMPBRANCH (x: r8|DWORD, y: r9|DWORD) trueDestinationProbability: 0.9223806489882901 condition: > trueDestination: B7 -> B8 falseDestination: B7 -> B31 size: DWORD  <||@
  Comment 115 block B8 null  <||@
  Comment 115 56 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 115 58 rax|DWORD = MOV input: [r11|QWORD[.] + 12] size: DWORD state [bci:8]  <||@
  Comment 115 [r11:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8, duringCall: false, rethrow: false]
              |0          |1             |2  |3  |4         |5        
     locals:  |r10|DWORD  |r11|QWORD[.]  |-  |-  |r8|DWORD  |r9|DWORD   <||@
  Comment 115 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 119 60 CMPBRANCH (x: rax|DWORD, y: r9|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B30 size: DWORD  <||@
  Comment 128 block B9 null  <||@
  Comment 128 62 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 128 64 rcx|DWORD = SHL x: r10|DWORD y: 5 size: DWORD  <||@
  Comment 134 66 rcx|DWORD = SUB (x: rcx|DWORD, ~y: r10|DWORD) size: DWORD  <||@
  Comment 137 68 rbx|DWORD = MOVZXB input: [r11|QWORD[.] + r9|DWORD * 1 + 16] size: DWORD  <||@
  Comment 143 70 rcx|DWORD = ADD (x: rcx|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 145 72 rbx|DWORD = INC value: r9|DWORD size: DWORD  <||@
  Comment 150 74 CMPBRANCH (x: r8|DWORD, y: rbx|DWORD) trueDestinationProbability: 0.9158488948170731 condition: > trueDestination: B9 -> B10 falseDestination: B9 -> B29 size: DWORD  <||@
  Comment 159 block B10 null  <||@
  Comment 159 76 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 159 78 rdi|DWORD = LEA address: [r9|DWORD + 2] size: DWORD  <||@
  Comment 163 80 CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B17 size: DWORD  <||@
  Comment 172 block B17 null  <||@
  Comment 172 126 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 172 128 CMPBRANCH (x: rax|DWORD, y: rbx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B17 -> B18 falseDestination: B17 -> B28 size: DWORD  <||@
  Comment 180 block B18 null  <||@
  Comment 180 130 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 180 132 rax|DWORD = SHL x: rcx|DWORD y: 5 size: DWORD  <||@
  Comment 185 134 rax|DWORD = SUB (x: rax|DWORD, ~y: rcx|DWORD) size: DWORD  <||@
  Comment 187 136 r10|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 193 138 rax|DWORD = ADD (x: rax|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 196 140 r10|DWORD = LEA address: [r9|DWORD + 3] size: DWORD  <||@
  Comment 200 142 CMP (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 203 144 r9|DWORD = CMOVE (falseValue: r8|DWORD, ~trueValue: r10|DWORD) condition: >  <||@
  Comment 210 146 JUMP ~outgoingValues: [] destination: B18 -> B19  <||@
  Comment 215 block B20 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 215 152 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 224 154 r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 231 156 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 234 158 rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 240 160 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 243 162 rdi|DWORD = INC value: rdi|DWORD size: DWORD  <||@
  Comment 245 164 rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 248 166 JUMP ~outgoingValues: [] destination: B20 -> B19  <||@
  Comment 248 block B19 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 248 148 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 248 150 CMPBRANCH (x: r9|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B19 -> B20 falseDestination: B19 -> B21 size: DWORD  <||@
  Comment 253 block B21 null  <||@
  Comment 253 168 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 253 170 stack:28|DWORD = MOVE input: r8|DWORD moveKind: DWORD  <||@
  Comment 258 172 r10|DWORD = LEA address: [r8|DWORD - 8] size: DWORD  <||@
  Comment 262 174 JUMP ~outgoingValues: [] destination: B21 -> B22  <||@
  Comment 267 block B23 loop 1 depth 1 header:243|LoopBegin  <||@
  Comment 267 180 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 288 182 r9|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 294 184 rcx|DWORD = INC value: rdi|DWORD size: DWORD  <||@
  Comment 298 186 rcx|DWORD = MOVZXB input: [r11|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 304 188 rbx|DWORD = LEA address: [rdi|DWORD + 2] size: DWORD  <||@
  Comment 307 190 rbx|DWORD = MOVZXB input: [r11|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 313 192 rdx|DWORD = LEA address: [rdi|DWORD + 3] size: DWORD  <||@
  Comment 316 194 rdx|DWORD = MOVZXB input: [r11|QWORD[.] + rdx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 322 196 rsi|DWORD = LEA address: [rdi|DWORD + 4] size: DWORD  <||@
  Comment 325 198 rsi|DWORD = MOVZXB input: [r11|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 331 200 rbp|DWORD = LEA address: [rdi|DWORD + 5] size: DWORD  <||@
  Comment 334 202 rbp|DWORD = MOVZXB input: [r11|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD  <||@
  Comment 340 204 r13|DWORD = LEA address: [rdi|DWORD + 6] size: DWORD  <||@
  Comment 344 206 r13|DWORD = MOVZXB input: [r11|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD  <||@
  Comment 350 208 r14|DWORD = LEA address: [rdi|DWORD + 7] size: DWORD  <||@
  Comment 354 210 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 361 212 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 364 214 r8|DWORD = ADD (x: r8|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 367 216 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 373 218 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 376 220 rax|DWORD = ADD (x: rax|DWORD, y: rcx|DWORD) size: DWORD  <||@
  Comment 378 222 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 385 224 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 388 226 r8|DWORD = ADD (x: r8|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 391 228 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 397 230 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 400 232 rax|DWORD = ADD (x: rax|DWORD, y: rdx|DWORD) size: DWORD  <||@
  Comment 402 234 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 409 236 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 412 238 r8|DWORD = ADD (x: r8|DWORD, y: rsi|DWORD) size: DWORD  <||@
  Comment 415 240 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 421 242 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 424 244 rax|DWORD = ADD (x: rax|DWORD, y: rbp|DWORD) size: DWORD  <||@
  Comment 426 246 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 433 248 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 436 250 r8|DWORD = ADD (x: r8|DWORD, y: r13|DWORD) size: DWORD  <||@
  Comment 439 252 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 445 254 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 448 256 r8|DWORD = MOVZXB input: [r11|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD  <||@
  Comment 454 258 rax|DWORD = ADD (x: rax|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 457 260 r8|DWORD = LEA address: [rdi|DWORD + 8] size: DWORD  <||@
  Comment 461 262 rdi|DWORD = MOVE input: r8|DWORD moveKind: DWORD  <||@
  Comment 464 264 JUMP ~outgoingValues: [] destination: B23 -> B22  <||@
  Comment 464 block B22 loop 1 depth 1 header:243|LoopBegin  <||@
  Comment 464 176 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 464 178 CMPBRANCH (x: r10|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.26493459207822856 condition: > trueDestination: B22 -> B23 falseDestination: B22 -> B24 size: DWORD  <||@
  Comment 473 block B24 null  <||@
  Comment 473 266 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 473 268 r8|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 478 270 JUMP ~outgoingValues: [] destination: B24 -> B25  <||@
  Comment 485 block B26 loop 2 depth 1 header:266|LoopBegin  <||@
  Comment 485 276 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 512 278 r10|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 519 280 r10|DWORD = SUB (x: r10|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 522 282 rax|DWORD = MOVZXB input: [r11|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 528 284 r10|DWORD = ADD (x: r10|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 531 286 rdi|DWORD = INC value: rdi|DWORD size: DWORD  <||@
  Comment 533 288 rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 536 290 JUMP ~outgoingValues: [] destination: B26 -> B25  <||@
  Comment 536 block B25 loop 2 depth 1 header:266|LoopBegin  <||@
  Comment 536 272 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 536 274 CMPBRANCH (x: r8|DWORD, y: rdi|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B25 -> B26 falseDestination: B25 -> B32 size: DWORD  <||@
  Comment 541 block B32 null  <||@
  Comment 541 324 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 541 326 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07  <||@
  Comment 550 POLL_RETURN_FAR  <||@
  Comment 564 block B11 null  <||@
  Comment 564 82 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 564 84 rdx|QWORD = MOVSXD value: rdi|DWORD size: QWORD  <||@
  Comment 567 86 rsi|DWORD = SUB (x: r8|DWORD, ~y: rdi|DWORD) size: DWORD  <||@
  Comment 572 88 rsi|QWORD = MOVSXD value: rsi|DWORD size: QWORD  <||@
  Comment 575 90 rdx|QWORD = ADD (x: rdx|QWORD, y: rsi|QWORD) size: QWORD  <||@
  Comment 578 92 rdx|QWORD = DEC value: rdx|QWORD size: QWORD  <||@
  Comment 581 94 rsi|QWORD = MOVE input: rax|DWORD moveKind: DWORD  <||@
  Comment 583 96 CMPBRANCH (x: rsi|QWORD, y: rdx|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B11 -> B12 falseDestination: B11 -> B15 size: QWORD  <||@
  Comment 592 block B12 null  <||@
  Comment 592 98 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 592 100 CMPBRANCH (x: rax|DWORD, y: rdi|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B12 -> B17 falseDestination: B12 -> B14 size: DWORD  <||@
  Comment 605 block B1 null  <||@
  Comment 605 18 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 605 20 rax|QWORD = MOVE input: Object[null]  <||@
  Comment 612 22 JUMP ~outgoingValues: [] destination: B1 -> B3  <||@
  Comment 617 block B29 null  <||@
  Comment 617 304 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 617 306 rax|DWORD = MOVE input: rcx|DWORD moveKind: DWORD  <||@
  Comment 619 308 JUMP ~outgoingValues: [] destination: B29 -> B32  <||@
  Comment 621 block B31 null  <||@
  Comment 621 318 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 621 320 rax|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 624 322 JUMP ~outgoingValues: [] destination: B31 -> B32  <||@
  Comment 626 block B15 null  <||@
  Comment 626 114 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 626 116 rbx|QWORD = MOVE input: long[664|0x298]  <||@
  Comment 633 118 rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5]  <||@
  Comment 638 120 JUMP ~outgoingValues: [] destination: B15 -> B34  <||@
  Comment 638 block B34 null  <||@
  Comment 638 336 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 638 338 MOV (x: [r15|QWORD + 1156], y: rcx|DWORD) size: DWORD  <||@
  Comment 645 340 MOV (x: [r15|QWORD + 1168], y: rbx|QWORD) size: QWORD  <||@
  Comment 652 342 DEOPT info [bci:8]  <||@
  Comment 652 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 657 [r11:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8, duringCall: false, rethrow: false]
              |0          |1             |2  |3  |4         |5        
     locals:  |r10|DWORD  |r11|QWORD[.]  |-  |-  |r8|DWORD  |r9|DWORD   <||@
  Comment 665 block B33 null  <||@
  Comment 665 328 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 665 330 rbx|QWORD = MOVE input: long[20|0x14]  <||@
  Comment 672 332 rcx|DWORD = MOVE input: int[-32828|0xffffffffffff7fc4]  <||@
  Comment 677 334 JUMP ~outgoingValues: [] destination: B33 -> B34  <||@
  Comment 679 block B14 null  <||@
  Comment 679 106 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 679 108 rbx|QWORD = MOVE input: long[664|0x298]  <||@
  Comment 686 110 rcx|DWORD = MOVE input: int[-40475|0xffffffffffff61e5]  <||@
  Comment 691 112 JUMP ~outgoingValues: [] destination: B14 -> B34  <||@
  Comment 693 block B30 null  <||@
  Comment 693 310 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 693 312 rbx|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 700 314 rcx|DWORD = MOVE input: int[-34843|0xffffffffffff77e5]  <||@
  Comment 705 316 JUMP ~outgoingValues: [] destination: B30 -> B34  <||@
  Comment 707 block B28 null  <||@
  Comment 707 296 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 707 298 rbx|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 714 300 rcx|DWORD = MOVE input: int[-37915|0xffffffffffff6be5]  <||@
  Comment 719 302 JUMP ~outgoingValues: [] destination: B28 -> B34  <||@
  Comment 726 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f8ae4233598, value=140234155311648]:0x7f8acf034220}  <||@
  Comment 751 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f8ae42335a0, value=140234155446272]:0x7f8acf055000}  <||@
  Comment 779 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 784 [r11:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8, duringCall: false, rethrow: false]
              |0          |1             |2  |3  |4         |5        
     locals:  |r10|DWORD  |r11|QWORD[.]  |-  |-  |r8|DWORD  |r9|DWORD   <||@
  Comment 792 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f8acf0b4500:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 792 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 800 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f8ae42335b8, value=140234155441952]:0x7f8acf053f20}  <||@
  Comment 800 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
