begin_compilation
  name " HotSpotCompilation-75[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  method "HotSpotCompilation-75[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  date 1740398974949
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: v37 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: v37  <|@  <|@
f <@~|@floating>@ <|@
tid i1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i51 i43 i44 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 i41 v34 j82 v60 i168 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i4 <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i6 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 2]
stamp: i32
=== Inputs ===
x: i3 
y: i4 
=== Succesors ===
=== Usages ===
v101 i166 v34 i90 i281 v141 v165 v279 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i4  <|@  <|@
f <@~|@floating>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i6 
=== Succesors ===
=== Usages ===
v37 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i3 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v37 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: PROFILED designatedSuccessorProbability: 0.9215470110468648
stamp: void
=== Inputs ===
condition: v34 
=== Succesors ===
trueSuccessor: v36 
falseSuccessor: v35 
=== Usages ===
=== Predecessor ===
v0 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v34 #trueSuccessor: v36 #falseSuccessor: v35  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v36 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i340 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i340  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# byte[]
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v363 v362 v352 v353 v354 v355 v356 v357 v358 v359 v360 v361 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: iload_2
code: ResolvedJavaMethodBytecode<ArraysSupport.signedHashCode(int, byte[], int, int)>
localsSize: 6
locksSize: 0
sourceFile: ArraysSupport.java
sourceLine: 215
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i1 a2 i3 i4 
=== Succesors ===
=== Usages ===
v314 i340 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i1 a2 i3 i4  <|@  <|@
f <@~|@floating>@ <|@
tid v352 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i340 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i340 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-14091|0xffffffffffffc8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v352 
lastLocationAccess: - 
=== Succesors ===
next: v330 
=== Usages ===
v60 v98 j89 
=== Predecessor ===
v36 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v352 lastLocationAccess: - #next: v330  <|@  <|@
f <@~|@floating>@ <|@
tid i26 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i27 i41 i123 i146 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i41 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i3 
y: i26 
=== Succesors ===
=== Usages ===
i53 i90 j92 v98 v101 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i26  <|@  <|@
f <@~|@floating>@ <|@
tid v101 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i6 
=== Succesors ===
=== Usages ===
v330 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i41 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v330 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v101 
=== Succesors ===
trueSuccessor: v329 
falseSuccessor: v326 
=== Usages ===
=== Predecessor ===
i340 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v101 #trueSuccessor: v329 #falseSuccessor: v326  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v329 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v338 
=== Usages ===
=== Predecessor ===
v330 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v338  <|@  <|@
f <@~|@floating>@ <|@
tid j92 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i41 
=== Succesors ===
=== Usages ===
j306 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i41  <|@  <|@
f <@~|@floating>@ <|@
tid i90 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i41 
=== Succesors ===
=== Usages ===
j93 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i6 y: i41  <|@  <|@
f <@~|@floating>@ <|@
tid j93 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i90 
=== Succesors ===
=== Usages ===
j306 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i90  <|@  <|@
f <@~|@floating>@ <|@
tid j306 <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967296 - 4294967294]
=== Inputs ===
x: j92 
y: j93 
=== Succesors ===
=== Usages ===
j307 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j92 y: j93  <|@  <|@
f <@~|@floating>@ <|@
tid j94 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -1
stableDimension: 0
stamp: i64 [-1]
stampKind: i64
value: long[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
j307 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j307 <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967297 - 4294967293]
=== Inputs ===
x: j306 
y: j94 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j306 y: j94  <|@  <|@
f <@~|@floating>@ <|@
tid j89 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [0 - 2147483647] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i340 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i340  <|@  <|@
f <@~|@floating>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j307 
y: j89 
=== Succesors ===
=== Usages ===
v338 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: j307 y: j89  <|@  <|@
f <@~|@floating>@ <|@
tid j317 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 24
stableDimension: 0
stamp: i64 [24]
stampKind: i64
value: long[24|0x18]
=== Inputs ===
=== Succesors ===
=== Usages ===
j313 j313 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i316 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -18715
stableDimension: 0
stamp: i32 [-18715]
stampKind: i32
value: int[-18715|0xffffffffffffb6e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i312 i312 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v338 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v97 
=== Succesors ===
trueSuccessor: v337 
falseSuccessor: v334 
=== Usages ===
=== Predecessor ===
v329 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v97 #trueSuccessor: v337 #falseSuccessor: v334  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v337 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v336 
=== Usages ===
=== Predecessor ===
v338 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v336  <|@  <|@
f <@~|@floating>@ <|@
tid v98 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i340 
=== Succesors ===
=== Usages ===
v336 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i41 y: i340  <|@  <|@
f <@*|@fixed>@ <|@
tid v336 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v98 
=== Succesors ===
trueSuccessor: v327 
falseSuccessor: v335 
=== Usages ===
=== Predecessor ===
v337 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v98 #trueSuccessor: v327 #falseSuccessor: v335  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v327 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v325 
=== Usages ===
=== Predecessor ===
v336 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v325  <|@  <|@
f <@*|@fixed>@ <|@
tid v325 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v323 
=== Predecessor ===
v327 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v335 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v339 
=== Usages ===
=== Predecessor ===
v336 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v339  <|@  <|@
f <@*|@fixed>@ <|@
tid v339 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v308 
=== Predecessor ===
v335 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v334 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v315 
=== Usages ===
=== Predecessor ===
v338 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v315  <|@  <|@
f <@*|@fixed>@ <|@
tid v315 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v308 
=== Predecessor ===
v334 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v326 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v324 
=== Usages ===
=== Predecessor ===
v330 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v324  <|@  <|@
f <@*|@fixed>@ <|@
tid v324 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v323 
=== Predecessor ===
v326 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v323 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v324 v325 
=== Succesors ===
next: v115 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v324 v325 #next: v115  <|@  <|@
f <@~|@floating>@ <|@
tid v60 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i340 
=== Succesors ===
=== Usages ===
v115 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i3 y: i340  <|@  <|@
f <@*|@fixed>@ <|@
tid v115 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v60 
=== Succesors ===
trueSuccessor: v112 
falseSuccessor: v114 
=== Usages ===
=== Predecessor ===
v323 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v60 #trueSuccessor: v112 #falseSuccessor: v114  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v112 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i341 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i341  <|@  <|@
f <@~|@floating>@ <|@
tid j82 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i3 
=== Succesors ===
=== Usages ===
v353 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i3  <|@  <|@
f <@~|@floating>@ <|@
tid v353 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j82 
=== Succesors ===
=== Usages ===
i341 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j82  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i341 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v353 
lastLocationAccess: - 
=== Succesors ===
next: v8 
=== Usages ===
i83 
=== Predecessor ===
v112 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v353 lastLocationAccess: - #next: v8  <|@  <|@
f <@~|@floating>@ <|@
tid i30 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i31 i43 i125 i148 i177 i201 i211 i232 i242 i252 i261 i272 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i43 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i1 
y: i30 
=== Succesors ===
=== Usages ===
i44 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i1 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i44 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i43 
y: i1 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i43 y: i1  <|@  <|@
f <@~|@floating>@ <|@
tid i83 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i341 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i341  <|@  <|@
f <@~|@floating>@ <|@
tid i40 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i44 
y: i83 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i44 y: i83  <|@  <|@
f <@~|@floating>@ <|@
tid i167 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i168 i192 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i168 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i3 
y: i167 
=== Succesors ===
=== Usages ===
v165 i166 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i167  <|@  <|@
f <@~|@floating>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i168 
y: i6 
=== Succesors ===
=== Usages ===
i166 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i168 y: i6  <|@  <|@
f <@~|@floating>@ <|@
tid i166 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v165 
trueValue: i168 
falseValue: i6 
=== Succesors ===
=== Usages ===
v13 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v165 trueValue: i168 falseValue: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
i341 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i53 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i41 i27 
=== Succesors ===
=== Usages ===
i27 v13 j84 i128 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i41 i27  <|@  <|@
f <@~|@floating>@ <|@
tid i52 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i40 i25 
=== Succesors ===
=== Usages ===
i31 i127 i32 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i40 i25  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 11.74648695153426
loopType: PRE_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 2
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: v19 
=== Usages ===
i53 i52 v15 v28 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: v19  <|@  <|@
f <@~|@floating>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i53 
y: i166 
=== Succesors ===
=== Usages ===
v19 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i53 y: i166  <|@  <|@
f <@*|@fixed>@ <|@
tid v19 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v13 
=== Succesors ===
trueSuccessor: v18 
falseSuccessor: v15 
=== Usages ===
=== Predecessor ===
v9 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v13 #trueSuccessor: v18 #falseSuccessor: v15  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v18 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i342 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i342  <|@  <|@
f <@~|@floating>@ <|@
tid j84 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i53 
=== Succesors ===
=== Usages ===
v354 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i53  <|@  <|@
f <@~|@floating>@ <|@
tid v354 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j84 
=== Succesors ===
=== Usages ===
i342 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j84  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i342 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v354 
lastLocationAccess: - 
=== Succesors ===
next: v28 
=== Usages ===
i85 
=== Predecessor ===
v18 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v354 lastLocationAccess: - #next: v28  <|@  <|@
f <@~|@floating>@ <|@
tid i31 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i52 
y: i30 
=== Succesors ===
=== Usages ===
i32 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i52 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i32 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i31 
y: i52 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i31 y: i52  <|@  <|@
f <@~|@floating>@ <|@
tid i85 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i342 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i342  <|@  <|@
f <@~|@floating>@ <|@
tid i25 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i32 
y: i85 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i32 y: i85  <|@  <|@
f <@~|@floating>@ <|@
tid i27 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i53 
y: i26 
=== Succesors ===
=== Usages ===
i53 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i53 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v28 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i342 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v15 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v136 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v136  <|@  <|@
f <@~|@floating>@ <|@
tid i278 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483640
stableDimension: 0
stamp: i32 [-2147483640]
stampKind: i32
value: int[-2147483640|0xffffffff80000008]
=== Inputs ===
=== Succesors ===
=== Usages ===
v279 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v279 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i6 
y: i278 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i6 y: i278  <|@  <|@
f <@~|@floating>@ <|@
tid i186 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483648
stableDimension: 0
stamp: i32 [-2147483648]
stampKind: i32
value: int[-2147483648|0xffffffff80000000]
=== Inputs ===
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i280 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -8
stableDimension: 0
stamp: i32 [-8]
stampKind: i32
value: int[-8|0xfffffffffffffff8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i281 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i281 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i280 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i6 y: i280  <|@  <|@
f <@~|@floating>@ <|@
tid i191 <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v279 
trueValue: i186 
falseValue: i281 
=== Succesors ===
=== Usages ===
v118 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v279 trueValue: i186 falseValue: i281  <|@  <|@
f <@*|@fixed>@ <|@
tid v136 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v117 
=== Predecessor ===
v15 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i127 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i52 i260 
=== Succesors ===
=== Usages ===
i125 i126 i150 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i52 i260  <|@  <|@
f <@~|@floating>@ <|@
tid i128 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i53 i277 
=== Succesors ===
=== Usages ===
v118 i123 j132 i151 i192 i222 i223 i272 i274 i276 i277 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i53 i277  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v117 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 11.74648695153426
loopType: MAIN_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 8
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v136 
=== Succesors ===
next: v121 
=== Usages ===
v119 v124 i127 i128 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v136 #next: v121  <|@  <|@
f <@~|@floating>@ <|@
tid v118 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i128 
y: i191 
=== Succesors ===
=== Usages ===
v121 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i128 y: i191  <|@  <|@
f <@*|@fixed>@ <|@
tid v121 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.31894531249999947
stamp: void
=== Inputs ===
condition: v118 
=== Succesors ===
trueSuccessor: v120 
falseSuccessor: v119 
=== Usages ===
=== Predecessor ===
v117 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v118 #trueSuccessor: v120 #falseSuccessor: v119  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v120 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i343 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i343  <|@  <|@
f <@~|@floating>@ <|@
tid j132 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i128 
=== Succesors ===
=== Usages ===
v355 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i128  <|@  <|@
f <@~|@floating>@ <|@
tid v355 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j132 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j132  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i343 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v355 
lastLocationAccess: - 
=== Succesors ===
next: i344 
=== Usages ===
i133 
=== Predecessor ===
v120 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v355 lastLocationAccess: - #next: i344  <|@  <|@
f <@~|@floating>@ <|@
tid i123 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i26 
=== Succesors ===
=== Usages ===
j182 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i26  <|@  <|@
f <@~|@floating>@ <|@
tid j182 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i123 
=== Succesors ===
=== Usages ===
v357 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i123  <|@  <|@
f <@~|@floating>@ <|@
tid v357 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j182 
=== Succesors ===
=== Usages ===
i344 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j182  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i344 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v357 
lastLocationAccess: - 
=== Succesors ===
next: i345 
=== Usages ===
i183 
=== Predecessor ===
i343 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v357 lastLocationAccess: - #next: i345  <|@  <|@
f <@~|@floating>@ <|@
tid i192 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i167 
=== Succesors ===
=== Usages ===
j206 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i167  <|@  <|@
f <@~|@floating>@ <|@
tid j206 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i192 
=== Succesors ===
=== Usages ===
v358 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i192  <|@  <|@
f <@~|@floating>@ <|@
tid v358 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j206 
=== Succesors ===
=== Usages ===
i345 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j206  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i345 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v358 
lastLocationAccess: - 
=== Succesors ===
next: i346 
=== Usages ===
i207 
=== Predecessor ===
i344 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v358 lastLocationAccess: - #next: i346  <|@  <|@
f <@~|@floating>@ <|@
tid i221 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 3
stableDimension: 0
stamp: i32 [3]
stampKind: i32
value: int[3|0x3]
=== Inputs ===
=== Succesors ===
=== Usages ===
i222 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i222 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i221 
=== Succesors ===
=== Usages ===
j216 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i221  <|@  <|@
f <@~|@floating>@ <|@
tid j216 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i222 
=== Succesors ===
=== Usages ===
v359 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i222  <|@  <|@
f <@~|@floating>@ <|@
tid v359 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j216 
=== Succesors ===
=== Usages ===
i346 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j216  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i346 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v359 
lastLocationAccess: - 
=== Succesors ===
next: i347 
=== Usages ===
i217 
=== Predecessor ===
i345 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v359 lastLocationAccess: - #next: i347  <|@  <|@
f <@~|@floating>@ <|@
tid i220 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 4
stableDimension: 0
stamp: i32 [4]
stampKind: i32
value: int[4|0x4]
=== Inputs ===
=== Succesors ===
=== Usages ===
i223 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i223 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i220 
=== Succesors ===
=== Usages ===
j237 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i220  <|@  <|@
f <@~|@floating>@ <|@
tid j237 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i223 
=== Succesors ===
=== Usages ===
v360 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i223  <|@  <|@
f <@~|@floating>@ <|@
tid v360 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j237 
=== Succesors ===
=== Usages ===
i347 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j237  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i347 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v360 
lastLocationAccess: - 
=== Succesors ===
next: i348 
=== Usages ===
i238 
=== Predecessor ===
i346 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v360 lastLocationAccess: - #next: i348  <|@  <|@
f <@~|@floating>@ <|@
tid i272 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i30 
=== Succesors ===
=== Usages ===
j247 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid j247 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i272 
=== Succesors ===
=== Usages ===
v361 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i272  <|@  <|@
f <@~|@floating>@ <|@
tid v361 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j247 
=== Succesors ===
=== Usages ===
i348 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j247  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i348 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v361 
lastLocationAccess: - 
=== Succesors ===
next: i349 
=== Usages ===
i248 
=== Predecessor ===
i347 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v361 lastLocationAccess: - #next: i349  <|@  <|@
f <@~|@floating>@ <|@
tid i273 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 6
stableDimension: 0
stamp: i32 [6]
stampKind: i32
value: int[6|0x6]
=== Inputs ===
=== Succesors ===
=== Usages ===
i274 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i274 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i273 
=== Succesors ===
=== Usages ===
j257 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i273  <|@  <|@
f <@~|@floating>@ <|@
tid j257 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i274 
=== Succesors ===
=== Usages ===
v362 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i274  <|@  <|@
f <@~|@floating>@ <|@
tid v362 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j257 
=== Succesors ===
=== Usages ===
i349 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j257  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i349 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v362 
lastLocationAccess: - 
=== Succesors ===
next: i350 
=== Usages ===
i258 
=== Predecessor ===
i348 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v362 lastLocationAccess: - #next: i350  <|@  <|@
f <@~|@floating>@ <|@
tid i275 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i276 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i276 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i275 
=== Succesors ===
=== Usages ===
j266 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i275  <|@  <|@
f <@~|@floating>@ <|@
tid j266 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i276 
=== Succesors ===
=== Usages ===
v363 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i276  <|@  <|@
f <@~|@floating>@ <|@
tid v363 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j266 
=== Succesors ===
=== Usages ===
i350 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j266  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i350 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v363 
lastLocationAccess: - 
=== Succesors ===
next: v124 
=== Usages ===
i267 
=== Predecessor ===
i349 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v363 lastLocationAccess: - #next: v124  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i127 
y: i30 
=== Succesors ===
=== Usages ===
i126 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i127 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i126 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i125 
y: i127 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i125 y: i127  <|@  <|@
f <@~|@floating>@ <|@
tid i133 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i343 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i343  <|@  <|@
f <@~|@floating>@ <|@
tid i122 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i126 
y: i133 
=== Succesors ===
=== Usages ===
i178 i177 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i126 y: i133  <|@  <|@
f <@~|@floating>@ <|@
tid i177 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i122 
y: i30 
=== Succesors ===
=== Usages ===
i178 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i122 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i177 
y: i122 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i177 y: i122  <|@  <|@
f <@~|@floating>@ <|@
tid i183 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i344 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i344  <|@  <|@
f <@~|@floating>@ <|@
tid i174 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i178 
y: i183 
=== Succesors ===
=== Usages ===
i202 i201 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i178 y: i183  <|@  <|@
f <@~|@floating>@ <|@
tid i201 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i174 
y: i30 
=== Succesors ===
=== Usages ===
i202 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i174 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i202 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i201 
y: i174 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i201 y: i174  <|@  <|@
f <@~|@floating>@ <|@
tid i207 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i345 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i345  <|@  <|@
f <@~|@floating>@ <|@
tid i198 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i202 
y: i207 
=== Succesors ===
=== Usages ===
i211 i212 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i202 y: i207  <|@  <|@
f <@~|@floating>@ <|@
tid i211 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i198 
y: i30 
=== Succesors ===
=== Usages ===
i212 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i198 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i212 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i211 
y: i198 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i211 y: i198  <|@  <|@
f <@~|@floating>@ <|@
tid i217 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i346 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i346  <|@  <|@
f <@~|@floating>@ <|@
tid i210 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i212 
y: i217 
=== Succesors ===
=== Usages ===
i233 i232 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i212 y: i217  <|@  <|@
f <@~|@floating>@ <|@
tid i232 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i210 
y: i30 
=== Succesors ===
=== Usages ===
i233 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i210 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i233 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i232 
y: i210 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i232 y: i210  <|@  <|@
f <@~|@floating>@ <|@
tid i238 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i347 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i347  <|@  <|@
f <@~|@floating>@ <|@
tid i229 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i233 
y: i238 
=== Succesors ===
=== Usages ===
i242 i243 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i233 y: i238  <|@  <|@
f <@~|@floating>@ <|@
tid i242 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i229 
y: i30 
=== Succesors ===
=== Usages ===
i243 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i229 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i243 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i242 
y: i229 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i242 y: i229  <|@  <|@
f <@~|@floating>@ <|@
tid i248 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i348 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i348  <|@  <|@
f <@~|@floating>@ <|@
tid i241 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i243 
y: i248 
=== Succesors ===
=== Usages ===
i252 i253 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i243 y: i248  <|@  <|@
f <@~|@floating>@ <|@
tid i252 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i241 
y: i30 
=== Succesors ===
=== Usages ===
i253 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i241 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i253 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i252 
y: i241 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i252 y: i241  <|@  <|@
f <@~|@floating>@ <|@
tid i258 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i349 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i349  <|@  <|@
f <@~|@floating>@ <|@
tid i251 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i253 
y: i258 
=== Succesors ===
=== Usages ===
i261 i262 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i258  <|@  <|@
f <@~|@floating>@ <|@
tid i261 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i251 
y: i30 
=== Succesors ===
=== Usages ===
i262 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i251 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i262 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i261 
y: i251 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i261 y: i251  <|@  <|@
f <@~|@floating>@ <|@
tid i267 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i350 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i350  <|@  <|@
f <@~|@floating>@ <|@
tid i260 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i262 
y: i267 
=== Succesors ===
=== Usages ===
i127 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i262 y: i267  <|@  <|@
f <@~|@floating>@ <|@
tid i271 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 8
stableDimension: 0
stamp: i32 [8]
stampKind: i32
value: int[8|0x8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i277 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i277 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i271 
=== Succesors ===
=== Usages ===
i128 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i271  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v117 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i350 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v117  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v119 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v117 
=== Succesors ===
next: v159 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v117 #next: v159  <|@  <|@
f <@*|@fixed>@ <|@
tid v159 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v140 
=== Predecessor ===
v119 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i150 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i127 i145 
=== Succesors ===
=== Usages ===
i148 i149 i51 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i127 i145  <|@  <|@
f <@~|@floating>@ <|@
tid i151 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i128 i146 
=== Succesors ===
=== Usages ===
v141 i146 j155 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i128 i146  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v140 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 11.74648695153426
loopType: POST_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v159 
=== Succesors ===
next: v144 
=== Usages ===
v142 v147 i150 i151 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v159 #next: v144  <|@  <|@
f <@~|@floating>@ <|@
tid v141 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i151 
y: i6 
=== Succesors ===
=== Usages ===
v144 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i151 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v144 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v141 
=== Succesors ===
trueSuccessor: v143 
falseSuccessor: v142 
=== Usages ===
=== Predecessor ===
v140 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v141 #trueSuccessor: v143 #falseSuccessor: v142  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v143 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i351 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i351  <|@  <|@
f <@~|@floating>@ <|@
tid j155 <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i151 
=== Succesors ===
=== Usages ===
v356 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i151  <|@  <|@
f <@~|@floating>@ <|@
tid v356 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j155 
=== Succesors ===
=== Usages ===
i351 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j155  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i351 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v356 
lastLocationAccess: - 
=== Succesors ===
next: v147 
=== Usages ===
i156 
=== Predecessor ===
v143 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v356 lastLocationAccess: - #next: v147  <|@  <|@
f <@~|@floating>@ <|@
tid i148 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i150 
y: i30 
=== Succesors ===
=== Usages ===
i149 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i150 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i149 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i148 
y: i150 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i148 y: i150  <|@  <|@
f <@~|@floating>@ <|@
tid i156 <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i351 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i351  <|@  <|@
f <@~|@floating>@ <|@
tid i145 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i149 
y: i156 
=== Succesors ===
=== Usages ===
i150 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i149 y: i156  <|@  <|@
f <@~|@floating>@ <|@
tid i146 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i151 
y: i26 
=== Succesors ===
=== Usages ===
i151 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i151 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v147 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v140 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i351 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v140  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v140 
=== Succesors ===
next: v47 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v140 #next: v47  <|@  <|@
f <@*|@fixed>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v142 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v114 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v318 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v318  <|@  <|@
f <@~|@floating>@ <|@
tid j311 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j313 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i319 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -15643
stableDimension: 0
stamp: i32 [-15643]
stampKind: i32
value: int[-15643|0xffffffffffffc2e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i312 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v318 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v308 
=== Predecessor ===
v114 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i312 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [-18715 - -15643] bits:1...1xxx0x1011100101
valueDescription: i32
=== Inputs ===
merge: v308 
values: i316 i319 i316 
=== Succesors ===
=== Usages ===
v314 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v308 values: i316 i319 i316  <|@  <|@
f <@~|@floating>@ <|@
tid j313 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i64 [0 - 24] bits:0...0xx000
valueDescription: i64
=== Inputs ===
merge: v308 
values: j317 j311 j317 
=== Succesors ===
=== Usages ===
v314 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v308 values: j317 j311 j317  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v308 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v315 v318 v339 
=== Succesors ===
next: v314 
=== Usages ===
i312 j313 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v315 v318 v339 #next: v314  <|@  <|@
f <@*|@fixed>@ <|@
tid v314 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i312 
speculation: j313 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v308 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i312 speculation: j313  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v35 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v48 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v48  <|@  <|@
f <@*|@fixed>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v35 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i51 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v46 
values: i150 i1 
=== Succesors ===
=== Usages ===
v29 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v46 values: i150 i1  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v47 v48 
=== Succesors ===
next: v29 
=== Usages ===
i51 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v47 v48 #next: v29  <|@  <|@
f <@*|@fixed>@ <|@
tid v29 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 36]
stamp: void
=== Inputs ===
memoryMap: - 
result: i51 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v46 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i51  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v70|DWORD, v71|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr   -1  <|@ instruction [v72|DWORD, v73|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v77|DWORD, v78|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v72|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr   -1  <|@ instruction [v81|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: v37 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: v37  <|@  <|@
f <@~|@floating>@ <|@
tid i1 <|@
result v0|DWORD <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i51 i43 i44 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i3 <|@
result v2|DWORD <|@
d <@d|@=== Debug Properties ===
index: 2
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 i41 v34 j82 v60 i168 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i4 <|@
result v3|DWORD <|@
d <@d|@=== Debug Properties ===
index: 3
stamp: i32
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 i6 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i6 <|@
result v4|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 2]
stamp: i32
=== Inputs ===
x: i3 
y: i4 
=== Succesors ===
=== Usages ===
v101 i166 v34 i90 i281 v141 v165 v279 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i4  <|@  <|@
f <@~|@floating>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i6 
=== Succesors ===
=== Usages ===
v37 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i3 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v37 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: PROFILED designatedSuccessorProbability: 0.9215470110468648
stamp: void
=== Inputs ===
condition: v34 
=== Succesors ===
trueSuccessor: v36 
falseSuccessor: v35 
=== Usages ===
=== Predecessor ===
v0 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v34 #trueSuccessor: v36 #falseSuccessor: v35  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v36 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i340 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i340  <|@  <|@
f <@~|@floating>@ <|@
tid a2 <|@
result v1|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 1
stamp: a# byte[]
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?5 v363 v362 v352 v353 v354 v355 v356 v357 v358 v359 v360 v361 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
tid ?5 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: iload_2
code: ResolvedJavaMethodBytecode<ArraysSupport.signedHashCode(int, byte[], int, int)>
localsSize: 6
locksSize: 0
sourceFile: ArraysSupport.java
sourceLine: 215
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: i1 a2 i3 i4 
=== Succesors ===
=== Usages ===
v314 i340 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: i1 a2 i3 i4  <|@  <|@
f <@~|@floating>@ <|@
tid v352 <|@
result [v1|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: - 
=== Succesors ===
=== Usages ===
i340 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i340 <|@
result v5|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
barrierType: NONE
deoptReasonAndAction: int[-14091|0xffffffffffffc8f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: [].length:final
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [0 - 2147483647] bits:0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?5 
guard: - 
address: v352 
lastLocationAccess: - 
=== Succesors ===
next: v330 
=== Usages ===
v60 v98 j89 
=== Predecessor ===
v36 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?5 guard: - address: v352 lastLocationAccess: - #next: v330  <|@  <|@
f <@~|@floating>@ <|@
tid i26 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
i27 i41 i123 i146 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i41 <|@
result v6|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i3 
y: i26 
=== Succesors ===
=== Usages ===
i53 i90 j92 v98 v101 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i26  <|@  <|@
f <@~|@floating>@ <|@
tid v101 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i6 
=== Succesors ===
=== Usages ===
v330 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i41 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v330 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v101 
=== Succesors ===
trueSuccessor: v329 
falseSuccessor: v326 
=== Usages ===
=== Predecessor ===
i340 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v101 #trueSuccessor: v329 #falseSuccessor: v326  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v329 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v338 
=== Usages ===
=== Predecessor ===
v330 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v338  <|@  <|@
f <@~|@floating>@ <|@
tid j92 <|@
result v7|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i41 
=== Succesors ===
=== Usages ===
j306 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i41  <|@  <|@
f <@~|@floating>@ <|@
tid i90 <|@
result v8|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i41 
=== Succesors ===
=== Usages ===
j93 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i6 y: i41  <|@  <|@
f <@~|@floating>@ <|@
tid j93 <|@
result v9|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [-2147483648 - 2147483647]
=== Inputs ===
value: i90 
=== Succesors ===
=== Usages ===
j306 
=== Predecessor ===
- >@ <|@
instruction <@SignExtend|@jdk.graal.compiler.nodes.calc.SignExtendNode>@ value: i90  <|@  <|@
f <@~|@floating>@ <|@
tid j306 <|@
result v10|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967296 - 4294967294]
=== Inputs ===
x: j92 
y: j93 
=== Succesors ===
=== Usages ===
j307 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j92 y: j93  <|@  <|@
f <@~|@floating>@ <|@
tid j94 <|@
result long[-1|0xffffffffffffffff] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -1
stableDimension: 0
stamp: i64 [-1]
stampKind: i64
value: long[-1|0xffffffffffffffff]
=== Inputs ===
=== Succesors ===
=== Usages ===
j307 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j307 <|@
result v11|QWORD <|@
d <@d|@=== Debug Properties ===
stamp: i64 [-4294967297 - 4294967293]
=== Inputs ===
x: j306 
y: j94 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: j306 y: j94  <|@  <|@
f <@~|@floating>@ <|@
tid j89 <|@
result v12|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
resultBits: 64
stamp: i64 [0 - 2147483647] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i340 
=== Succesors ===
=== Usages ===
v97 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i340  <|@  <|@
f <@~|@floating>@ <|@
tid v97 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: j307 
y: j89 
=== Succesors ===
=== Usages ===
v338 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: j307 y: j89  <|@  <|@
f <@~|@floating>@ <|@
tid j317 <|@
result long[24|0x18] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 24
stableDimension: 0
stamp: i64 [24]
stampKind: i64
value: long[24|0x18]
=== Inputs ===
=== Succesors ===
=== Usages ===
j313 j313 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i316 <|@
result int[-18715|0xffffffffffffb6e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -18715
stableDimension: 0
stamp: i32 [-18715]
stampKind: i32
value: int[-18715|0xffffffffffffb6e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i312 i312 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v338 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v97 
=== Succesors ===
trueSuccessor: v337 
falseSuccessor: v334 
=== Usages ===
=== Predecessor ===
v329 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v97 #trueSuccessor: v337 #falseSuccessor: v334  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v337 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v336 
=== Usages ===
=== Predecessor ===
v338 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v336  <|@  <|@
f <@~|@floating>@ <|@
tid v98 <|@
d <@d|@=== Debug Properties ===
condition: BT
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i41 
y: i340 
=== Succesors ===
=== Usages ===
v336 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i41 y: i340  <|@  <|@
f <@*|@fixed>@ <|@
tid v336 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v98 
=== Succesors ===
trueSuccessor: v327 
falseSuccessor: v335 
=== Usages ===
=== Predecessor ===
v337 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v98 #trueSuccessor: v327 #falseSuccessor: v335  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v327 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v325 
=== Usages ===
=== Predecessor ===
v336 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v325  <|@  <|@
f <@*|@fixed>@ <|@
tid v325 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v323 
=== Predecessor ===
v327 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v335 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v339 
=== Usages ===
=== Predecessor ===
v336 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v339  <|@  <|@
f <@*|@fixed>@ <|@
tid v339 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v308 
=== Predecessor ===
v335 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v334 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v315 
=== Usages ===
=== Predecessor ===
v338 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v315  <|@  <|@
f <@*|@fixed>@ <|@
tid v315 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v308 
=== Predecessor ===
v334 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v326 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v324 
=== Usages ===
=== Predecessor ===
v330 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v324  <|@  <|@
f <@*|@fixed>@ <|@
tid v324 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v323 
=== Predecessor ===
v326 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v323 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v324 v325 
=== Succesors ===
next: v115 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v324 v325 #next: v115  <|@  <|@
f <@~|@floating>@ <|@
tid v60 <|@
d <@d|@=== Debug Properties ===
condition: BT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
op: jdk.graal.compiler.nodes.calc.IntegerBelowNode$BelowOp@3cd59ef5
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i3 
y: i340 
=== Succesors ===
=== Usages ===
v115 
=== Predecessor ===
- >@ <|@
instruction <@|<||@jdk.graal.compiler.nodes.calc.IntegerBelowNode>@ x: i3 y: i340  <|@  <|@
f <@*|@fixed>@ <|@
tid v115 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
profileData: INJECTED designatedSuccessorProbability: 1.0
stamp: void
=== Inputs ===
condition: v60 
=== Succesors ===
trueSuccessor: v112 
falseSuccessor: v114 
=== Usages ===
=== Predecessor ===
v323 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v60 #trueSuccessor: v112 #falseSuccessor: v114  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v112 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: i341 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i341  <|@  <|@
f <@~|@floating>@ <|@
tid j82 <|@
result v13|QWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i3 
=== Succesors ===
=== Usages ===
v353 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i3  <|@  <|@
f <@~|@floating>@ <|@
tid v353 <|@
result [v1|QWORD[.] + v13|QWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j82 
=== Succesors ===
=== Usages ===
i341 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j82  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i341 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v353 
lastLocationAccess: - 
=== Succesors ===
next: v8 
=== Usages ===
i83 
=== Predecessor ===
v112 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v353 lastLocationAccess: - #next: v8  <|@  <|@
f <@~|@floating>@ <|@
tid i30 <|@
result int[5|0x5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
rawvalue: 5
stableDimension: 0
stamp: i32 [5]
stampKind: i32
value: int[5|0x5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i31 i43 i125 i148 i177 i201 i211 i232 i242 i252 i261 i272 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i43 <|@
result v14|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i1 
y: i30 
=== Succesors ===
=== Usages ===
i44 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i1 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i44 <|@
result v15|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i43 
y: i1 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i43 y: i1  <|@  <|@
f <@~|@floating>@ <|@
tid i83 <|@
result v16|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i341 
=== Succesors ===
=== Usages ===
i40 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i341  <|@  <|@
f <@~|@floating>@ <|@
tid i40 <|@
result v17|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i44 
y: i83 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i44 y: i83  <|@  <|@
f <@~|@floating>@ <|@
tid i167 <|@
result int[2|0x2] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 2
stableDimension: 0
stamp: i32 [2]
stampKind: i32
value: int[2|0x2]
=== Inputs ===
=== Succesors ===
=== Usages ===
i168 i192 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i168 <|@
result v18|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i3 
y: i167 
=== Succesors ===
=== Usages ===
v165 i166 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i3 y: i167  <|@  <|@
f <@~|@floating>@ <|@
tid v165 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i168 
y: i6 
=== Succesors ===
=== Usages ===
i166 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i168 y: i6  <|@  <|@
f <@~|@floating>@ <|@
tid i166 <|@
result v19|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v165 
trueValue: i168 
falseValue: i6 
=== Succesors ===
=== Usages ===
v13 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v165 trueValue: i168 falseValue: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v8 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v9 
=== Predecessor ===
i341 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i53 <|@
result v20|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i41 i27 
=== Succesors ===
=== Usages ===
i27 v13 j84 i128 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i41 i27  <|@  <|@
f <@~|@floating>@ <|@
tid i52 <|@
result v21|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v9 
values: i40 i25 
=== Succesors ===
=== Usages ===
i31 i127 i32 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v9 values: i40 i25  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v9 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: -1
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 11.74648695153426
loopType: PRE_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 2
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v8 
=== Succesors ===
next: v19 
=== Usages ===
i53 i52 v15 v28 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v8 #next: v19  <|@  <|@
f <@~|@floating>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i53 
y: i166 
=== Succesors ===
=== Usages ===
v19 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i53 y: i166  <|@  <|@
f <@*|@fixed>@ <|@
tid v19 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v13 
=== Succesors ===
trueSuccessor: v18 
falseSuccessor: v15 
=== Usages ===
=== Predecessor ===
v9 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v13 #trueSuccessor: v18 #falseSuccessor: v15  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v18 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i342 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i342  <|@  <|@
f <@~|@floating>@ <|@
tid j84 <|@
result v20|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i53 
=== Succesors ===
=== Usages ===
v354 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i53  <|@  <|@
f <@~|@floating>@ <|@
tid v354 <|@
result [v1|QWORD[.] + v20|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j84 
=== Succesors ===
=== Usages ===
i342 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j84  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i342 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v354 
lastLocationAccess: - 
=== Succesors ===
next: v28 
=== Usages ===
i85 
=== Predecessor ===
v18 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v354 lastLocationAccess: - #next: v28  <|@  <|@
f <@~|@floating>@ <|@
tid i31 <|@
result v22|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i52 
y: i30 
=== Succesors ===
=== Usages ===
i32 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i52 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i32 <|@
result v23|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i31 
y: i52 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i31 y: i52  <|@  <|@
f <@~|@floating>@ <|@
tid i85 <|@
result v24|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i342 
=== Succesors ===
=== Usages ===
i25 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i342  <|@  <|@
f <@~|@floating>@ <|@
tid i25 <|@
result v25|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i32 
y: i85 
=== Succesors ===
=== Usages ===
i52 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i32 y: i85  <|@  <|@
f <@~|@floating>@ <|@
tid i27 <|@
result v26|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i53 
y: i26 
=== Succesors ===
=== Usages ===
i53 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i53 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v28 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v9 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i342 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v9  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v15 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v9 
=== Succesors ===
next: v136 
=== Usages ===
=== Predecessor ===
v19 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v9 #next: v136  <|@  <|@
f <@~|@floating>@ <|@
tid i278 <|@
result int[-2147483640|0xffffffff80000008] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483640
stableDimension: 0
stamp: i32 [-2147483640]
stampKind: i32
value: int[-2147483640|0xffffffff80000008]
=== Inputs ===
=== Succesors ===
=== Usages ===
v279 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v279 <|@
d <@d|@=== Debug Properties ===
condition: LT
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i6 
y: i278 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i6 y: i278  <|@  <|@
f <@~|@floating>@ <|@
tid i186 <|@
result int[-2147483648|0xffffffff80000000] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -2147483648
stableDimension: 0
stamp: i32 [-2147483648]
stampKind: i32
value: int[-2147483648|0xffffffff80000000]
=== Inputs ===
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i280 <|@
result int[-8|0xfffffffffffffff8] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: -8
stableDimension: 0
stamp: i32 [-8]
stampKind: i32
value: int[-8|0xfffffffffffffff8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i281 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i281 <|@
result v27|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
x: i6 
y: i280 
=== Succesors ===
=== Usages ===
i191 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i6 y: i280  <|@  <|@
f <@~|@floating>@ <|@
tid i191 <|@
result v28|DWORD <|@
d <@d|@=== Debug Properties ===
stamp: i32
=== Inputs ===
condition: v279 
trueValue: i186 
falseValue: i281 
=== Succesors ===
=== Usages ===
v118 
=== Predecessor ===
- >@ <|@
instruction <@Conditional|@jdk.graal.compiler.nodes.calc.ConditionalNode>@ condition: v279 trueValue: i186 falseValue: i281  <|@  <|@
f <@*|@fixed>@ <|@
tid v136 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v117 
=== Predecessor ===
v15 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i127 <|@
result v30|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i52 i260 
=== Succesors ===
=== Usages ===
i125 i126 i150 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i52 i260  <|@  <|@
f <@~|@floating>@ <|@
tid i128 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v117 
values: i53 i277 
=== Succesors ===
=== Usages ===
v118 i123 j132 i151 i192 i222 i223 i272 i274 i276 i277 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v117 values: i53 i277  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v117 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 11.74648695153426
loopType: MAIN_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 8
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v136 
=== Succesors ===
next: v121 
=== Usages ===
v119 v124 i127 i128 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v136 #next: v121  <|@  <|@
f <@~|@floating>@ <|@
tid v118 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i128 
y: i191 
=== Succesors ===
=== Usages ===
v121 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i128 y: i191  <|@  <|@
f <@*|@fixed>@ <|@
tid v121 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.31894531249999947
stamp: void
=== Inputs ===
condition: v118 
=== Succesors ===
trueSuccessor: v120 
falseSuccessor: v119 
=== Usages ===
=== Predecessor ===
v117 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v118 #trueSuccessor: v120 #falseSuccessor: v119  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v120 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i343 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i343  <|@  <|@
f <@~|@floating>@ <|@
tid j132 <|@
result v31|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i128 
=== Succesors ===
=== Usages ===
v355 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i128  <|@  <|@
f <@~|@floating>@ <|@
tid v355 <|@
result [v1|QWORD[.] + v31|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j132 
=== Succesors ===
=== Usages ===
i343 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j132  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i343 <|@
result v32|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v355 
lastLocationAccess: - 
=== Succesors ===
next: i344 
=== Usages ===
i133 
=== Predecessor ===
v120 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v355 lastLocationAccess: - #next: i344  <|@  <|@
f <@~|@floating>@ <|@
tid i123 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i26 
=== Succesors ===
=== Usages ===
j182 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i26  <|@  <|@
f <@~|@floating>@ <|@
tid j182 <|@
result v33|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i123 
=== Succesors ===
=== Usages ===
v357 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i123  <|@  <|@
f <@~|@floating>@ <|@
tid v357 <|@
result [v1|QWORD[.] + v33|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j182 
=== Succesors ===
=== Usages ===
i344 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j182  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i344 <|@
result v34|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v357 
lastLocationAccess: - 
=== Succesors ===
next: i345 
=== Usages ===
i183 
=== Predecessor ===
i343 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v357 lastLocationAccess: - #next: i345  <|@  <|@
f <@~|@floating>@ <|@
tid i192 <|@
result v35|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i167 
=== Succesors ===
=== Usages ===
j206 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i167  <|@  <|@
f <@~|@floating>@ <|@
tid j206 <|@
result v35|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i192 
=== Succesors ===
=== Usages ===
v358 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i192  <|@  <|@
f <@~|@floating>@ <|@
tid v358 <|@
result [v1|QWORD[.] + v35|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j206 
=== Succesors ===
=== Usages ===
i345 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j206  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i345 <|@
result v36|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v358 
lastLocationAccess: - 
=== Succesors ===
next: i346 
=== Usages ===
i207 
=== Predecessor ===
i344 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v358 lastLocationAccess: - #next: i346  <|@  <|@
f <@~|@floating>@ <|@
tid i221 <|@
result int[3|0x3] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 3
stableDimension: 0
stamp: i32 [3]
stampKind: i32
value: int[3|0x3]
=== Inputs ===
=== Succesors ===
=== Usages ===
i222 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i222 <|@
result v37|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i221 
=== Succesors ===
=== Usages ===
j216 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i221  <|@  <|@
f <@~|@floating>@ <|@
tid j216 <|@
result v37|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i222 
=== Succesors ===
=== Usages ===
v359 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i222  <|@  <|@
f <@~|@floating>@ <|@
tid v359 <|@
result [v1|QWORD[.] + v37|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j216 
=== Succesors ===
=== Usages ===
i346 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j216  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i346 <|@
result v38|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v359 
lastLocationAccess: - 
=== Succesors ===
next: i347 
=== Usages ===
i217 
=== Predecessor ===
i345 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v359 lastLocationAccess: - #next: i347  <|@  <|@
f <@~|@floating>@ <|@
tid i220 <|@
result int[4|0x4] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 4
stableDimension: 0
stamp: i32 [4]
stampKind: i32
value: int[4|0x4]
=== Inputs ===
=== Succesors ===
=== Usages ===
i223 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i223 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i220 
=== Succesors ===
=== Usages ===
j237 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i220  <|@  <|@
f <@~|@floating>@ <|@
tid j237 <|@
result v39|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i223 
=== Succesors ===
=== Usages ===
v360 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i223  <|@  <|@
f <@~|@floating>@ <|@
tid v360 <|@
result [v1|QWORD[.] + v39|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j237 
=== Succesors ===
=== Usages ===
i347 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j237  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i347 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v360 
lastLocationAccess: - 
=== Succesors ===
next: i348 
=== Usages ===
i238 
=== Predecessor ===
i346 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v360 lastLocationAccess: - #next: i348  <|@  <|@
f <@~|@floating>@ <|@
tid i272 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i30 
=== Succesors ===
=== Usages ===
j247 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid j247 <|@
result v41|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i272 
=== Succesors ===
=== Usages ===
v361 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i272  <|@  <|@
f <@~|@floating>@ <|@
tid v361 <|@
result [v1|QWORD[.] + v41|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j247 
=== Succesors ===
=== Usages ===
i348 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j247  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i348 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v361 
lastLocationAccess: - 
=== Succesors ===
next: i349 
=== Usages ===
i248 
=== Predecessor ===
i347 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v361 lastLocationAccess: - #next: i349  <|@  <|@
f <@~|@floating>@ <|@
tid i273 <|@
result int[6|0x6] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 6
stableDimension: 0
stamp: i32 [6]
stampKind: i32
value: int[6|0x6]
=== Inputs ===
=== Succesors ===
=== Usages ===
i274 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i274 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i273 
=== Succesors ===
=== Usages ===
j257 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i273  <|@  <|@
f <@~|@floating>@ <|@
tid j257 <|@
result v43|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i274 
=== Succesors ===
=== Usages ===
v362 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i274  <|@  <|@
f <@~|@floating>@ <|@
tid v362 <|@
result [v1|QWORD[.] + v43|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j257 
=== Succesors ===
=== Usages ===
i349 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j257  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i349 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v362 
lastLocationAccess: - 
=== Succesors ===
next: i350 
=== Usages ===
i258 
=== Predecessor ===
i348 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v362 lastLocationAccess: - #next: i350  <|@  <|@
f <@~|@floating>@ <|@
tid i275 <|@
result int[7|0x7] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
rawvalue: 7
stableDimension: 0
stamp: i32 [7]
stampKind: i32
value: int[7|0x7]
=== Inputs ===
=== Succesors ===
=== Usages ===
i276 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i276 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i275 
=== Succesors ===
=== Usages ===
j266 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i275  <|@  <|@
f <@~|@floating>@ <|@
tid j266 <|@
result v45|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i276 
=== Succesors ===
=== Usages ===
v363 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i276  <|@  <|@
f <@~|@floating>@ <|@
tid v363 <|@
result [v1|QWORD[.] + v45|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j266 
=== Succesors ===
=== Usages ===
i350 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j266  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i350 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v363 
lastLocationAccess: - 
=== Succesors ===
next: v124 
=== Usages ===
i267 
=== Predecessor ===
i349 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v363 lastLocationAccess: - #next: v124  <|@  <|@
f <@~|@floating>@ <|@
tid i125 <|@
result v46|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i127 
y: i30 
=== Succesors ===
=== Usages ===
i126 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i127 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i126 <|@
result v47|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i125 
y: i127 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i125 y: i127  <|@  <|@
f <@~|@floating>@ <|@
tid i133 <|@
result v32|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i343 
=== Succesors ===
=== Usages ===
i122 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i343  <|@  <|@
f <@~|@floating>@ <|@
tid i122 <|@
result v48|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i126 
y: i133 
=== Succesors ===
=== Usages ===
i178 i177 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i126 y: i133  <|@  <|@
f <@~|@floating>@ <|@
tid i177 <|@
result v49|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i122 
y: i30 
=== Succesors ===
=== Usages ===
i178 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i122 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i178 <|@
result v50|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i177 
y: i122 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i177 y: i122  <|@  <|@
f <@~|@floating>@ <|@
tid i183 <|@
result v34|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i344 
=== Succesors ===
=== Usages ===
i174 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i344  <|@  <|@
f <@~|@floating>@ <|@
tid i174 <|@
result v51|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i178 
y: i183 
=== Succesors ===
=== Usages ===
i202 i201 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i178 y: i183  <|@  <|@
f <@~|@floating>@ <|@
tid i201 <|@
result v52|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i174 
y: i30 
=== Succesors ===
=== Usages ===
i202 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i174 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i202 <|@
result v53|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i201 
y: i174 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i201 y: i174  <|@  <|@
f <@~|@floating>@ <|@
tid i207 <|@
result v36|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i345 
=== Succesors ===
=== Usages ===
i198 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i345  <|@  <|@
f <@~|@floating>@ <|@
tid i198 <|@
result v54|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i202 
y: i207 
=== Succesors ===
=== Usages ===
i211 i212 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i202 y: i207  <|@  <|@
f <@~|@floating>@ <|@
tid i211 <|@
result v55|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i198 
y: i30 
=== Succesors ===
=== Usages ===
i212 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i198 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i212 <|@
result v56|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i211 
y: i198 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i211 y: i198  <|@  <|@
f <@~|@floating>@ <|@
tid i217 <|@
result v38|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i346 
=== Succesors ===
=== Usages ===
i210 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i346  <|@  <|@
f <@~|@floating>@ <|@
tid i210 <|@
result v57|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i212 
y: i217 
=== Succesors ===
=== Usages ===
i233 i232 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i212 y: i217  <|@  <|@
f <@~|@floating>@ <|@
tid i232 <|@
result v58|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i210 
y: i30 
=== Succesors ===
=== Usages ===
i233 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i210 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i233 <|@
result v59|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i232 
y: i210 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i232 y: i210  <|@  <|@
f <@~|@floating>@ <|@
tid i238 <|@
result v40|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i347 
=== Succesors ===
=== Usages ===
i229 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i347  <|@  <|@
f <@~|@floating>@ <|@
tid i229 <|@
result v60|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i233 
y: i238 
=== Succesors ===
=== Usages ===
i242 i243 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i233 y: i238  <|@  <|@
f <@~|@floating>@ <|@
tid i242 <|@
result v61|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i229 
y: i30 
=== Succesors ===
=== Usages ===
i243 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i229 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i243 <|@
result v62|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i242 
y: i229 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i242 y: i229  <|@  <|@
f <@~|@floating>@ <|@
tid i248 <|@
result v42|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i348 
=== Succesors ===
=== Usages ===
i241 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i348  <|@  <|@
f <@~|@floating>@ <|@
tid i241 <|@
result v63|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i243 
y: i248 
=== Succesors ===
=== Usages ===
i252 i253 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i243 y: i248  <|@  <|@
f <@~|@floating>@ <|@
tid i252 <|@
result v64|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i241 
y: i30 
=== Succesors ===
=== Usages ===
i253 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i241 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i253 <|@
result v65|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i252 
y: i241 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i252 y: i241  <|@  <|@
f <@~|@floating>@ <|@
tid i258 <|@
result v44|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i349 
=== Succesors ===
=== Usages ===
i251 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i349  <|@  <|@
f <@~|@floating>@ <|@
tid i251 <|@
result v66|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i253 
y: i258 
=== Succesors ===
=== Usages ===
i261 i262 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i253 y: i258  <|@  <|@
f <@~|@floating>@ <|@
tid i261 <|@
result v67|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i251 
y: i30 
=== Succesors ===
=== Usages ===
i262 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i251 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i262 <|@
result v68|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i261 
y: i251 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i261 y: i251  <|@  <|@
f <@~|@floating>@ <|@
tid i267 <|@
result v69|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i350 
=== Succesors ===
=== Usages ===
i260 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i350  <|@  <|@
f <@~|@floating>@ <|@
tid i260 <|@
result v70|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i262 
y: i267 
=== Succesors ===
=== Usages ===
i127 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i262 y: i267  <|@  <|@
f <@~|@floating>@ <|@
tid i271 <|@
result int[8|0x8] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
rawvalue: 8
stableDimension: 0
stamp: i32 [8]
stampKind: i32
value: int[8|0x8]
=== Inputs ===
=== Succesors ===
=== Usages ===
i277 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i277 <|@
result v71|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i128 
y: i271 
=== Succesors ===
=== Usages ===
i128 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i128 y: i271  <|@  <|@
f <@*|@fixed>@ <|@
tid v124 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v117 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i350 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v117  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v70|DWORD, v71|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v119 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v117 
=== Succesors ===
next: v159 
=== Usages ===
=== Predecessor ===
v121 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v117 #next: v159  <|@  <|@
f <@*|@fixed>@ <|@
tid v159 <|@
d <@d|@=== Debug Properties ===
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v140 
=== Predecessor ===
v119 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i150 <|@
result v72|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i127 i145 
=== Succesors ===
=== Usages ===
i148 i149 i51 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i127 i145  <|@  <|@
f <@~|@floating>@ <|@
tid i151 <|@
result v73|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v140 
values: i128 i146 
=== Succesors ===
=== Usages ===
v141 i146 j155 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v140 values: i128 i146  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v140 <|@
d <@d|@=== Debug Properties ===
canEndsGuestSafepoint: false
canEndsSafepoint: false
canNeverOverflow: false
cloneFromNodeId: 9
compilerInverted: false
disableCounted: false
hasSpeculationFence: false
loopOrigFrequency: 11.74648695153426
loopType: POST_LOOP
nextEndIndex: 1
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
osrLoop: false
peelings: 1
rotated: false
splits: 0
stamp: void
stripMinedInner: false
stripMinedLimit: -1
stripMinedOuter: false
unrollFactor: 1
unswitches: 0
=== Inputs ===
stateAfter: - 
protectedNonOverflowingUnsigned: - 
overflowGuard: - 
interIterationAliasingGuard: - 
ends: v159 
=== Succesors ===
next: v144 
=== Usages ===
v142 v147 i150 i151 
=== Predecessor ===
- >@ <|@
instruction <@LoopBegin|@jdk.graal.compiler.nodes.LoopBeginNode>@ stateAfter: - protectedNonOverflowingUnsigned: - overflowGuard: - interIterationAliasingGuard: - ends: v159 #next: v144  <|@  <|@
f <@~|@floating>@ <|@
tid v141 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i151 
y: i6 
=== Succesors ===
=== Usages ===
v144 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i151 y: i6  <|@  <|@
f <@*|@fixed>@ <|@
tid v144 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 12]
profileData: INJECTED designatedSuccessorProbability: 0.01
stamp: void
=== Inputs ===
condition: v141 
=== Succesors ===
trueSuccessor: v143 
falseSuccessor: v142 
=== Usages ===
=== Predecessor ===
v140 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v141 #trueSuccessor: v143 #falseSuccessor: v142  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v72|DWORD, v73|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v143 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 15]
stamp: void
=== Inputs ===
=== Succesors ===
next: i351 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i351  <|@  <|@
f <@~|@floating>@ <|@
tid j155 <|@
result v73|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 32
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
resultBits: 64
stamp: i64 [0 - 4294967295] bits:0...0xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
=== Inputs ===
value: i151 
=== Succesors ===
=== Usages ===
v356 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i151  <|@  <|@
f <@~|@floating>@ <|@
tid v356 <|@
result [v1|QWORD[.] + v73|DWORD * 1 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S1
=== Inputs ===
base: a2 
index: j155 
=== Succesors ===
=== Usages ===
i351 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a2 index: j155  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i351 <|@
d <@d|@=== Debug Properties ===
accessStamp: i8
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: Array: byte
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i8
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v356 
lastLocationAccess: - 
=== Succesors ===
next: v147 
=== Usages ===
i156 
=== Predecessor ===
v143 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v356 lastLocationAccess: - #next: v147  <|@  <|@
f <@~|@floating>@ <|@
tid i148 <|@
result v74|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32 [-2147483648 - 2147483616] bits:x...x00000
=== Inputs ===
x: i150 
y: i30 
=== Succesors ===
=== Usages ===
i149 
=== Predecessor ===
- >@ <|@
instruction <@<<|@jdk.graal.compiler.nodes.calc.LeftShiftNode>@ x: i150 y: i30  <|@  <|@
f <@~|@floating>@ <|@
tid i149 <|@
result v75|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 18]
stamp: i32
=== Inputs ===
x: i148 
y: i150 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@-|@jdk.graal.compiler.nodes.calc.SubNode>@ x: i148 y: i150  <|@  <|@
f <@~|@floating>@ <|@
tid i156 <|@
result v76|DWORD <|@
d <@d|@=== Debug Properties ===
inputBits: 8
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 26]
resultBits: 32
stamp: i32 [0 - 255] bits:0...0xxxxxxxx
=== Inputs ===
value: i351 
=== Succesors ===
=== Usages ===
i145 
=== Predecessor ===
- >@ <|@
instruction <@ZeroExtend|@jdk.graal.compiler.nodes.calc.ZeroExtendNode>@ value: i351  <|@  <|@
f <@~|@floating>@ <|@
tid i145 <|@
result v77|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 27]
stamp: i32
=== Inputs ===
x: i149 
y: i156 
=== Succesors ===
=== Usages ===
i150 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i149 y: i156  <|@  <|@
f <@~|@floating>@ <|@
tid i146 <|@
result v78|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 29]
stamp: i32
=== Inputs ===
x: i151 
y: i26 
=== Succesors ===
=== Usages ===
i151 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i151 y: i26  <|@  <|@
f <@*|@fixed>@ <|@
tid v147 <|@
d <@d|@=== Debug Properties ===
canGuestSafepoint: false
canSafepoint: false
endIndex: 0
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:216) [bci: 8]
stamp: void
=== Inputs ===
loopBegin: v140 
=== Succesors ===
=== Usages ===
=== Predecessor ===
i351 >@ <|@
instruction <@LoopEnd|@jdk.graal.compiler.nodes.LoopEndNode>@ loopBegin: v140  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v77|DWORD, v78|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v142 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
loopBegin: v140 
=== Succesors ===
next: v47 
=== Usages ===
=== Predecessor ===
v144 >@ <|@
instruction <@LoopExit|@jdk.graal.compiler.nodes.LoopExitNode>@ stateAfter: - loopBegin: v140 #next: v47  <|@  <|@
f <@*|@fixed>@ <|@
tid v47 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v142 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v72|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v114 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
next: v318 
=== Usages ===
=== Predecessor ===
v115 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v318  <|@  <|@
f <@~|@floating>@ <|@
tid j311 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
j313 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i319 <|@
result int[-15643|0xffffffffffffc2e5] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
rawvalue: -15643
stableDimension: 0
stamp: i32 [-15643]
stampKind: i32
value: int[-15643|0xffffffffffffc2e5]
=== Inputs ===
=== Succesors ===
=== Usages ===
i312 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@*|@fixed>@ <|@
tid v318 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v308 
=== Predecessor ===
v114 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i312 <|@
result v79|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i32 [-18715 - -15643] bits:1...1xxx0x1011100101
valueDescription: i32
=== Inputs ===
merge: v308 
values: i316 i319 i316 
=== Succesors ===
=== Usages ===
v314 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v308 values: i316 i319 i316  <|@  <|@
f <@~|@floating>@ <|@
tid j313 <|@
result v80|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: i64 [0 - 24] bits:0...0xx000
valueDescription: i64
=== Inputs ===
merge: v308 
values: j317 j311 j317 
=== Succesors ===
=== Usages ===
v314 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v308 values: j317 j311 j317  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v308 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v315 v318 v339 
=== Succesors ===
next: v314 
=== Usages ===
i312 j313 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v315 v318 v339 #next: v314  <|@  <|@
f <@*|@fixed>@ <|@
tid v314 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:217) [bci: 22]
stamp: void
=== Inputs ===
stateBefore: ?5 
actionAndReason: i312 
speculation: j313 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v308 >@ <|@
instruction <@DynamicDeoptimize|@jdk.graal.compiler.nodes.DynamicDeoptimizeNode>@ stateBefore: ?5 actionAndReason: i312 speculation: j313  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v35 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
next: v48 
=== Usages ===
=== Predecessor ===
v37 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v48  <|@  <|@
f <@*|@fixed>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v46 
=== Predecessor ===
v35 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      HIR
f <@~|@floating>@ <|@
tid i51 <|@
result v81|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: i32
valueDescription: i32
=== Inputs ===
merge: v46 
values: i150 i1 
=== Succesors ===
=== Usages ===
v29 
=== Predecessor ===
- >@ <|@
instruction <@ValuePhi|@jdk.graal.compiler.nodes.ValuePhiNode>@ merge: v46 values: i150 i1  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v46 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 35]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v47 v48 
=== Succesors ===
next: v29 
=== Usages ===
i51 
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v47 v48 #next: v29  <|@  <|@
f <@*|@fixed>@ <|@
tid v29 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:219) [bci: 36]
stamp: void
=== Inputs ===
memoryMap: - 
result: i51 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v46 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: i51  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [v81|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v70|DWORD, v71|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr   -1  <|@ instruction [v72|DWORD, v73|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v77|DWORD, v78|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v72|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr   -1  <|@ instruction [v81|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v70|DWORD, v71|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr   -1  <|@ instruction [v72|DWORD, v73|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v77|DWORD, v78|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v72|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr   -1  <|@ instruction [v81|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v70|DWORD, v71|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr   -1  <|@ instruction [v72|DWORD, v73|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v77|DWORD, v78|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v72|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr   -1  <|@ instruction [v81|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   -1  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   -1  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr   -1  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr   -1  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v70|DWORD, v71|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr   -1  <|@ instruction [v72|DWORD, v73|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr   -1  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v77|DWORD, v78|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v72|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr   -1  <|@ instruction [v81|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr   -1  <|@ instruction [v79|DWORD, v80|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   72  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   76  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   78  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr  100  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  102  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  104  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  108  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  110  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  142  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr  194  <|@ instruction JUMP ~outgoingValues: [v70|DWORD, v71|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  200  <|@ instruction [v72|DWORD, v73|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  202  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  204  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  206  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  212  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr  216  <|@ instruction JUMP ~outgoingValues: [v77|DWORD, v78|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  220  <|@ instruction JUMP ~outgoingValues: [v72|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  222  <|@ instruction [v81|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  224  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr  226  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  230  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  244  <|@ instruction [v79|DWORD, v80|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  246  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr  250  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   72  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   76  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   78  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr  100  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  102  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  104  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  108  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  110  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  142  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr  194  <|@ instruction JUMP ~outgoingValues: [v70|DWORD, v71|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  200  <|@ instruction [v72|DWORD, v73|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  202  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  204  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  206  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  212  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr  216  <|@ instruction JUMP ~outgoingValues: [v77|DWORD, v78|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  220  <|@ instruction JUMP ~outgoingValues: [v72|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  222  <|@ instruction [v81|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  224  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr  226  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  230  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  244  <|@ instruction [v79|DWORD, v80|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  246  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr  250  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|d fixed "[rax|d]" rax|d v81|d [0, 1[[224, 226[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[v0|d]" v0|d rsi|d [6, 65[[228, 231[[232, 251[6 MustHaveRegister 62 MustHaveRegister 64 ShouldHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[v1|q]" v1|q rdx|q [8, 218[[232, 251[8 MustHaveRegister 20 MustHaveRegister 66 MustHaveRegister 88 MustHaveRegister 95 LiveAtLoopEnd 114 MustHaveRegister 118 MustHaveRegister 122 MustHaveRegister 126 MustHaveRegister 130 MustHaveRegister 134 MustHaveRegister 138 MustHaveRegister 188 MustHaveRegister 195 LiveAtLoopEnd 210 MustHaveRegister 217 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d rcx|d [10, 70[[232, 251[10 MustHaveRegister 14 ShouldHaveRegister 16 ShouldHaveRegister 22 ShouldHaveRegister 56 ShouldHaveRegister 60 ShouldHaveRegister 70 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[v3|d]" v3|d r8|d [12, 58[[232, 251[12 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[v4|d]" v4|d v2|d [14, 218[14 MustHaveRegister 16 MustHaveRegister 24 MustHaveRegister 34 MustHaveRegister 72 MustHaveRegister 74 ShouldHaveRegister 98 MustHaveRegister 100 ShouldHaveRegister 202 MustHaveRegister 217 LiveAtLoopEnd  "NoSpillStore"
  v5|d DWORD "[v5|d]" v5|d -1 [20, 56[20 MustHaveRegister 42 ShouldHaveRegister 48 MustHaveRegister 56 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d v2|d [22, 77[22 MustHaveRegister 24 ShouldHaveRegister 32 ShouldHaveRegister 34 ShouldHaveRegister 48 ShouldHaveRegister 76 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[v7|q]" v7|q -1 [32, 38[32 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[v8|d]" v8|d v4|d [34, 36[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[v9|q]" v9|q -1 [36, 38[36 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[v10|q]" v10|q v7|q [38, 40[38 MustHaveRegister 40 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[v11|q]" v11|q v10|q [40, 44[40 MustHaveRegister 44 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[v12|q]" v12|q v5|d [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[v13|q]" v13|q -1 [60, 66[60 MustHaveRegister 66 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[v14|d]" v14|d v0|d [62, 64[62 MustHaveRegister 64 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[v15|d]" v15|d v14|d [64, 68[64 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[v16|d]" v16|d -1 [66, 68[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[v17|d]" v17|d v15|d [68, 77[68 MustHaveRegister 76 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[v18|d]" v18|d -1 [70, 75[70 MustHaveRegister 72 ShouldHaveRegister 74 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[v19|d]" v19|d v4|d [74, 96[74 MustHaveRegister 80 MustHaveRegister 95 LiveAtLoopEnd  "NoSpillStore"
  v20|d DWORD "[v20|d]" v20|d v6|d [78, 92[[96, 107[80 ShouldHaveRegister 88 MustHaveRegister 92 ShouldHaveRegister 106 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[v21|d]" v21|d v17|d [78, 87[[96, 107[84 MustHaveRegister 86 ShouldHaveRegister 106 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[v22|d]" v22|d v21|d [84, 86[84 MustHaveRegister 86 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[v23|d]" v23|d v22|d [86, 90[86 MustHaveRegister 90 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[v24|d]" v24|d -1 [88, 90[88 MustHaveRegister 90 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[v25|d]" v25|d v23|d [90, 95[90 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[v26|d]" v26|d v20|d [92, 95[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[v27|d]" v27|d -1 [98, 104[98 MustHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[v28|d]" v28|d v27|d [104, 196[104 MustHaveRegister 110 MustHaveRegister 195 LiveAtLoopEnd  "NoSpillStore"
  v29|d DWORD "[v29|d]" v29|d -1 [102, 105[102 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[v30|d]" v30|d v21|d [108, 145[[196, 199[142 MustHaveRegister 144 ShouldHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[v31|d]" v31|d v20|d [108, 192[[196, 199[110 ShouldHaveRegister 114 MustHaveRegister 116 ShouldHaveRegister 120 MustHaveRegister 124 MustHaveRegister 128 MustHaveRegister 132 MustHaveRegister 136 MustHaveRegister 140 MustHaveRegister 192 MustHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v32|d DWORD "[v32|d]" v32|d -1 [114, 146[114 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[v33|d]" v33|d v31|d [116, 118[116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[v34|d]" v34|d -1 [118, 152[118 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[v35|d]" v35|d -1 [120, 122[120 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[v36|d]" v36|d -1 [122, 158[122 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[v37|d]" v37|d -1 [124, 126[124 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[v38|d]" v38|d -1 [126, 164[126 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[v39|d]" v39|d -1 [128, 130[128 MustHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[v40|d]" v40|d -1 [130, 170[130 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[v41|d]" v41|d -1 [132, 134[132 MustHaveRegister 134 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[v42|d]" v42|d -1 [134, 176[134 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[v43|d]" v43|d -1 [136, 138[136 MustHaveRegister 138 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[v44|d]" v44|d -1 [138, 182[138 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[v45|d]" v45|d -1 [140, 188[140 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[v46|d]" v46|d v30|d [142, 144[142 MustHaveRegister 144 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[v47|d]" v47|d v46|d [144, 146[144 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[v48|d]" v48|d v47|d [146, 151[146 MustHaveRegister 148 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[v49|d]" v49|d v48|d [148, 150[148 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[v50|d]" v50|d v49|d [150, 152[150 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v51|d DWORD "[v51|d]" v51|d v50|d [152, 157[152 MustHaveRegister 154 MustHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[v52|d]" v52|d v51|d [154, 156[154 MustHaveRegister 156 MustHaveRegister  "NoSpillStore"
  v53|d DWORD "[v53|d]" v53|d v52|d [156, 158[156 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v54|d DWORD "[v54|d]" v54|d v53|d [158, 163[158 MustHaveRegister 160 MustHaveRegister 162 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[v55|d]" v55|d v54|d [160, 162[160 MustHaveRegister 162 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[v56|d]" v56|d v55|d [162, 164[162 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[v57|d]" v57|d v56|d [164, 169[164 MustHaveRegister 166 MustHaveRegister 168 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[v58|d]" v58|d v57|d [166, 168[166 MustHaveRegister 168 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[v59|d]" v59|d v58|d [168, 170[168 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v60|d DWORD "[v60|d]" v60|d v59|d [170, 175[170 MustHaveRegister 172 MustHaveRegister 174 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[v61|d]" v61|d v60|d [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[v62|d]" v62|d v61|d [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[v63|d]" v63|d v62|d [176, 181[176 MustHaveRegister 178 MustHaveRegister 180 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[v64|d]" v64|d v63|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v65|d DWORD "[v65|d]" v65|d v64|d [180, 182[180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v66|d DWORD "[v66|d]" v66|d v65|d [182, 187[182 MustHaveRegister 184 MustHaveRegister 186 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[v67|d]" v67|d v66|d [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[v68|d]" v68|d v67|d [186, 190[186 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v69|d DWORD "[v69|d]" v69|d -1 [188, 190[188 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[v70|d]" v70|d v68|d [190, 195[190 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[v71|d]" v71|d -1 [192, 195[192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v72|d DWORD "[v72|d]" v72|d v30|d [200, 209[[218, 221[206 MustHaveRegister 208 ShouldHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[v73|d]" v73|d v31|d [200, 214[202 ShouldHaveRegister 210 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[v74|d]" v74|d v72|d [206, 208[206 MustHaveRegister 208 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[v75|d]" v75|d v74|d [208, 212[208 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[v76|d]" v76|d -1 [210, 212[210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[v77|d]" v77|d v75|d [212, 217[212 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[v78|d]" v78|d v73|d [214, 217[214 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[v79|d]" v79|d -1 [244, 246[246 MustHaveRegister  "NoSpillStore"
  v80|q QWORD "[v80|q]" v80|q -1 [244, 248[248 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[v81|d]" v81|d v72|d [222, 224[224 ShouldHaveRegister  "NoSpillStore"
end_intervals
begin_intervals
  name "After register allocation"
  rax|d fixed "[rax|d]" rax|d v81|d [0, 1[[224, 226[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [6, 65[[228, 231[[232, 251[6 MustHaveRegister 62 MustHaveRegister 64 ShouldHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [8, 218[[232, 251[8 MustHaveRegister 20 MustHaveRegister 66 MustHaveRegister 88 MustHaveRegister 95 LiveAtLoopEnd 114 MustHaveRegister 118 MustHaveRegister 122 MustHaveRegister 126 MustHaveRegister 130 MustHaveRegister 134 MustHaveRegister 138 MustHaveRegister 188 MustHaveRegister 195 LiveAtLoopEnd 210 MustHaveRegister 217 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 70[[232, 251[10 MustHaveRegister 14 ShouldHaveRegister 16 ShouldHaveRegister 22 ShouldHaveRegister 56 ShouldHaveRegister 60 ShouldHaveRegister 70 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 58[[232, 251[12 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rax|d]" v4|d v2|d [14, 108[14 MustHaveRegister 16 MustHaveRegister 24 MustHaveRegister 34 MustHaveRegister 72 MustHaveRegister 74 ShouldHaveRegister 98 MustHaveRegister 100 ShouldHaveRegister  "SpillInDominator"
  v5|d DWORD "[r10|d]" v5|d -1 [20, 56[20 MustHaveRegister 42 ShouldHaveRegister 48 MustHaveRegister 56 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d v2|d [22, 77[22 MustHaveRegister 24 ShouldHaveRegister 32 ShouldHaveRegister 34 ShouldHaveRegister 48 ShouldHaveRegister 76 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[r9|q]" v7|q -1 [32, 38[32 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d v4|d [34, 36[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [36, 38[36 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[r9|q]" v10|q v7|q [38, 40[38 MustHaveRegister 40 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[r9|q]" v11|q v10|q [40, 44[40 MustHaveRegister 44 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q v5|d [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[r10|q]" v13|q -1 [60, 66[60 MustHaveRegister 66 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r8|d]" v14|d v0|d [62, 64[62 MustHaveRegister 64 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[r8|d]" v15|d v14|d [64, 68[64 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[r10|d]" v16|d -1 [66, 68[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r8|d]" v17|d v15|d [68, 77[68 MustHaveRegister 76 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[r10|d]" v18|d -1 [70, 75[70 MustHaveRegister 72 ShouldHaveRegister 74 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d v4|d [74, 96[74 MustHaveRegister 80 MustHaveRegister 95 LiveAtLoopEnd  "NoSpillStore"
  v20|d DWORD "[r11|d]" v20|d v6|d [78, 92[[96, 107[80 ShouldHaveRegister 88 MustHaveRegister 92 ShouldHaveRegister 106 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[r8|d]" v21|d v17|d [78, 87[[96, 107[84 MustHaveRegister 86 ShouldHaveRegister 106 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[r10|d]" v22|d v21|d [84, 86[84 MustHaveRegister 86 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[r10|d]" v23|d v22|d [86, 90[86 MustHaveRegister 90 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r8|d]" v24|d -1 [88, 90[88 MustHaveRegister 90 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r10|d]" v25|d v23|d [90, 95[90 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[r11|d]" v26|d v20|d [92, 95[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r10|d]" v27|d -1 [98, 104[98 MustHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d v27|d [104, 196[104 MustHaveRegister 110 MustHaveRegister 195 LiveAtLoopEnd  "NoSpillStore"
  v29|d DWORD "[r9|d]" v29|d -1 [102, 105[102 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d v21|d [108, 145[[196, 199[142 MustHaveRegister 144 ShouldHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r11|d]" v31|d v20|d [108, 192[[196, 199[110 ShouldHaveRegister 114 MustHaveRegister 116 ShouldHaveRegister 120 MustHaveRegister 124 MustHaveRegister 128 MustHaveRegister 132 MustHaveRegister 136 MustHaveRegister 140 MustHaveRegister 192 MustHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v32|d DWORD "[r9|d]" v32|d -1 [114, 146[114 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[rcx|d]" v33|d v31|d [116, 118[116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[rcx|d]" v34|d -1 [118, 152[118 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rbx|d]" v35|d -1 [120, 122[120 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[rbx|d]" v36|d -1 [122, 158[122 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d -1 [124, 126[124 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[rdi|d]" v38|d -1 [126, 164[126 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[rsi|d]" v39|d -1 [128, 130[128 MustHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rsi|d]" v40|d -1 [130, 170[130 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[rbp|d]" v41|d -1 [132, 134[132 MustHaveRegister 134 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rbp|d]" v42|d -1 [134, 176[134 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[r13|d]" v43|d -1 [136, 138[136 MustHaveRegister 138 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[r13|d]" v44|d -1 [138, 182[138 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r14|d]" v45|d -1 [140, 188[140 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[rax|d]" v46|d v30|d [142, 144[142 MustHaveRegister 144 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rax|d]" v47|d v46|d [144, 146[144 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[rax|d]" v48|d v47|d [146, 151[146 MustHaveRegister 148 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[r8|d]" v49|d v48|d [148, 150[148 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[r8|d]" v50|d v49|d [150, 152[150 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v51|d DWORD "[r8|d]" v51|d v50|d [152, 157[152 MustHaveRegister 154 MustHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[rax|d]" v52|d v51|d [154, 156[154 MustHaveRegister 156 MustHaveRegister  "NoSpillStore"
  v53|d DWORD "[rax|d]" v53|d v52|d [156, 158[156 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v54|d DWORD "[rax|d]" v54|d v53|d [158, 163[158 MustHaveRegister 160 MustHaveRegister 162 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[r8|d]" v55|d v54|d [160, 162[160 MustHaveRegister 162 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[r8|d]" v56|d v55|d [162, 164[162 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[r8|d]" v57|d v56|d [164, 169[164 MustHaveRegister 166 MustHaveRegister 168 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[rax|d]" v58|d v57|d [166, 168[166 MustHaveRegister 168 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[rax|d]" v59|d v58|d [168, 170[168 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v60|d DWORD "[rax|d]" v60|d v59|d [170, 175[170 MustHaveRegister 172 MustHaveRegister 174 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d v60|d [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r8|d]" v62|d v61|d [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r8|d]" v63|d v62|d [176, 181[176 MustHaveRegister 178 MustHaveRegister 180 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[rax|d]" v64|d v63|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v65|d DWORD "[rax|d]" v65|d v64|d [180, 182[180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v66|d DWORD "[rax|d]" v66|d v65|d [182, 187[182 MustHaveRegister 184 MustHaveRegister 186 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d v66|d [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[r8|d]" v68|d v67|d [186, 190[186 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v69|d DWORD "[rax|d]" v69|d -1 [188, 190[188 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r8|d]" v70|d v68|d [190, 195[190 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[rax|d]" v71|d -1 [192, 195[192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v72|d DWORD "[r8|d]" v72|d v30|d [200, 209[[218, 221[206 MustHaveRegister 208 ShouldHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r11|d]" v73|d v31|d [200, 214[202 ShouldHaveRegister 210 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[r10|d]" v74|d v72|d [206, 208[206 MustHaveRegister 208 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[r10|d]" v75|d v74|d [208, 212[208 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r8|d]" v76|d -1 [210, 212[210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[r10|d]" v77|d v75|d [212, 217[212 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[r11|d]" v78|d v73|d [214, 217[214 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[r10|d]" v79|d -1 [244, 246[246 MustHaveRegister  "NoSpillStore"
  v80|q QWORD "[r11|q]" v80|q -1 [244, 248[248 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[r8|d]" v81|d v72|d [222, 224[224 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[rax|d]" v4|d v4|d [200, 218[202 MustHaveRegister 217 LiveAtLoopEnd  "SpillInDominator"
  v83|d DWORD "[vstack:0|d]" v4|d v4|d [108, 200[ "SpillInDominator"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   72  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   76  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   78  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr  100  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  102  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  104  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  108  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  110  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  142  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr  194  <|@ instruction JUMP ~outgoingValues: [v70|DWORD, v71|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  200  <|@ instruction [v72|DWORD, v73|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  202  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  204  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  206  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  212  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr  216  <|@ instruction JUMP ~outgoingValues: [v77|DWORD, v78|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  220  <|@ instruction JUMP ~outgoingValues: [v72|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  222  <|@ instruction [v81|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  224  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr  226  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  230  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  244  <|@ instruction [v79|DWORD, v80|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  246  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr  250  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|d fixed "[rax|d]" rax|d v81|d [0, 1[[224, 226[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [6, 65[[228, 231[[232, 251[6 MustHaveRegister 62 MustHaveRegister 64 ShouldHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [8, 218[[232, 251[8 MustHaveRegister 20 MustHaveRegister 66 MustHaveRegister 88 MustHaveRegister 95 LiveAtLoopEnd 114 MustHaveRegister 118 MustHaveRegister 122 MustHaveRegister 126 MustHaveRegister 130 MustHaveRegister 134 MustHaveRegister 138 MustHaveRegister 188 MustHaveRegister 195 LiveAtLoopEnd 210 MustHaveRegister 217 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 70[[232, 251[10 MustHaveRegister 14 ShouldHaveRegister 16 ShouldHaveRegister 22 ShouldHaveRegister 56 ShouldHaveRegister 60 ShouldHaveRegister 70 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 58[[232, 251[12 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rax|d]" v4|d v2|d [14, 108[14 MustHaveRegister 16 MustHaveRegister 24 MustHaveRegister 34 MustHaveRegister 72 MustHaveRegister 74 ShouldHaveRegister 98 MustHaveRegister 100 ShouldHaveRegister  "SpillInDominator"
  v5|d DWORD "[r10|d]" v5|d -1 [20, 56[20 MustHaveRegister 42 ShouldHaveRegister 48 MustHaveRegister 56 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d v2|d [22, 77[22 MustHaveRegister 24 ShouldHaveRegister 32 ShouldHaveRegister 34 ShouldHaveRegister 48 ShouldHaveRegister 76 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[r9|q]" v7|q -1 [32, 38[32 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d v4|d [34, 36[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [36, 38[36 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[r9|q]" v10|q v7|q [38, 40[38 MustHaveRegister 40 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[r9|q]" v11|q v10|q [40, 44[40 MustHaveRegister 44 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q v5|d [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[r10|q]" v13|q -1 [60, 66[60 MustHaveRegister 66 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r8|d]" v14|d v0|d [62, 64[62 MustHaveRegister 64 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[r8|d]" v15|d v14|d [64, 68[64 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[r10|d]" v16|d -1 [66, 68[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r8|d]" v17|d v15|d [68, 77[68 MustHaveRegister 76 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[r10|d]" v18|d -1 [70, 75[70 MustHaveRegister 72 ShouldHaveRegister 74 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d v4|d [74, 96[74 MustHaveRegister 80 MustHaveRegister 95 LiveAtLoopEnd  "NoSpillStore"
  v20|d DWORD "[r11|d]" v20|d v6|d [78, 92[[96, 107[80 ShouldHaveRegister 88 MustHaveRegister 92 ShouldHaveRegister 106 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[r8|d]" v21|d v17|d [78, 87[[96, 107[84 MustHaveRegister 86 ShouldHaveRegister 106 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[r10|d]" v22|d v21|d [84, 86[84 MustHaveRegister 86 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[r10|d]" v23|d v22|d [86, 90[86 MustHaveRegister 90 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r8|d]" v24|d -1 [88, 90[88 MustHaveRegister 90 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r10|d]" v25|d v23|d [90, 95[90 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[r11|d]" v26|d v20|d [92, 95[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r10|d]" v27|d -1 [98, 104[98 MustHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d v27|d [104, 196[104 MustHaveRegister 110 MustHaveRegister 195 LiveAtLoopEnd  "NoSpillStore"
  v29|d DWORD "[r9|d]" v29|d -1 [102, 105[102 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d v21|d [108, 145[[196, 199[142 MustHaveRegister 144 ShouldHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r11|d]" v31|d v20|d [108, 192[[196, 199[110 ShouldHaveRegister 114 MustHaveRegister 116 ShouldHaveRegister 120 MustHaveRegister 124 MustHaveRegister 128 MustHaveRegister 132 MustHaveRegister 136 MustHaveRegister 140 MustHaveRegister 192 MustHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v32|d DWORD "[r9|d]" v32|d -1 [114, 146[114 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[rcx|d]" v33|d v31|d [116, 118[116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[rcx|d]" v34|d -1 [118, 152[118 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rbx|d]" v35|d -1 [120, 122[120 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[rbx|d]" v36|d -1 [122, 158[122 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d -1 [124, 126[124 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[rdi|d]" v38|d -1 [126, 164[126 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[rsi|d]" v39|d -1 [128, 130[128 MustHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rsi|d]" v40|d -1 [130, 170[130 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[rbp|d]" v41|d -1 [132, 134[132 MustHaveRegister 134 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rbp|d]" v42|d -1 [134, 176[134 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[r13|d]" v43|d -1 [136, 138[136 MustHaveRegister 138 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[r13|d]" v44|d -1 [138, 182[138 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r14|d]" v45|d -1 [140, 188[140 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[rax|d]" v46|d v30|d [142, 144[142 MustHaveRegister 144 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rax|d]" v47|d v46|d [144, 146[144 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[rax|d]" v48|d v47|d [146, 151[146 MustHaveRegister 148 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[r8|d]" v49|d v48|d [148, 150[148 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[r8|d]" v50|d v49|d [150, 152[150 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v51|d DWORD "[r8|d]" v51|d v50|d [152, 157[152 MustHaveRegister 154 MustHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[rax|d]" v52|d v51|d [154, 156[154 MustHaveRegister 156 MustHaveRegister  "NoSpillStore"
  v53|d DWORD "[rax|d]" v53|d v52|d [156, 158[156 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v54|d DWORD "[rax|d]" v54|d v53|d [158, 163[158 MustHaveRegister 160 MustHaveRegister 162 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[r8|d]" v55|d v54|d [160, 162[160 MustHaveRegister 162 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[r8|d]" v56|d v55|d [162, 164[162 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[r8|d]" v57|d v56|d [164, 169[164 MustHaveRegister 166 MustHaveRegister 168 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[rax|d]" v58|d v57|d [166, 168[166 MustHaveRegister 168 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[rax|d]" v59|d v58|d [168, 170[168 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v60|d DWORD "[rax|d]" v60|d v59|d [170, 175[170 MustHaveRegister 172 MustHaveRegister 174 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d v60|d [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r8|d]" v62|d v61|d [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r8|d]" v63|d v62|d [176, 181[176 MustHaveRegister 178 MustHaveRegister 180 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[rax|d]" v64|d v63|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v65|d DWORD "[rax|d]" v65|d v64|d [180, 182[180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v66|d DWORD "[rax|d]" v66|d v65|d [182, 187[182 MustHaveRegister 184 MustHaveRegister 186 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d v66|d [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[r8|d]" v68|d v67|d [186, 190[186 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v69|d DWORD "[rax|d]" v69|d -1 [188, 190[188 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r8|d]" v70|d v68|d [190, 195[190 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[rax|d]" v71|d -1 [192, 195[192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v72|d DWORD "[r8|d]" v72|d v30|d [200, 209[[218, 221[206 MustHaveRegister 208 ShouldHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r11|d]" v73|d v31|d [200, 214[202 ShouldHaveRegister 210 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[r10|d]" v74|d v72|d [206, 208[206 MustHaveRegister 208 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[r10|d]" v75|d v74|d [208, 212[208 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r8|d]" v76|d -1 [210, 212[210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[r10|d]" v77|d v75|d [212, 217[212 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[r11|d]" v78|d v73|d [214, 217[214 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[r10|d]" v79|d -1 [244, 246[246 MustHaveRegister  "NoSpillStore"
  v80|q QWORD "[r11|q]" v80|q -1 [244, 248[248 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[r8|d]" v81|d v72|d [222, 224[224 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[rax|d]" v4|d v4|d [200, 218[202 MustHaveRegister 217 LiveAtLoopEnd  "SpillInDominator"
  v83|d DWORD "[vstack:0|d]" v4|d v4|d [108, 200[ "SpillInDominator"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   72  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   76  <|@ instruction JUMP ~outgoingValues: [v6|DWORD, v17|DWORD] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   78  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [v26|DWORD, v25|DWORD] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr   98  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr  100  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  102  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  104  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [v21|DWORD, v20|DWORD] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  108  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  110  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  142  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr  194  <|@ instruction JUMP ~outgoingValues: [v70|DWORD, v71|DWORD] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  198  <|@ instruction JUMP ~outgoingValues: [v30|DWORD, v31|DWORD] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  200  <|@ instruction [v72|DWORD, v73|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  202  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  204  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  206  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  212  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr  216  <|@ instruction JUMP ~outgoingValues: [v77|DWORD, v78|DWORD] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  220  <|@ instruction JUMP ~outgoingValues: [v72|DWORD] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  222  <|@ instruction [v81|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  224  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr  226  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  230  <|@ instruction JUMP ~outgoingValues: [v0|DWORD] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [int[-15643|0xffffffffffffc2e5], long[0|0x0]] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction JUMP ~outgoingValues: [int[-18715|0xffffffffffffb6e5], long[24|0x18]] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  244  <|@ instruction [v79|DWORD, v80|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  246  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr  250  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|d fixed "[rax|d]" rax|d v81|d [0, 1[[224, 226[ "NoSpillStore"
  rcx|d fixed "[rcx|d]" rcx|d -1 [0, 10[ "NoSpillStore"
  rdx|q fixed "[rdx|q]" rdx|q -1 [0, 8[ "NoSpillStore"
  rbp|q fixed "[rbp|q]" rbp|q -1 [0, 2[ "NoSpillStore"
  rsi|d fixed "[rsi|d]" rsi|d -1 [0, 6[ "NoSpillStore"
  r8|d fixed "[r8|d]" r8|d -1 [0, 12[ "NoSpillStore"
  v0|d DWORD "[rsi|d]" v0|d rsi|d [6, 65[[228, 231[[232, 251[6 MustHaveRegister 62 MustHaveRegister 64 ShouldHaveRegister 230 ShouldHaveRegister  "NoSpillStore"
  v1|q QWORD "[rdx|q]" v1|q rdx|q [8, 218[[232, 251[8 MustHaveRegister 20 MustHaveRegister 66 MustHaveRegister 88 MustHaveRegister 95 LiveAtLoopEnd 114 MustHaveRegister 118 MustHaveRegister 122 MustHaveRegister 126 MustHaveRegister 130 MustHaveRegister 134 MustHaveRegister 138 MustHaveRegister 188 MustHaveRegister 195 LiveAtLoopEnd 210 MustHaveRegister 217 LiveAtLoopEnd  "NoSpillStore"
  v2|d DWORD "[rcx|d]" v2|d rcx|d [10, 70[[232, 251[10 MustHaveRegister 14 ShouldHaveRegister 16 ShouldHaveRegister 22 ShouldHaveRegister 56 ShouldHaveRegister 60 ShouldHaveRegister 70 MustHaveRegister  "NoSpillStore"
  v3|d DWORD "[r8|d]" v3|d r8|d [12, 58[[232, 251[12 MustHaveRegister 14 ShouldHaveRegister  "NoSpillStore"
  v4|d DWORD "[rax|d]" v4|d v2|d [14, 108[14 MustHaveRegister 16 MustHaveRegister 24 MustHaveRegister 34 MustHaveRegister 72 MustHaveRegister 74 ShouldHaveRegister 98 MustHaveRegister 100 ShouldHaveRegister  "SpillInDominator"
  v5|d DWORD "[r10|d]" v5|d -1 [20, 56[20 MustHaveRegister 42 ShouldHaveRegister 48 MustHaveRegister 56 MustHaveRegister  "NoSpillStore"
  v6|d DWORD "[r11|d]" v6|d v2|d [22, 77[22 MustHaveRegister 24 ShouldHaveRegister 32 ShouldHaveRegister 34 ShouldHaveRegister 48 ShouldHaveRegister 76 ShouldHaveRegister  "NoSpillStore"
  v7|q QWORD "[r9|q]" v7|q -1 [32, 38[32 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v8|d DWORD "[rbx|d]" v8|d v4|d [34, 36[34 MustHaveRegister 36 ShouldHaveRegister  "NoSpillStore"
  v9|q QWORD "[rbx|q]" v9|q -1 [36, 38[36 MustHaveRegister 38 ShouldHaveRegister  "NoSpillStore"
  v10|q QWORD "[r9|q]" v10|q v7|q [38, 40[38 MustHaveRegister 40 ShouldHaveRegister  "NoSpillStore"
  v11|q QWORD "[r9|q]" v11|q v10|q [40, 44[40 MustHaveRegister 44 ShouldHaveRegister  "NoSpillStore"
  v12|q QWORD "[rbx|q]" v12|q v5|d [42, 44[42 MustHaveRegister 44 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[r10|q]" v13|q -1 [60, 66[60 MustHaveRegister 66 MustHaveRegister  "NoSpillStore"
  v14|d DWORD "[r8|d]" v14|d v0|d [62, 64[62 MustHaveRegister 64 MustHaveRegister  "NoSpillStore"
  v15|d DWORD "[r8|d]" v15|d v14|d [64, 68[64 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v16|d DWORD "[r10|d]" v16|d -1 [66, 68[66 MustHaveRegister 68 ShouldHaveRegister  "NoSpillStore"
  v17|d DWORD "[r8|d]" v17|d v15|d [68, 77[68 MustHaveRegister 76 ShouldHaveRegister  "NoSpillStore"
  v18|d DWORD "[r10|d]" v18|d -1 [70, 75[70 MustHaveRegister 72 ShouldHaveRegister 74 MustHaveRegister  "NoSpillStore"
  v19|d DWORD "[r9|d]" v19|d v4|d [74, 96[74 MustHaveRegister 80 MustHaveRegister 95 LiveAtLoopEnd  "NoSpillStore"
  v20|d DWORD "[r11|d]" v20|d v6|d [78, 92[[96, 107[80 ShouldHaveRegister 88 MustHaveRegister 92 ShouldHaveRegister 106 ShouldHaveRegister  "NoSpillStore"
  v21|d DWORD "[r8|d]" v21|d v17|d [78, 87[[96, 107[84 MustHaveRegister 86 ShouldHaveRegister 106 ShouldHaveRegister  "NoSpillStore"
  v22|d DWORD "[r10|d]" v22|d v21|d [84, 86[84 MustHaveRegister 86 MustHaveRegister  "NoSpillStore"
  v23|d DWORD "[r10|d]" v23|d v22|d [86, 90[86 MustHaveRegister 90 ShouldHaveRegister  "NoSpillStore"
  v24|d DWORD "[r8|d]" v24|d -1 [88, 90[88 MustHaveRegister 90 ShouldHaveRegister  "NoSpillStore"
  v25|d DWORD "[r10|d]" v25|d v23|d [90, 95[90 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v26|d DWORD "[r11|d]" v26|d v20|d [92, 95[92 MustHaveRegister 94 ShouldHaveRegister  "NoSpillStore"
  v27|d DWORD "[r10|d]" v27|d -1 [98, 104[98 MustHaveRegister 104 ShouldHaveRegister  "NoSpillStore"
  v28|d DWORD "[r10|d]" v28|d v27|d [104, 196[104 MustHaveRegister 110 MustHaveRegister 195 LiveAtLoopEnd  "NoSpillStore"
  v29|d DWORD "[r9|d]" v29|d -1 [102, 105[102 MustHaveRegister 104 MustHaveRegister  "NoSpillStore"
  v30|d DWORD "[r8|d]" v30|d v21|d [108, 145[[196, 199[142 MustHaveRegister 144 ShouldHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v31|d DWORD "[r11|d]" v31|d v20|d [108, 192[[196, 199[110 ShouldHaveRegister 114 MustHaveRegister 116 ShouldHaveRegister 120 MustHaveRegister 124 MustHaveRegister 128 MustHaveRegister 132 MustHaveRegister 136 MustHaveRegister 140 MustHaveRegister 192 MustHaveRegister 198 ShouldHaveRegister  "NoSpillStore"
  v32|d DWORD "[r9|d]" v32|d -1 [114, 146[114 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v33|d DWORD "[rcx|d]" v33|d v31|d [116, 118[116 MustHaveRegister 118 MustHaveRegister  "NoSpillStore"
  v34|d DWORD "[rcx|d]" v34|d -1 [118, 152[118 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v35|d DWORD "[rbx|d]" v35|d -1 [120, 122[120 MustHaveRegister 122 MustHaveRegister  "NoSpillStore"
  v36|d DWORD "[rbx|d]" v36|d -1 [122, 158[122 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v37|d DWORD "[rdi|d]" v37|d -1 [124, 126[124 MustHaveRegister 126 MustHaveRegister  "NoSpillStore"
  v38|d DWORD "[rdi|d]" v38|d -1 [126, 164[126 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v39|d DWORD "[rsi|d]" v39|d -1 [128, 130[128 MustHaveRegister 130 MustHaveRegister  "NoSpillStore"
  v40|d DWORD "[rsi|d]" v40|d -1 [130, 170[130 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v41|d DWORD "[rbp|d]" v41|d -1 [132, 134[132 MustHaveRegister 134 MustHaveRegister  "NoSpillStore"
  v42|d DWORD "[rbp|d]" v42|d -1 [134, 176[134 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v43|d DWORD "[r13|d]" v43|d -1 [136, 138[136 MustHaveRegister 138 MustHaveRegister  "NoSpillStore"
  v44|d DWORD "[r13|d]" v44|d -1 [138, 182[138 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v45|d DWORD "[r14|d]" v45|d -1 [140, 188[140 MustHaveRegister 188 MustHaveRegister  "NoSpillStore"
  v46|d DWORD "[rax|d]" v46|d v30|d [142, 144[142 MustHaveRegister 144 MustHaveRegister  "NoSpillStore"
  v47|d DWORD "[rax|d]" v47|d v46|d [144, 146[144 MustHaveRegister 146 ShouldHaveRegister  "NoSpillStore"
  v48|d DWORD "[rax|d]" v48|d v47|d [146, 151[146 MustHaveRegister 148 MustHaveRegister 150 ShouldHaveRegister  "NoSpillStore"
  v49|d DWORD "[r8|d]" v49|d v48|d [148, 150[148 MustHaveRegister 150 MustHaveRegister  "NoSpillStore"
  v50|d DWORD "[r8|d]" v50|d v49|d [150, 152[150 MustHaveRegister 152 ShouldHaveRegister  "NoSpillStore"
  v51|d DWORD "[r8|d]" v51|d v50|d [152, 157[152 MustHaveRegister 154 MustHaveRegister 156 ShouldHaveRegister  "NoSpillStore"
  v52|d DWORD "[rax|d]" v52|d v51|d [154, 156[154 MustHaveRegister 156 MustHaveRegister  "NoSpillStore"
  v53|d DWORD "[rax|d]" v53|d v52|d [156, 158[156 MustHaveRegister 158 ShouldHaveRegister  "NoSpillStore"
  v54|d DWORD "[rax|d]" v54|d v53|d [158, 163[158 MustHaveRegister 160 MustHaveRegister 162 ShouldHaveRegister  "NoSpillStore"
  v55|d DWORD "[r8|d]" v55|d v54|d [160, 162[160 MustHaveRegister 162 MustHaveRegister  "NoSpillStore"
  v56|d DWORD "[r8|d]" v56|d v55|d [162, 164[162 MustHaveRegister 164 ShouldHaveRegister  "NoSpillStore"
  v57|d DWORD "[r8|d]" v57|d v56|d [164, 169[164 MustHaveRegister 166 MustHaveRegister 168 ShouldHaveRegister  "NoSpillStore"
  v58|d DWORD "[rax|d]" v58|d v57|d [166, 168[166 MustHaveRegister 168 MustHaveRegister  "NoSpillStore"
  v59|d DWORD "[rax|d]" v59|d v58|d [168, 170[168 MustHaveRegister 170 ShouldHaveRegister  "NoSpillStore"
  v60|d DWORD "[rax|d]" v60|d v59|d [170, 175[170 MustHaveRegister 172 MustHaveRegister 174 ShouldHaveRegister  "NoSpillStore"
  v61|d DWORD "[r8|d]" v61|d v60|d [172, 174[172 MustHaveRegister 174 MustHaveRegister  "NoSpillStore"
  v62|d DWORD "[r8|d]" v62|d v61|d [174, 176[174 MustHaveRegister 176 ShouldHaveRegister  "NoSpillStore"
  v63|d DWORD "[r8|d]" v63|d v62|d [176, 181[176 MustHaveRegister 178 MustHaveRegister 180 ShouldHaveRegister  "NoSpillStore"
  v64|d DWORD "[rax|d]" v64|d v63|d [178, 180[178 MustHaveRegister 180 MustHaveRegister  "NoSpillStore"
  v65|d DWORD "[rax|d]" v65|d v64|d [180, 182[180 MustHaveRegister 182 ShouldHaveRegister  "NoSpillStore"
  v66|d DWORD "[rax|d]" v66|d v65|d [182, 187[182 MustHaveRegister 184 MustHaveRegister 186 ShouldHaveRegister  "NoSpillStore"
  v67|d DWORD "[r8|d]" v67|d v66|d [184, 186[184 MustHaveRegister 186 MustHaveRegister  "NoSpillStore"
  v68|d DWORD "[r8|d]" v68|d v67|d [186, 190[186 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v69|d DWORD "[rax|d]" v69|d -1 [188, 190[188 MustHaveRegister 190 ShouldHaveRegister  "NoSpillStore"
  v70|d DWORD "[r8|d]" v70|d v68|d [190, 195[190 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v71|d DWORD "[rax|d]" v71|d -1 [192, 195[192 MustHaveRegister 194 ShouldHaveRegister  "NoSpillStore"
  v72|d DWORD "[r8|d]" v72|d v30|d [200, 209[[218, 221[206 MustHaveRegister 208 ShouldHaveRegister 220 ShouldHaveRegister  "NoSpillStore"
  v73|d DWORD "[r11|d]" v73|d v31|d [200, 214[202 ShouldHaveRegister 210 MustHaveRegister 214 ShouldHaveRegister  "NoSpillStore"
  v74|d DWORD "[r10|d]" v74|d v72|d [206, 208[206 MustHaveRegister 208 MustHaveRegister  "NoSpillStore"
  v75|d DWORD "[r10|d]" v75|d v74|d [208, 212[208 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v76|d DWORD "[r8|d]" v76|d -1 [210, 212[210 MustHaveRegister 212 ShouldHaveRegister  "NoSpillStore"
  v77|d DWORD "[r10|d]" v77|d v75|d [212, 217[212 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v78|d DWORD "[r11|d]" v78|d v73|d [214, 217[214 MustHaveRegister 216 ShouldHaveRegister  "NoSpillStore"
  v79|d DWORD "[r10|d]" v79|d -1 [244, 246[246 MustHaveRegister  "NoSpillStore"
  v80|q QWORD "[r11|q]" v80|q -1 [244, 248[248 MustHaveRegister  "NoSpillStore"
  v81|d DWORD "[r8|d]" v81|d v72|d [222, 224[224 ShouldHaveRegister  "NoSpillStore"
  v82|d DWORD "[rax|d]" v4|d v4|d [200, 218[202 MustHaveRegister 217 LiveAtLoopEnd  "SpillInDominator"
  v83|d DWORD "[vstack:0|d]" v4|d v4|d [108, 200[ "SpillInDominator"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   72  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   76  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   78  <|@ instruction [v20|DWORD, v21|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = MOVE input: v25|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr   98  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr  100  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  102  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  104  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction v83|DWORD = MOVE input: v4|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  108  <|@ instruction [v30|DWORD, v31|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  110  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  142  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVE input: v71|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  194  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOVE input: v83|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  198  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  200  <|@ instruction [v72|DWORD, v73|DWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  202  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  204  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  206  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  212  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = MOVE input: v77|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  216  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  220  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  222  <|@ instruction [v81|DWORD] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  224  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr  226  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = MOVE input: v0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  230  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v80|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v80|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v80|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  244  <|@ instruction [v79|DWORD, v80|QWORD] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  246  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr  250  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr    8  <|@ instruction v1|QWORD[.] = MOVE input: rdx|QWORD[.] moveKind: QWORD <|@ <|@
      nr   10  <|@ instruction v2|DWORD = MOVE input: rcx|DWORD moveKind: DWORD <|@ <|@
      nr   12  <|@ instruction v3|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr   14  <|@ instruction v4|DWORD = ADD (x: v2|DWORD, y: v3|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v2|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction v5|DWORD = MOV input: [v1|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = INC value: v2|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v6|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction v7|QWORD = MOVSXD value: v6|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction v8|DWORD = SUB (x: v4|DWORD, ~y: v6|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction v9|QWORD = MOVSXD value: v8|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction v10|QWORD = ADD (x: v7|QWORD, y: v9|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction v11|QWORD = DEC value: v10|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction v12|QWORD = MOVE input: v5|DWORD moveKind: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: v12|QWORD, y: v11|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v6|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: v5|DWORD, y: v2|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction v13|QWORD = MOV value: v2|DWORD size: DWORD <|@ <|@
      nr   62  <|@ instruction v14|DWORD = SHL x: v0|DWORD y: 5 size: DWORD <|@ <|@
      nr   64  <|@ instruction v15|DWORD = SUB (x: v14|DWORD, ~y: v0|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction v16|DWORD = MOVZXB input: [v1|QWORD[.] + v13|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   68  <|@ instruction v17|DWORD = ADD (x: v15|DWORD, y: v16|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction v18|DWORD = LEA address: [v2|DWORD + 2] size: DWORD <|@ <|@
      nr   72  <|@ instruction CMP (x: v4|DWORD, y: v18|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction v19|DWORD = CMOVE (falseValue: v4|DWORD, ~trueValue: v18|DWORD) condition: > <|@ <|@
      nr   76  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: v19|DWORD, y: v20|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction v22|DWORD = SHL x: v21|DWORD y: 5 size: DWORD <|@ <|@
      nr   86  <|@ instruction v23|DWORD = SUB (x: v22|DWORD, ~y: v21|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction v24|DWORD = MOVZXB input: [v1|QWORD[.] + v20|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   90  <|@ instruction v25|DWORD = ADD (x: v23|DWORD, y: v24|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction v26|DWORD = INC value: v20|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v21|DWORD = MOVE input: v25|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr   98  <|@ instruction v27|DWORD = LEA address: [v4|DWORD - 8] size: DWORD <|@ <|@
      nr  100  <|@ instruction CMP x: v4|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  102  <|@ instruction v29|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  104  <|@ instruction v28|DWORD = CMOVE (falseValue: v27|DWORD, ~trueValue: v29|DWORD) condition: < <|@ <|@
      nr   -1  <|@ instruction <deleted> <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  110  <|@ instruction CMPBRANCH (x: v28|DWORD, y: v31|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction v32|DWORD = MOVZXB input: [v1|QWORD[.] + v31|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction v33|DWORD = INC value: v31|DWORD size: DWORD <|@ <|@
      nr  118  <|@ instruction v34|DWORD = MOVZXB input: [v1|QWORD[.] + v33|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  120  <|@ instruction v35|DWORD = LEA address: [v31|DWORD + 2] size: DWORD <|@ <|@
      nr  122  <|@ instruction v36|DWORD = MOVZXB input: [v1|QWORD[.] + v35|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction v37|DWORD = LEA address: [v31|DWORD + 3] size: DWORD <|@ <|@
      nr  126  <|@ instruction v38|DWORD = MOVZXB input: [v1|QWORD[.] + v37|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction v39|DWORD = LEA address: [v31|DWORD + 4] size: DWORD <|@ <|@
      nr  130  <|@ instruction v40|DWORD = MOVZXB input: [v1|QWORD[.] + v39|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction v41|DWORD = LEA address: [v31|DWORD + 5] size: DWORD <|@ <|@
      nr  134  <|@ instruction v42|DWORD = MOVZXB input: [v1|QWORD[.] + v41|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction v43|DWORD = LEA address: [v31|DWORD + 6] size: DWORD <|@ <|@
      nr  138  <|@ instruction v44|DWORD = MOVZXB input: [v1|QWORD[.] + v43|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction v45|DWORD = LEA address: [v31|DWORD + 7] size: DWORD <|@ <|@
      nr  142  <|@ instruction v46|DWORD = SHL x: v30|DWORD y: 5 size: DWORD <|@ <|@
      nr  144  <|@ instruction v47|DWORD = SUB (x: v46|DWORD, ~y: v30|DWORD) size: DWORD <|@ <|@
      nr  146  <|@ instruction v48|DWORD = ADD (x: v47|DWORD, y: v32|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction v49|DWORD = SHL x: v48|DWORD y: 5 size: DWORD <|@ <|@
      nr  150  <|@ instruction v50|DWORD = SUB (x: v49|DWORD, ~y: v48|DWORD) size: DWORD <|@ <|@
      nr  152  <|@ instruction v51|DWORD = ADD (x: v50|DWORD, y: v34|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction v52|DWORD = SHL x: v51|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction v53|DWORD = SUB (x: v52|DWORD, ~y: v51|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction v54|DWORD = ADD (x: v53|DWORD, y: v36|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction v55|DWORD = SHL x: v54|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction v56|DWORD = SUB (x: v55|DWORD, ~y: v54|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction v57|DWORD = ADD (x: v56|DWORD, y: v38|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction v58|DWORD = SHL x: v57|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction v59|DWORD = SUB (x: v58|DWORD, ~y: v57|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction v60|DWORD = ADD (x: v59|DWORD, y: v40|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction v61|DWORD = SHL x: v60|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction v62|DWORD = SUB (x: v61|DWORD, ~y: v60|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction v63|DWORD = ADD (x: v62|DWORD, y: v42|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction v64|DWORD = SHL x: v63|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction v65|DWORD = SUB (x: v64|DWORD, ~y: v63|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction v66|DWORD = ADD (x: v65|DWORD, y: v44|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction v67|DWORD = SHL x: v66|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction v68|DWORD = SUB (x: v67|DWORD, ~y: v66|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction v69|DWORD = MOVZXB input: [v1|QWORD[.] + v45|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction v70|DWORD = ADD (x: v68|DWORD, y: v69|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction v71|DWORD = LEA address: [v31|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v31|DWORD = MOVE input: v71|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  194  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v82|DWORD = MOVE input: v83|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  198  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  200  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  202  <|@ instruction CMPBRANCH (x: v4|DWORD, y: v73|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  204  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  206  <|@ instruction v74|DWORD = SHL x: v72|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction v75|DWORD = SUB (x: v74|DWORD, ~y: v72|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction v76|DWORD = MOVZXB input: [v1|QWORD[.] + v73|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  212  <|@ instruction v77|DWORD = ADD (x: v75|DWORD, y: v76|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction v78|DWORD = INC value: v73|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction v72|DWORD = MOVE input: v77|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  216  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  220  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  224  <|@ instruction rax|DWORD = MOVE input: v81|DWORD moveKind: DWORD <|@ <|@
      nr  226  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v81|DWORD = MOVE input: v0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  230  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v80|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v80|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v80|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v79|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  244  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  246  <|@ instruction MOV (x: [r15|QWORD + 1156], y: v79|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction MOV (x: [r15|QWORD + 1168], y: v80|QWORD) size: QWORD <|@ <|@
      nr  250  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: v0|DWORD v1|QWORD[.] v2|DWORD v3|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   62  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   64  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   68  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   72  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   76  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   86  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   90  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr   98  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  100  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  102  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  104  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  110  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  120  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  122  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  126  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  130  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  144  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  146  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  150  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  152  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  194  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: vstack:0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  198  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  200  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  202  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  204  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  212  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  216  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  220  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  224  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  226  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  230  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  244  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  246  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  250  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr   14  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   22  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   24  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   30  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   32  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   34  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   36  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   38  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   40  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   42  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   44  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   46  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   48  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   54  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   56  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   62  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   64  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   66  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   68  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   70  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   72  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   76  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   78  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   80  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   82  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   84  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   86  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   88  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   90  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr   92  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -2  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD // LSRAOptimizeSpillPos: optimize spill pos <|@ <|@
      nr   98  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  100  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  102  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  104  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  110  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  112  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  116  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  118  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  120  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  122  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  124  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  126  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  130  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  138  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  142  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  144  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  146  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  148  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  150  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  152  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  190  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr   -1  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  194  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  196  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: vstack:0|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  198  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  200  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  202  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  204  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  206  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  208  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  210  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  212  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  214  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  216  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  218  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  220  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  222  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  224  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  226  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  228  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD // MoveResolver resolve mapping <|@ <|@
      nr  230  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  232  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] // MoveResolver resolve mapping <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] // MoveResolver resolve mapping <|@ <|@
      nr  242  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  244  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  246  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  248  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  250  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackSlot numbering"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction vstack:0|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: vstack:0|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_intervals
  name "Before stack slot allocation"
  vstack:0|d DWORD "[vstack:0|d]" vstack:0|d -1 [108, 212[ "NOT_SUPPORTED"
end_intervals
begin_intervals
  name "After stack slot allocation"
  vstack:0|d DWORD "[stack:28|d]" vstack:0|d -1 [108, 212[ "NOT_SUPPORTED"
end_intervals
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B7" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B4" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B4 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B8" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   38  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   40  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B7" "B4" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B18" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B18 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B18"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B22" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  236  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  238  <|@ instruction JUMP ~outgoingValues: [] destination: B18 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B18" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B21" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr    8  <|@ instruction CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B8" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   10  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   12  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0] <|@ <|@
      nr   14  <|@ instruction r11|DWORD = INC value: rcx|DWORD size: DWORD <|@ <|@
      nr   16  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B1" "B3" 
    successors "B9" "B19" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   62  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   64  <|@ instruction CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B10" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr   66  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   68  <|@ instruction r10|QWORD = MOV value: rcx|DWORD size: DWORD <|@ <|@
      nr   70  <|@ instruction r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD <|@ <|@
      nr   72  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD <|@ <|@
      nr   74  <|@ instruction r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD <|@ <|@
      nr   76  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   78  <|@ instruction r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD <|@ <|@
      nr   80  <|@ instruction CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD <|@ <|@
      nr   82  <|@ instruction r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: > <|@ <|@
      nr   84  <|@ instruction JUMP ~outgoingValues: [] destination: B9 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B11"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B10" 
    xhandlers
    flags "lle" 
    loop_index 0
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr   90  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr   92  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr   94  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr   96  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr   98  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  100  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  102  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B11 -> B10 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B10"
    from_bci -1
    to_bci -1
    predecessors "B9" "B11" 
    successors "B11" "B12" 
    xhandlers
    flags "llh" 
    loop_index 0
    loop_depth 1
    probability 4606559621112054304
    begin_IR
      LIR
      nr   86  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr   88  <|@ instruction CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B12"
    from_bci -1
    to_bci -1
    predecessors "B10" 
    successors "B13" 
    xhandlers
    flags 
    probability 4606475777096386525
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  110  <|@ instruction r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD <|@ <|@
      nr  112  <|@ instruction CMP x: rax|DWORD y: -2147483640 size: DWORD <|@ <|@
      nr  114  <|@ instruction r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000] <|@ <|@
      nr  116  <|@ instruction r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: < <|@ <|@
      nr  118  <|@ instruction JUMP ~outgoingValues: [] destination: B12 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B14"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B13" 
    xhandlers
    flags "lle" 
    loop_index 1
    loop_depth 1
    probability 4601446102556829220
    begin_IR
      LIR
      nr  124  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  126  <|@ instruction r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  128  <|@ instruction rcx|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  130  <|@ instruction rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  132  <|@ instruction rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD <|@ <|@
      nr  134  <|@ instruction rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  136  <|@ instruction rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD <|@ <|@
      nr  138  <|@ instruction rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  140  <|@ instruction rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD <|@ <|@
      nr  142  <|@ instruction rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  144  <|@ instruction rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD <|@ <|@
      nr  146  <|@ instruction rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  148  <|@ instruction r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD <|@ <|@
      nr  150  <|@ instruction r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  152  <|@ instruction r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD <|@ <|@
      nr  154  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  156  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  158  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD <|@ <|@
      nr  160  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  162  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  164  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD <|@ <|@
      nr  166  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  168  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  170  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD <|@ <|@
      nr  172  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  174  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  176  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD <|@ <|@
      nr  178  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  180  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  182  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD <|@ <|@
      nr  184  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  186  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  188  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD <|@ <|@
      nr  190  <|@ instruction rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  192  <|@ instruction rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  194  <|@ instruction rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD <|@ <|@
      nr  196  <|@ instruction r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD <|@ <|@
      nr  198  <|@ instruction r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD <|@ <|@
      nr  200  <|@ instruction rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  202  <|@ instruction r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD <|@ <|@
      nr  204  <|@ instruction rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD <|@ <|@
      nr  206  <|@ instruction r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  208  <|@ instruction JUMP ~outgoingValues: [] destination: B14 -> B13 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B13"
    from_bci -1
    to_bci -1
    predecessors "B12" "B14" 
    successors "B14" "B15" 
    xhandlers
    flags "llh" 
    loop_index 1
    loop_depth 1
    probability 4608772718607932791
    begin_IR
      LIR
      nr  120  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  122  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B15"
    from_bci -1
    to_bci -1
    predecessors "B13" 
    successors "B16" 
    xhandlers
    flags 
    probability 4606475777096386524
    begin_IR
      LIR
      nr  210  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  212  <|@ instruction rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD <|@ <|@
      nr  214  <|@ instruction JUMP ~outgoingValues: [] destination: B15 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B17"
    from_bci -1
    to_bci -1
    predecessors "B16" 
    successors "B16" 
    xhandlers
    flags "lle" 
    loop_index 2
    loop_depth 1
    probability 4576519638783791288
    begin_IR
      LIR
      nr  220  <|@ instruction [] = LABEL alignment: 16 numbPhis: 0 label: ? <|@ <|@
      nr  222  <|@ instruction r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD <|@ <|@
      nr  224  <|@ instruction r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD <|@ <|@
      nr  226  <|@ instruction r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD <|@ <|@
      nr  228  <|@ instruction r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD <|@ <|@
      nr  230  <|@ instruction r11|DWORD = INC value: r11|DWORD size: DWORD <|@ <|@
      nr  232  <|@ instruction r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr  234  <|@ instruction JUMP ~outgoingValues: [] destination: B17 -> B16 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B16"
    from_bci -1
    to_bci -1
    predecessors "B15" "B17" 
    successors "B17" "B22" 
    xhandlers
    flags "llh" 
    loop_index 2
    loop_depth 1
    probability 4606559621112054303
    begin_IR
      LIR
      nr  216  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  218  <|@ instruction CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B22"
    from_bci -1
    to_bci -1
    predecessors "B16" "B21" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017407
    begin_IR
      LIR
      nr  262  <|@ instruction [] = LABEL alignment: 0 numbPhis: 1 label: ? <|@ <|@
      nr  264  <|@ instruction rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD <|@ <|@
      nr  266  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B6" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   18  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   20  <|@ instruction r9|QWORD = MOVSXD value: r11|DWORD size: QWORD <|@ <|@
      nr   22  <|@ instruction rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD <|@ <|@
      nr   24  <|@ instruction rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD <|@ <|@
      nr   26  <|@ instruction r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD <|@ <|@
      nr   28  <|@ instruction r9|QWORD = DEC value: r9|QWORD size: QWORD <|@ <|@
      nr   30  <|@ instruction rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B8" "B5" 
    xhandlers
    flags 
    probability 4601972177469016029
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B21"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B22" 
    xhandlers
    flags 
    probability 4590317554292211992
    begin_IR
      LIR
      nr  256  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  258  <|@ instruction r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD <|@ <|@
      nr  260  <|@ instruction JUMP ~outgoingValues: [] destination: B21 -> B22 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B20"
    from_bci -1
    to_bci -1
    predecessors "B6" "B19" "B5" 
    successors 
    xhandlers
    flags 
    probability 2362138004555825152
    begin_IR
      LIR
      nr  248  <|@ instruction [] = LABEL alignment: 0 numbPhis: 2 label: ? <|@ <|@
      nr  250  <|@ instruction MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD <|@ <|@
      nr  252  <|@ instruction MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD <|@ <|@
      nr  254  <|@ st <@st|@reference-map: [rdx:0]
live-base-pointers: []
jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0]
locals: rsi|DWORD rdx|QWORD[.] rcx|DWORD r8|DWORD - - 
>@ <|@ instruction DEOPT info [bci:0] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B19"
    from_bci -1
    to_bci -1
    predecessors "B8" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  240  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  242  <|@ instruction r11|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  244  <|@ instruction r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5] <|@ <|@
      nr  246  <|@ instruction JUMP ~outgoingValues: [] destination: B19 -> B20 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B3" 
    successors "B20" 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction r11|QWORD = MOVE input: long[24|0x18] <|@ <|@
      nr   46  <|@ instruction r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5] <|@ <|@
      nr   48  <|@ instruction JUMP ~outgoingValues: [] destination: B5 -> B20 <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: iload_2       
     1: iload_3       
     2: iadd          
     3: istore        4
     5: iload_2       
     6: istore        5
     8: iload         5
    10: iload         4
    12: if_icmpge     35
    15: bipush        31
    17: iload_0       
    18: imul          
    19: aload_1       
    20: iload         5
    22: baload        
    23: sipush        255
    26: iand          
    27: iadd          
    28: istore_0      
    29: iinc          
    32: goto          8
    35: iload_0       
    36: ireturn       
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 89842400c0feff4883ec189041817f20000000000f853702000048896c24108bc14103c03bc10f8ed9010000448b520c448bd941ffc3413bc30f8f9901000090443bd10f86e9010000448bd1448bc641c1e005442bc6460fb65412104503c2448d5102413bc2448bc8450f4fcae92700000066660f1f84000000000066666690458bd041c1e205452bd0460fb6441a104503d041ffc3458bc2453bcb7fe289442404448d50f881f80800008041b900000080450f4cd1e9b60000000f1f440000460fb64c1a10418bcbffc10fb64c0a10418d5b020fb65c1a10418d7b030fb67c3a10418d73040fb6743210418d6b050fb66c2a10458d6b06460fb66c2a10458d7307418bc0c1e005412bc04103c1448bc041c1e005442bc04403c1418bc0c1e005412bc003c3448bc041c1e005442bc04403c7418bc0c1e005412bc003c6448bc041c1e005442bc04403c5418bc0c1e005412bc04103c5448bc041c1e005442bc0420fb64432104403c0418d4308448bd8453bd30f8f46ffffff8b4424046690e9340000006666660f1f840000000000666666900f1f84000000000066666690458bd041c1e205452bd0460fb6441a104503d041ffc3458bc2413bc37fe2418bc0488b6c24104883c418493ba7500400000f878a000000c34d63cb8bd8412bdb4863db4c03cb49ffc9418bda493bd90f8615000000453bd30f8741feffff6690e93d000000448bc6ebb449c7c31800000041bae5b6ffff458997840400004d899f90040000e8000000000f1f84000000000049c7c30000000041bae5c2ffff90ebd549c7c31800000041bae5b6ffffebc648896c2410e800000000e9bafdfffff4488d0d62ffffff49898f68040000e98cfdfffff441c78784040000f5c8ffff49c7879004000000000000e8000000000f1f840000000000e800000000f46690e800000000f4  <||@
  Comment 0 [stack overflow check]  <||@
  Comment 0 VERIFIED_ENTRY  <||@
  Comment 12 FRAME_COMPLETE  <||@
  Comment 12 ENTRY_BARRIER_PATCH  <||@
  Comment 26 block B0 null  <||@
  Comment 26 0 [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 26 2 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 31 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD  <||@
  Comment 31 6 rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 36 8 CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD  <||@
  Comment 44 block B1 null  <||@
  Comment 44 10 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 44 12 r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0]  <||@
  Comment 44 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 44 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 48 14 r11|DWORD = INC value: rcx|DWORD size: DWORD  <||@
  Comment 54 16 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD  <||@
  Comment 63 block B8 null  <||@
  Comment 63 62 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 63 64 CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD  <||@
  Comment 73 block B9 null  <||@
  Comment 73 66 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 73 68 r10|QWORD = MOV value: rcx|DWORD size: DWORD  <||@
  Comment 76 70 r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD  <||@
  Comment 83 72 r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD  <||@
  Comment 86 74 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD  <||@
  Comment 92 76 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 95 78 r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD  <||@
  Comment 99 80 CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 102 82 r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: >  <||@
  Comment 109 84 JUMP ~outgoingValues: [] destination: B9 -> B10  <||@
  Comment 114 block B11 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 114 90 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 128 92 r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 135 94 r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 138 96 r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 144 98 r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 147 100 r11|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 150 102 r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 153 104 JUMP ~outgoingValues: [] destination: B11 -> B10  <||@
  Comment 153 block B10 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 153 86 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 153 88 CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD  <||@
  Comment 158 block B12 null  <||@
  Comment 158 106 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 158 108 stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD  <||@
  Comment 162 110 r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD  <||@
  Comment 166 112 CMP x: rax|DWORD y: -2147483640 size: DWORD  <||@
  Comment 172 114 r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000]  <||@
  Comment 178 116 r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: <  <||@
  Comment 182 118 JUMP ~outgoingValues: [] destination: B12 -> B13  <||@
  Comment 187 block B14 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 187 124 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 192 126 r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 198 128 rcx|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 203 130 rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 208 132 rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD  <||@
  Comment 212 134 rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 217 136 rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD  <||@
  Comment 221 138 rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 226 140 rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD  <||@
  Comment 230 142 rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 235 144 rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD  <||@
  Comment 239 146 rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD  <||@
  Comment 244 148 r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD  <||@
  Comment 248 150 r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD  <||@
  Comment 254 152 r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD  <||@
  Comment 258 154 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 264 156 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 267 158 rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 270 160 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 277 162 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 280 164 r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD  <||@
  Comment 283 166 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 289 168 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 292 170 rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 294 172 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 301 174 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 304 176 r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD  <||@
  Comment 307 178 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 313 180 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 316 182 rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD  <||@
  Comment 318 184 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 325 186 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 328 188 r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD  <||@
  Comment 331 190 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 337 192 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 340 194 rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD  <||@
  Comment 343 196 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 350 198 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 353 200 rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD  <||@
  Comment 359 202 r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 362 204 rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD  <||@
  Comment 366 206 r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD  <||@
  Comment 369 208 JUMP ~outgoingValues: [] destination: B14 -> B13  <||@
  Comment 369 block B13 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 369 120 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 369 122 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD  <||@
  Comment 378 block B15 null  <||@
  Comment 378 210 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 378 212 rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 382 214 JUMP ~outgoingValues: [] destination: B15 -> B16  <||@
  Comment 389 block B17 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 389 220 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 416 222 r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 423 224 r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 426 226 r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 432 228 r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 435 230 r11|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 438 232 r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 441 234 JUMP ~outgoingValues: [] destination: B17 -> B16  <||@
  Comment 441 block B16 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 441 216 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 441 218 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD  <||@
  Comment 446 block B22 null  <||@
  Comment 446 262 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 446 264 rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD  <||@
  Comment 449 266 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07  <||@
  Comment 458 POLL_RETURN_FAR  <||@
  Comment 472 block B2 null  <||@
  Comment 472 18 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 472 20 r9|QWORD = MOVSXD value: r11|DWORD size: QWORD  <||@
  Comment 475 22 rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 480 24 rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD  <||@
  Comment 483 26 r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD  <||@
  Comment 486 28 r9|QWORD = DEC value: r9|QWORD size: QWORD  <||@
  Comment 489 30 rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 492 32 CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD  <||@
  Comment 501 block B3 null  <||@
  Comment 501 34 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 501 36 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD  <||@
  Comment 517 block B21 null  <||@
  Comment 517 256 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 517 258 r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD  <||@
  Comment 520 260 JUMP ~outgoingValues: [] destination: B21 -> B22  <||@
  Comment 522 block B6 null  <||@
  Comment 522 50 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 522 52 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 529 54 r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 535 56 JUMP ~outgoingValues: [] destination: B6 -> B20  <||@
  Comment 535 block B20 null  <||@
  Comment 535 248 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 535 250 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 542 252 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 549 254 DEOPT info [bci:0]  <||@
  Comment 549 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 554 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 562 block B19 null  <||@
  Comment 562 240 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 562 242 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 569 244 r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5]  <||@
  Comment 575 246 JUMP ~outgoingValues: [] destination: B19 -> B20  <||@
  Comment 578 block B5 null  <||@
  Comment 578 42 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 578 44 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 585 46 r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 591 48 JUMP ~outgoingValues: [] destination: B5 -> B20  <||@
  Comment 598 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f8ae4233598, value=140234155311648]:0x7f8acf034220}  <||@
  Comment 623 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f8ae42335a0, value=140234155446272]:0x7f8acf055000}  <||@
  Comment 651 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 656 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 664 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f8acf0b4500:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 664 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 672 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f8ae42335b8, value=140234155441952]:0x7f8acf053f20}  <||@
  Comment 672 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-75[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  method "HotSpotCompilation-75[jdk.internal.util.ArraysSupport.signedHashCode(int, byte[], int, int)]"
  date 1740398975159
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7f8acf0bf280 89842400c0feff4883ec189041817f20000000000f853702000048896c24108bc14103c03bc10f8ed9010000448b520c448bd941ffc3413bc30f8f9901000090443bd10f86e9010000448bd1448bc641c1e005442bc6460fb65412104503c2448d5102413bc2448bc8450f4fcae92700000066660f1f84000000000066666690458bd041c1e205452bd0460fb6441a104503d041ffc3458bc2453bcb7fe289442404448d50f881f80800008041b900000080450f4cd1e9b60000000f1f440000460fb64c1a10418bcbffc10fb64c0a10418d5b020fb65c1a10418d7b030fb67c3a10418d73040fb6743210418d6b050fb66c2a10458d6b06460fb66c2a10458d7307418bc0c1e005412bc04103c1448bc041c1e005442bc04403c1418bc0c1e005412bc003c3448bc041c1e005442bc04403c7418bc0c1e005412bc003c6448bc041c1e005442bc04403c5418bc0c1e005412bc04103c5448bc041c1e005442bc0420fb64432104403c0418d4308448bd8453bd30f8f46ffffff8b4424046690e9340000006666660f1f840000000000666666900f1f84000000000066666690458bd041c1e205452bd0460fb6441a104503d041ffc3458bc2413bc37fe2418bc0488b6c24104883c418493ba7500400000f878a000000c34d63cb8bd8412bdb4863db4c03cb49ffc9418bda493bd90f8615000000453bd30f8741feffff6690e93d000000448bc6ebb449c7c31800000041bae5b6ffff458997840400004d899f90040000e8d04cf9ff0f1f84000000000049c7c30000000041bae5c2ffff90ebd549c7c31800000041bae5b6ffffebc648896c2410e8454df7ffe9bafdfffff4488d0d62ffffff49898f68040000e90c5bf9fff441c78784040000f5c8ffff49c7879004000000000000e86a4cf9ff0f1f840000000000e8e34ffffff46690e8fb49f9fff4f4f4  <||@
  Comment 0 [stack overflow check]  <||@
  Comment 0 VERIFIED_ENTRY  <||@
  Comment 12 FRAME_COMPLETE  <||@
  Comment 12 ENTRY_BARRIER_PATCH  <||@
  Comment 26 block B0 null  <||@
  Comment 26 0 [rsi|DWORD, rdx|QWORD[.], rcx|DWORD, r8|DWORD, rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 26 2 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 31 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@848e70 slotKind: QWORD  <||@
  Comment 31 6 rax|DWORD = ADD (x: rcx|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 36 8 CMPBRANCH (x: rax|DWORD, y: rcx|DWORD) trueDestinationProbability: 0.9215470110468648 condition: > trueDestination: B0 -> B1 falseDestination: B0 -> B21 size: DWORD  <||@
  Comment 44 block B1 null  <||@
  Comment 44 10 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 44 12 r10|DWORD = MOV input: [rdx|QWORD[.] + 12] size: DWORD state [bci:0]  <||@
  Comment 44 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 44 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 48 14 r11|DWORD = INC value: rcx|DWORD size: DWORD  <||@
  Comment 54 16 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.5 condition: > trueDestination: B1 -> B2 falseDestination: B1 -> B8 size: DWORD  <||@
  Comment 63 block B8 null  <||@
  Comment 63 62 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 63 64 CMPBRANCH (x: r10|DWORD, y: rcx|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B8 -> B9 falseDestination: B8 -> B19 size: DWORD  <||@
  Comment 73 block B9 null  <||@
  Comment 73 66 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 73 68 r10|QWORD = MOV value: rcx|DWORD size: DWORD  <||@
  Comment 76 70 r8|DWORD = SHL x: rsi|DWORD y: 5 size: DWORD  <||@
  Comment 83 72 r8|DWORD = SUB (x: r8|DWORD, ~y: rsi|DWORD) size: DWORD  <||@
  Comment 86 74 r10|DWORD = MOVZXB input: [rdx|QWORD[.] + r10|QWORD * 1 + 16] size: DWORD  <||@
  Comment 92 76 r8|DWORD = ADD (x: r8|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 95 78 r10|DWORD = LEA address: [rcx|DWORD + 2] size: DWORD  <||@
  Comment 99 80 CMP (x: rax|DWORD, y: r10|DWORD) size: DWORD  <||@
  Comment 102 82 r9|DWORD = CMOVE (falseValue: rax|DWORD, ~trueValue: r10|DWORD) condition: >  <||@
  Comment 109 84 JUMP ~outgoingValues: [] destination: B9 -> B10  <||@
  Comment 114 block B11 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 114 90 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 128 92 r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 135 94 r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 138 96 r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 144 98 r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 147 100 r11|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 150 102 r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 153 104 JUMP ~outgoingValues: [] destination: B11 -> B10  <||@
  Comment 153 block B10 loop 0 depth 1 header:9|LoopBegin  <||@
  Comment 153 86 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 153 88 CMPBRANCH (x: r9|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B10 -> B11 falseDestination: B10 -> B12 size: DWORD  <||@
  Comment 158 block B12 null  <||@
  Comment 158 106 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 158 108 stack:28|DWORD = MOVE input: rax|DWORD moveKind: DWORD  <||@
  Comment 162 110 r10|DWORD = LEA address: [rax|DWORD - 8] size: DWORD  <||@
  Comment 166 112 CMP x: rax|DWORD y: -2147483640 size: DWORD  <||@
  Comment 172 114 r9|DWORD = MOVE input: int[-2147483648|0xffffffff80000000]  <||@
  Comment 178 116 r10|DWORD = CMOVE (falseValue: r10|DWORD, ~trueValue: r9|DWORD) condition: <  <||@
  Comment 182 118 JUMP ~outgoingValues: [] destination: B12 -> B13  <||@
  Comment 187 block B14 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 187 124 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 192 126 r9|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 198 128 rcx|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 203 130 rcx|DWORD = MOVZXB input: [rdx|QWORD[.] + rcx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 208 132 rbx|DWORD = LEA address: [r11|DWORD + 2] size: DWORD  <||@
  Comment 212 134 rbx|DWORD = MOVZXB input: [rdx|QWORD[.] + rbx|DWORD * 1 + 16] size: DWORD  <||@
  Comment 217 136 rdi|DWORD = LEA address: [r11|DWORD + 3] size: DWORD  <||@
  Comment 221 138 rdi|DWORD = MOVZXB input: [rdx|QWORD[.] + rdi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 226 140 rsi|DWORD = LEA address: [r11|DWORD + 4] size: DWORD  <||@
  Comment 230 142 rsi|DWORD = MOVZXB input: [rdx|QWORD[.] + rsi|DWORD * 1 + 16] size: DWORD  <||@
  Comment 235 144 rbp|DWORD = LEA address: [r11|DWORD + 5] size: DWORD  <||@
  Comment 239 146 rbp|DWORD = MOVZXB input: [rdx|QWORD[.] + rbp|DWORD * 1 + 16] size: DWORD  <||@
  Comment 244 148 r13|DWORD = LEA address: [r11|DWORD + 6] size: DWORD  <||@
  Comment 248 150 r13|DWORD = MOVZXB input: [rdx|QWORD[.] + r13|DWORD * 1 + 16] size: DWORD  <||@
  Comment 254 152 r14|DWORD = LEA address: [r11|DWORD + 7] size: DWORD  <||@
  Comment 258 154 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 264 156 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 267 158 rax|DWORD = ADD (x: rax|DWORD, y: r9|DWORD) size: DWORD  <||@
  Comment 270 160 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 277 162 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 280 164 r8|DWORD = ADD (x: r8|DWORD, y: rcx|DWORD) size: DWORD  <||@
  Comment 283 166 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 289 168 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 292 170 rax|DWORD = ADD (x: rax|DWORD, y: rbx|DWORD) size: DWORD  <||@
  Comment 294 172 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 301 174 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 304 176 r8|DWORD = ADD (x: r8|DWORD, y: rdi|DWORD) size: DWORD  <||@
  Comment 307 178 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 313 180 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 316 182 rax|DWORD = ADD (x: rax|DWORD, y: rsi|DWORD) size: DWORD  <||@
  Comment 318 184 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 325 186 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 328 188 r8|DWORD = ADD (x: r8|DWORD, y: rbp|DWORD) size: DWORD  <||@
  Comment 331 190 rax|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 337 192 rax|DWORD = SUB (x: rax|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 340 194 rax|DWORD = ADD (x: rax|DWORD, y: r13|DWORD) size: DWORD  <||@
  Comment 343 196 r8|DWORD = SHL x: rax|DWORD y: 5 size: DWORD  <||@
  Comment 350 198 r8|DWORD = SUB (x: r8|DWORD, ~y: rax|DWORD) size: DWORD  <||@
  Comment 353 200 rax|DWORD = MOVZXB input: [rdx|QWORD[.] + r14|DWORD * 1 + 16] size: DWORD  <||@
  Comment 359 202 r8|DWORD = ADD (x: r8|DWORD, y: rax|DWORD) size: DWORD  <||@
  Comment 362 204 rax|DWORD = LEA address: [r11|DWORD + 8] size: DWORD  <||@
  Comment 366 206 r11|DWORD = MOVE input: rax|DWORD moveKind: DWORD  <||@
  Comment 369 208 JUMP ~outgoingValues: [] destination: B14 -> B13  <||@
  Comment 369 block B13 loop 1 depth 1 header:117|LoopBegin  <||@
  Comment 369 120 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 369 122 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 0.31894531249999947 condition: > trueDestination: B13 -> B14 falseDestination: B13 -> B15 size: DWORD  <||@
  Comment 378 block B15 null  <||@
  Comment 378 210 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 378 212 rax|DWORD = MOVE input: stack:28|DWORD moveKind: DWORD  <||@
  Comment 382 214 JUMP ~outgoingValues: [] destination: B15 -> B16  <||@
  Comment 389 block B17 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 389 220 [] = LABEL alignment: 32 numbPhis: 0 label: ?  <||@
  Comment 416 222 r10|DWORD = SHL x: r8|DWORD y: 5 size: DWORD  <||@
  Comment 423 224 r10|DWORD = SUB (x: r10|DWORD, ~y: r8|DWORD) size: DWORD  <||@
  Comment 426 226 r8|DWORD = MOVZXB input: [rdx|QWORD[.] + r11|DWORD * 1 + 16] size: DWORD  <||@
  Comment 432 228 r10|DWORD = ADD (x: r10|DWORD, y: r8|DWORD) size: DWORD  <||@
  Comment 435 230 r11|DWORD = INC value: r11|DWORD size: DWORD  <||@
  Comment 438 232 r8|DWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 441 234 JUMP ~outgoingValues: [] destination: B17 -> B16  <||@
  Comment 441 block B16 loop 2 depth 1 header:140|LoopBegin  <||@
  Comment 441 216 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 441 218 CMPBRANCH (x: rax|DWORD, y: r11|DWORD) trueDestinationProbability: 0.01 condition: > trueDestination: B16 -> B17 falseDestination: B16 -> B22 size: DWORD  <||@
  Comment 446 block B22 null  <||@
  Comment 446 262 [] = LABEL alignment: 0 numbPhis: 1 label: ?  <||@
  Comment 446 264 rax|DWORD = MOVE input: r8|DWORD moveKind: DWORD  <||@
  Comment 449 266 RETURN (savedRbp: stack:16|QWORD, value: rax|DWORD) isStub: false requiresReservedStackAccessCheck: false thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07  <||@
  Comment 458 POLL_RETURN_FAR  <||@
  Comment 472 block B2 null  <||@
  Comment 472 18 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 472 20 r9|QWORD = MOVSXD value: r11|DWORD size: QWORD  <||@
  Comment 475 22 rbx|DWORD = SUB (x: rax|DWORD, ~y: r11|DWORD) size: DWORD  <||@
  Comment 480 24 rbx|QWORD = MOVSXD value: rbx|DWORD size: QWORD  <||@
  Comment 483 26 r9|QWORD = ADD (x: r9|QWORD, y: rbx|QWORD) size: QWORD  <||@
  Comment 486 28 r9|QWORD = DEC value: r9|QWORD size: QWORD  <||@
  Comment 489 30 rbx|QWORD = MOVE input: r10|DWORD moveKind: DWORD  <||@
  Comment 492 32 CMPBRANCH (x: rbx|QWORD, y: r9|QWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B2 -> B3 falseDestination: B2 -> B6 size: QWORD  <||@
  Comment 501 block B3 null  <||@
  Comment 501 34 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 501 36 CMPBRANCH (x: r10|DWORD, y: r11|DWORD) trueDestinationProbability: 1.0 condition: |>| trueDestination: B3 -> B8 falseDestination: B3 -> B5 size: DWORD  <||@
  Comment 517 block B21 null  <||@
  Comment 517 256 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 517 258 r8|DWORD = MOVE input: rsi|DWORD moveKind: DWORD  <||@
  Comment 520 260 JUMP ~outgoingValues: [] destination: B21 -> B22  <||@
  Comment 522 block B6 null  <||@
  Comment 522 50 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 522 52 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 529 54 r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 535 56 JUMP ~outgoingValues: [] destination: B6 -> B20  <||@
  Comment 535 block B20 null  <||@
  Comment 535 248 [] = LABEL alignment: 0 numbPhis: 2 label: ?  <||@
  Comment 535 250 MOV (x: [r15|QWORD + 1156], y: r10|DWORD) size: DWORD  <||@
  Comment 542 252 MOV (x: [r15|QWORD + 1168], y: r11|QWORD) size: QWORD  <||@
  Comment 549 254 DEOPT info [bci:0]  <||@
  Comment 549 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 554 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 562 block B19 null  <||@
  Comment 562 240 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 562 242 r11|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 569 244 r10|DWORD = MOVE input: int[-15643|0xffffffffffffc2e5]  <||@
  Comment 575 246 JUMP ~outgoingValues: [] destination: B19 -> B20  <||@
  Comment 578 block B5 null  <||@
  Comment 578 42 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 578 44 r11|QWORD = MOVE input: long[24|0x18]  <||@
  Comment 585 46 r10|DWORD = MOVE input: int[-18715|0xffffffffffffb6e5]  <||@
  Comment 591 48 JUMP ~outgoingValues: [] destination: B5 -> B20  <||@
  Comment 598 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f8ae4233598, value=140234155311648]:0x7f8acf034220}  <||@
  Comment 623 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f8ae42335a0, value=140234155446272]:0x7f8acf055000}  <||@
  Comment 651 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 656 [rdx:0]at jdk.internal.util.ArraysSupport.signedHashCode(ArraysSupport.java:215) [bci: 0, duringCall: false, rethrow: false]
              |0          |1             |2          |3         |4  |5 
     locals:  |rsi|DWORD  |rdx|QWORD[.]  |rcx|DWORD  |r8|DWORD  |-  |-   <||@
  Comment 664 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f8acf0b4500:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 664 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 672 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f8ae42335b8, value=140234155441952]:0x7f8acf053f20}  <||@
  Comment 672 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
