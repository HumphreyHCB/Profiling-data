begin_compilation
  name " HotSpotCompilation-131[jdk.internal.misc.InternalLock.lock()]"
  method "HotSpotCompilation-131[jdk.internal.misc.InternalLock.lock()]"
  date 1740398979976
end_compilation
begin_cfg
  name "Final HIR schedule"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a126 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a126  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# jdk.internal.misc.InternalLock
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?2 v137 ?11 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v137 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a126 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a126 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.concurrent.locks.ReentrantLock
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: InternalLock.lock
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 1]
stamp: n java.util.concurrent.locks.ReentrantLock
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v137 
lastLocationAccess: - 
=== Succesors ===
next: a127 
=== Usages ===
v138 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v137 lastLocationAccess: - #next: a127  <|@  <|@
tid ?2 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_0
code: ResolvedJavaMethodBytecode<InternalLock.lock()>
localsSize: 1
locksSize: 0
sourceFile: InternalLock.java
sourceLine: 74
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 
=== Succesors ===
=== Usages ===
v134 a127 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1  <|@  <|@
f <@~|@floating>@ <|@
tid v138 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a126 
=== Succesors ===
=== Usages ===
a127 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a126  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a127 <|@
d <@d|@=== Debug Properties ===
accessStamp: n# java.util.concurrent.locks.ReentrantLock$NonfairSync
barrierType: NONE
deoptReasonAndAction: int[-19467|0xffffffffffffb3f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ReentrantLock.sync
memoryOrder: PLAIN
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 1]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: n# java.util.concurrent.locks.ReentrantLock$NonfairSync
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?2 
guard: - 
address: v138 
lastLocationAccess: - 
=== Succesors ===
next: v134 
=== Usages ===
a79 v139 v140 v141 
=== Predecessor ===
a126 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?2 guard: - address: v138 lastLocationAccess: - #next: v134  <|@  <|@
f <@~|@floating>@ <|@
tid v141 <|@
d <@d|@=== Debug Properties ===
displacement: 0
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a127 
=== Succesors ===
=== Usages ===
v134 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a127  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v134 <|@
d <@d|@=== Debug Properties ===
deoptReasonAndAction: [null]
deoptSpeculation: [null]
stamp: void
=== Inputs ===
stateBefore: ?2 
object: v141 
=== Succesors ===
next: j128 
=== Usages ===
=== Predecessor ===
a127 >@ <|@
instruction <@NullCheck|@jdk.graal.compiler.nodes.extended.NullCheckNode>@ stateBefore: ?2 object: v141 #next: j128  <|@  <|@
f <@~|@floating>@ <|@
tid j38 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.lang.Thread.currentThread() [bci: -1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:224) [bci: 0]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: i64
=== Inputs ===
=== Succesors ===
=== Usages ===
v135 
=== Predecessor ===
- >@ <|@
instruction <@CurrentJavaThread|@jdk.graal.compiler.hotspot.nodes.CurrentJavaThreadNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v135 <|@
d <@d|@=== Debug Properties ===
displacement: 896
stamp: void*
stride: S1
=== Inputs ===
base: j38 
index: - 
=== Succesors ===
=== Usages ===
j128 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j38 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j128 <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: JavaThread::_vthread
memoryOrder: PLAIN
nodeSourcePosition: at java.lang.Thread.currentThread() [bci: -1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:224) [bci: 0]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v135 
lastLocationAccess: - 
=== Succesors ===
next: a129 
=== Usages ===
v136 
=== Predecessor ===
v134 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v135 lastLocationAccess: - #next: a129  <|@  <|@
f <@~|@floating>@ <|@
tid v136 <|@
d <@d|@=== Debug Properties ===
displacement: 0
stamp: void*
stride: S1
=== Inputs ===
base: j128 
index: - 
=== Succesors ===
=== Usages ===
a129 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j128 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a129 <|@
d <@d|@=== Debug Properties ===
accessStamp: a! java.lang.Thread
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: _vthread OopHandle contents
memoryOrder: PLAIN
nodeSourcePosition: at java.lang.Thread.currentThread() [bci: -1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:224) [bci: 0]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: a! java.lang.Thread
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v136 
lastLocationAccess: - 
=== Succesors ===
next: i82 
=== Usages ===
v56 a90 v125 
=== Predecessor ===
j128 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v136 lastLocationAccess: - #next: i82  <|@  <|@
f <@~|@floating>@ <|@
tid v139 <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a127 
=== Succesors ===
=== Usages ===
i82 i86 v87 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a127  <|@  <|@
f <@~|@floating>@ <|@
tid i17 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 4]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
rawvalue: 0
stableDimension: 0
stamp: i32 [0]
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v23 v89 v89 v89 i82 v48 v64 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i18 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 8]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
v88 ?113 v89 i82 i63 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i82 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
location: ANY_LOCATION
memoryOrder: VOLATILE
nodeSourcePosition: at jdk.internal.misc.Unsafe.compareAndSetInt(Object, long, int, int) [bci: -1]
at java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(AbstractQueuedSynchronizer.java:569) [bci: 9]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:225) [bci: 7]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: i32 [0 - 1] bits:0...0x
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v139 
lastLocationAccess: - 
expectedValue: i17 
newValue: i18 
stateAfter: - 
=== Succesors ===
next: v51 
=== Usages ===
v48 
=== Predecessor ===
a129 >@ <|@
instruction <@LogicCompareAndSwap|@jdk.graal.compiler.nodes.java.LogicCompareAndSwapNode>@ stateBefore: - guard: - address: v139 lastLocationAccess: - expectedValue: i17 newValue: i18 stateAfter: - #next: v51  <|@  <|@
f <@~|@floating>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:225) [bci: 10]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i82 
y: i17 
=== Succesors ===
=== Usages ===
v51 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i82 y: i17  <|@  <|@
f <@~|@floating>@ <|@
tid a79 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 1]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
op: Uncompress
stamp: a# java.util.concurrent.locks.ReentrantLock$NonfairSync
=== Inputs ===
value: a127 
=== Succesors ===
=== Usages ===
v125 ?69 v88 ?21 ?113 v89 ?62 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a127  <|@  <|@
f <@~|@floating>@ <|@
tid v140 <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a127 
=== Succesors ===
=== Usages ===
a130 v91 v123 v125 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a127  <|@  <|@
f <@*|@fixed>@ <|@
tid v51 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:225) [bci: 10]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
profileData: PROFILED designatedSuccessorProbability: 9.525623928367308E-4
stamp: void
=== Inputs ===
condition: v48 
=== Succesors ===
trueSuccessor: v50 
falseSuccessor: v49 
=== Usages ===
=== Predecessor ===
i82 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v48 #trueSuccessor: v50 #falseSuccessor: v49  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v50 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:228) [bci: 20]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: a130 
=== Usages ===
=== Predecessor ===
v51 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a130  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a130 <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.lang.Thread
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: AbstractOwnableSynchronizer.exclusiveOwnerThread
memoryOrder: PLAIN
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread(AbstractOwnableSynchronizer.java:84) [bci: 1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:228) [bci: 21]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: n java.lang.Thread
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v140 
lastLocationAccess: - 
=== Succesors ===
next: v59 
=== Usages ===
a85 
=== Predecessor ===
v50 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v140 lastLocationAccess: - #next: v59  <|@  <|@
f <@~|@floating>@ <|@
tid a85 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread(AbstractOwnableSynchronizer.java:84) [bci: 1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:228) [bci: 21]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
op: Uncompress
stamp: a java.lang.Thread
=== Inputs ===
value: a130 
=== Succesors ===
=== Usages ===
v56 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a130  <|@  <|@
f <@~|@floating>@ <|@
tid v56 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:228) [bci: 25]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: a85 
y: a129 
=== Succesors ===
=== Usages ===
v59 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.ObjectEqualsNode>@ x: a85 y: a129  <|@  <|@
tid ?11 <|@
d <@d|@=== Debug Properties ===
bci: 4
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<InternalLock.lock()>
localsSize: 1
locksSize: 0
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
sourceFile: InternalLock.java
sourceLine: 74
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 
=== Succesors ===
=== Usages ===
?71 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1  <|@  <|@
tid ?71 <|@
d <@d|@=== Debug Properties ===
bci: 4
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<ReentrantLock.lock()>
localsSize: 1
locksSize: 0
sourceFile: ReentrantLock.java
sourceLine: 322
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?11 
=== Succesors ===
=== Usages ===
?21 ?69 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?11  <|@  <|@
f <@*|@fixed>@ <|@
tid v59 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:228) [bci: 25]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
profileData: PROFILED designatedSuccessorProbability: 0.8
stamp: void
=== Inputs ===
condition: v56 
=== Succesors ===
trueSuccessor: v58 
falseSuccessor: v57 
=== Usages ===
=== Predecessor ===
a130 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v56 #trueSuccessor: v58 #falseSuccessor: v57  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v58 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 28]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: i86 
=== Usages ===
=== Predecessor ===
v59 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i86  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i86 <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: AbstractQueuedSynchronizer.state
memoryOrder: VOLATILE
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.getState(AbstractQueuedSynchronizer.java:545) [bci: 1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 29]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v139 
lastLocationAccess: - 
=== Succesors ===
next: v112 
=== Usages ===
i63 ?62 
=== Predecessor ===
v58 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v139 lastLocationAccess: - #next: v112  <|@  <|@
f <@~|@floating>@ <|@
tid i63 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 33]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: i32
=== Inputs ===
x: i86 
y: i18 
=== Succesors ===
=== Usages ===
v64 v87 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i86 y: i18  <|@  <|@
f <@~|@floating>@ <|@
tid v64 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:230) [bci: 36]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i63 
y: i17 
=== Succesors ===
=== Usages ===
v112 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i63 y: i17  <|@  <|@
f <@*|@fixed>@ <|@
tid v112 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:230) [bci: 36]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v64 
=== Succesors ===
trueSuccessor: v110 
falseSuccessor: v111 
=== Usages ===
=== Predecessor ===
i86 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v64 #trueSuccessor: v110 #falseSuccessor: v111  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v110 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:230) [bci: 36]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: v109 
=== Usages ===
=== Predecessor ===
v112 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v109  <|@  <|@
tid ?69 <|@
d <@d|@=== Debug Properties ===
bci: 1
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<ReentrantLock$Sync.lock()>
localsSize: 1
locksSize: 0
sourceFile: ReentrantLock.java
sourceLine: 152
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?71 
values: a79 
=== Succesors ===
=== Usages ===
?62 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?71 values: a79  <|@  <|@
tid ?62 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: iconst_1
code: ResolvedJavaMethodBytecode<ReentrantLock$NonfairSync.initialTryLock()>
localsSize: 3
locksSize: 0
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.getState(AbstractQueuedSynchronizer.java:545) [bci: 1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 29]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
sourceFile: ReentrantLock.java
sourceLine: 229
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?69 
values: i86 a79 
=== Succesors ===
=== Usages ===
v109 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?69 values: i86 a79  <|@  <|@
f <@*|@fixed>@ <|@
tid v109 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:230) [bci: 36]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
reason: UnreachedCode
speculation: {0x0000000000000014[index: 0, len: 20, hash: 0xca2c7124]: UnreachedCode@5[HotSpotMethod<ReentrantLock$NonfairSync.initialTryLock()>, 39]}
stamp: void
=== Inputs ===
stateBefore: ?62 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v110 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?62  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v111 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:232) [bci: 49]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: v87 
=== Usages ===
=== Predecessor ===
v112 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v87  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v87 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: AbstractQueuedSynchronizer.state
location: AbstractQueuedSynchronizer.state
memoryOrder: VOLATILE
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(AbstractQueuedSynchronizer.java:554) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:232) [bci: 51]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v139 
lastLocationAccess: - 
value: i63 
stateAfter: - 
=== Succesors ===
next: v70 
=== Usages ===
=== Predecessor ===
v111 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v139 lastLocationAccess: - value: i63 stateAfter: - #next: v70  <|@  <|@
f <@*|@fixed>@ <|@
tid v70 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 4]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v33 
=== Predecessor ===
v87 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v57 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:235) [bci: 56]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: i20 
=== Usages ===
=== Predecessor ===
v59 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i20  <|@  <|@
tid v88 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Special
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/concurrent/locks/ReentrantLock$NonfairSync;, resolved>, HotSpotResolvedPrimitiveType<int>]
stamp: void
targetMethod: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)>
=== Inputs ===
arguments: a79 i18 
=== Succesors ===
=== Usages ===
i20 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotDirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotDirectCallTargetNode>@ arguments: a79 i18  <|@  <|@
tid ?21 <|@
d <@d|@=== Debug Properties ===
bci: 9
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<ReentrantLock$Sync.lock()>
localsSize: 1
locksSize: 0
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
sourceFile: ReentrantLock.java
sourceLine: 153
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?71 
values: a79 
=== Succesors ===
=== Usages ===
?113 ?114 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?71 values: a79  <|@  <|@
tid ?113 <|@
d <@d|@=== Debug Properties ===
bci: 2
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<AbstractQueuedSynchronizer.acquire(int)>
localsSize: 2
locksSize: 0
sourceFile: AbstractQueuedSynchronizer.java
sourceLine: 989
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?21 
values: a79 i18 
=== Succesors ===
=== Usages ===
i20 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?21 values: a79 i18  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i20 <|@
d <@d|@=== Debug Properties ===
bci: 2
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
polymorphic: false
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Direct#ReentrantLock$NonfairSync.tryAcquire
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v88 
stateDuring: ?113 
=== Succesors ===
next: v26 
=== Usages ===
v23 
=== Predecessor ===
v57 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v88 stateDuring: ?113 #next: v26  <|@  <|@
f <@~|@floating>@ <|@
tid v23 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 5]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i20 
y: i17 
=== Succesors ===
=== Usages ===
v26 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i20 y: i17  <|@  <|@
f <@*|@fixed>@ <|@
tid v26 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 5]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
profileData: UNKNOWN designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v23 
=== Succesors ===
trueSuccessor: v25 
falseSuccessor: v24 
=== Usages ===
=== Predecessor ===
i20 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v23 #trueSuccessor: v25 #falseSuccessor: v24  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v25 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 8]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: i30 
=== Usages ===
=== Predecessor ===
v26 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i30  <|@  <|@
f <@~|@floating>@ <|@
tid a27 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 9]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
rawvalue: null
stableDimension: 0
stamp: a java.lang.Object NULL
stampKind: a java.lang.Object
value: Object[null]
=== Inputs ===
=== Succesors ===
=== Usages ===
v89 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j28 <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 14]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v89 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
tid v89 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Special
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
referencedType: [null]
returnStamp: i32
signature: [HotSpotType<Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;, resolved>, UnresolvedJavaType<Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;>, HotSpotResolvedPrimitiveType<int>, HotSpotResolvedPrimitiveType<boolean>, HotSpotResolvedPrimitiveType<boolean>, HotSpotResolvedPrimitiveType<boolean>, HotSpotResolvedPrimitiveType<long>]
stamp: void
targetMethod: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)>
=== Inputs ===
arguments: a79 a27 i18 i17 i17 i17 j28 
=== Succesors ===
=== Usages ===
i30 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotDirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotDirectCallTargetNode>@ arguments: a79 a27 i18 i17 i17 i17 j28  <|@  <|@
tid ?114 <|@
d <@d|@=== Debug Properties ===
bci: 15
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<AbstractQueuedSynchronizer.acquire(int)>
localsSize: 2
locksSize: 0
sourceFile: AbstractQueuedSynchronizer.java
sourceLine: 990
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?21 
=== Succesors ===
=== Usages ===
i30 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?21  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i30 <|@
d <@d|@=== Debug Properties ===
bci: 15
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
polymorphic: false
stamp: i32
targetMethod: Direct#AbstractQueuedSynchronizer.acquire
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v89 
stateDuring: ?114 
=== Succesors ===
next: v37 
=== Usages ===
=== Predecessor ===
v25 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v89 stateDuring: ?114 #next: v37  <|@  <|@
f <@*|@fixed>@ <|@
tid v37 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:991) [bci: 19]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v33 
=== Predecessor ===
i30 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v24 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:991) [bci: 19]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: v34 
=== Usages ===
=== Predecessor ===
v26 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v34  <|@  <|@
f <@*|@fixed>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:154) [bci: 12]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v33 
=== Predecessor ===
v24 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:226) [bci: 13]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: v123 
=== Usages ===
=== Predecessor ===
v51 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v123  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v123 <|@
d <@d|@=== Debug Properties ===
doLoad: true
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(AbstractOwnableSynchronizer.java:74) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:226) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
precise: true
stamp: void
=== Inputs ===
address: v140 
value: - 
stateBefore: - 
=== Succesors ===
next: v91 
=== Usages ===
=== Predecessor ===
v49 >@ <|@
instruction <@G1PreWriteBarrier|@jdk.graal.compiler.nodes.gc.G1PreWriteBarrierNode>@ address: v140 value: - stateBefore: - #next: v91  <|@  <|@
f <@~|@floating>@ <|@
tid a90 <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(AbstractOwnableSynchronizer.java:74) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:226) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
op: Compress
stamp: n! java.lang.Thread
=== Inputs ===
value: a129 
=== Succesors ===
=== Usages ===
v91 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a129  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v91 <|@
d <@d|@=== Debug Properties ===
barrierType: FIELD
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: AbstractOwnableSynchronizer.exclusiveOwnerThread
location: AbstractOwnableSynchronizer.exclusiveOwnerThread
memoryOrder: PLAIN
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(AbstractOwnableSynchronizer.java:74) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:226) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v140 
lastLocationAccess: - 
value: a90 
stateAfter: - 
=== Succesors ===
next: v125 
=== Usages ===
=== Predecessor ===
v123 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v140 lastLocationAccess: - value: a90 stateAfter: - #next: v125  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v125 <|@
d <@d|@=== Debug Properties ===
alwaysNull: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(AbstractOwnableSynchronizer.java:74) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:226) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
precise: false
stamp: void
=== Inputs ===
address: v140 
value: a129 
object: a79 
=== Succesors ===
next: v32 
=== Usages ===
=== Predecessor ===
v91 >@ <|@
instruction <@G1PostWriteBarrier|@jdk.graal.compiler.nodes.gc.G1PostWriteBarrierNode>@ address: v140 value: a129 object: a79 #next: v32  <|@  <|@
f <@*|@fixed>@ <|@
tid v32 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:154) [bci: 12]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v33 
=== Predecessor ===
v125 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:154) [bci: 12]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v32 v34 v37 v70 
=== Succesors ===
next: v13 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v32 v34 v37 v70 #next: v13  <|@  <|@
f <@*|@fixed>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.misc.InternalLock.lock(InternalLock.java:75) [bci: 7]
stamp: void
=== Inputs ===
memoryMap: - 
result: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v33 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: -  <|@  <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After LIRGeneration"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After LIR generation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v0 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
stamp: void
=== Inputs ===
stateAfter: - 
=== Succesors ===
next: a126 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@StartNode|@jdk.graal.compiler.nodes.StartNode>@ stateAfter: - #next: a126  <|@  <|@
f <@~|@floating>@ <|@
tid a1 <|@
result v0|QWORD[.] <|@
d <@d|@=== Debug Properties ===
index: 0
stamp: a!# jdk.internal.misc.InternalLock
uncheckedStamp: [null]
=== Inputs ===
=== Succesors ===
=== Usages ===
?2 v137 ?11 
=== Predecessor ===
- >@ <|@
instruction <@Parameter|@jdk.graal.compiler.nodes.ParameterNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v137 <|@
result [v0|QWORD[.] + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S1
=== Inputs ===
base: a1 
index: - 
=== Succesors ===
=== Usages ===
a126 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: a1 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a126 <|@
result v1|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.util.concurrent.locks.ReentrantLock
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: InternalLock.lock
memoryOrder: PLAIN
nodeSourcePosition: at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 1]
stamp: n java.util.concurrent.locks.ReentrantLock
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v137 
lastLocationAccess: - 
=== Succesors ===
next: a127 
=== Usages ===
v138 
=== Predecessor ===
v0 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v137 lastLocationAccess: - #next: a127  <|@  <|@
tid ?2 <|@
d <@d|@=== Debug Properties ===
bci: 0
bytecode: aload_0
code: ResolvedJavaMethodBytecode<InternalLock.lock()>
localsSize: 1
locksSize: 0
sourceFile: InternalLock.java
sourceLine: 74
stackSize: 0
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 
=== Succesors ===
=== Usages ===
v134 a127 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1  <|@  <|@
f <@~|@floating>@ <|@
tid v138 <|@
result [v1|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a126 
=== Succesors ===
=== Usages ===
a127 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a126  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a127 <|@
result v2|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n# java.util.concurrent.locks.ReentrantLock$NonfairSync
barrierType: NONE
deoptReasonAndAction: int[-19467|0xffffffffffffb3f5]
deoptSpeculation: long[0|0x0]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: ReentrantLock.sync
memoryOrder: PLAIN
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 1]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: n# java.util.concurrent.locks.ReentrantLock$NonfairSync
usedAsNullCheck: true
=== Inputs ===
stateBefore: ?2 
guard: - 
address: v138 
lastLocationAccess: - 
=== Succesors ===
next: v134 
=== Usages ===
a79 v139 v140 v141 
=== Predecessor ===
a126 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: ?2 guard: - address: v138 lastLocationAccess: - #next: v134  <|@  <|@
f <@~|@floating>@ <|@
tid v141 <|@
result [v2|DWORD[_] * 8] <|@
d <@d|@=== Debug Properties ===
displacement: 0
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a127 
=== Succesors ===
=== Usages ===
v134 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a127  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v134 <|@
d <@d|@=== Debug Properties ===
deoptReasonAndAction: [null]
deoptSpeculation: [null]
stamp: void
=== Inputs ===
stateBefore: ?2 
object: v141 
=== Succesors ===
next: j128 
=== Usages ===
=== Predecessor ===
a127 >@ <|@
instruction <@NullCheck|@jdk.graal.compiler.nodes.extended.NullCheckNode>@ stateBefore: ?2 object: v141 #next: j128  <|@  <|@
f <@~|@floating>@ <|@
tid j38 <|@
result r15|QWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.lang.Thread.currentThread() [bci: -1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:224) [bci: 0]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: i64
=== Inputs ===
=== Succesors ===
=== Usages ===
v135 
=== Predecessor ===
- >@ <|@
instruction <@CurrentJavaThread|@jdk.graal.compiler.hotspot.nodes.CurrentJavaThreadNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid v135 <|@
result [r15|QWORD + 896] <|@
d <@d|@=== Debug Properties ===
displacement: 896
stamp: void*
stride: S1
=== Inputs ===
base: j38 
index: - 
=== Succesors ===
=== Usages ===
j128 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j38 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid j128 <|@
result v3|QWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i64
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: JavaThread::_vthread
memoryOrder: PLAIN
nodeSourcePosition: at java.lang.Thread.currentThread() [bci: -1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:224) [bci: 0]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: i64
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v135 
lastLocationAccess: - 
=== Succesors ===
next: a129 
=== Usages ===
v136 
=== Predecessor ===
v134 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v135 lastLocationAccess: - #next: a129  <|@  <|@
f <@~|@floating>@ <|@
tid v136 <|@
result [v3|QWORD] <|@
d <@d|@=== Debug Properties ===
displacement: 0
stamp: void*
stride: S1
=== Inputs ===
base: j128 
index: - 
=== Succesors ===
=== Usages ===
a129 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: j128 index: -  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a129 <|@
result v4|QWORD[.] <|@
d <@d|@=== Debug Properties ===
accessStamp: a! java.lang.Thread
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: _vthread OopHandle contents
memoryOrder: PLAIN
nodeSourcePosition: at java.lang.Thread.currentThread() [bci: -1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:224) [bci: 0]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: a! java.lang.Thread
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v136 
lastLocationAccess: - 
=== Succesors ===
next: i82 
=== Usages ===
v56 a90 v125 
=== Predecessor ===
j128 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v136 lastLocationAccess: - #next: i82  <|@  <|@
f <@~|@floating>@ <|@
tid v139 <|@
result [v2|DWORD[_] * 8 + 16] <|@
d <@d|@=== Debug Properties ===
displacement: 16
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a127 
=== Succesors ===
=== Usages ===
i82 i86 v87 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a127  <|@  <|@
f <@~|@floating>@ <|@
tid i17 <|@
result int[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 4]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
rawvalue: 0
stableDimension: 0
stamp: i32 [0]
stampKind: i32
value: int[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v23 v89 v89 v89 i82 v48 v64 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid i18 <|@
result int[1|0x1] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 8]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
rawvalue: 1
stableDimension: 0
stamp: i32 [1]
stampKind: i32
value: int[1|0x1]
=== Inputs ===
=== Succesors ===
=== Usages ===
v88 ?113 v89 i82 i63 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i82 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
location: ANY_LOCATION
memoryOrder: VOLATILE
nodeSourcePosition: at jdk.internal.misc.Unsafe.compareAndSetInt(Object, long, int, int) [bci: -1]
at java.util.concurrent.locks.AbstractQueuedSynchronizer.compareAndSetState(AbstractQueuedSynchronizer.java:569) [bci: 9]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:225) [bci: 7]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: i32 [0 - 1] bits:0...0x
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v139 
lastLocationAccess: - 
expectedValue: i17 
newValue: i18 
stateAfter: - 
=== Succesors ===
next: v51 
=== Usages ===
v48 
=== Predecessor ===
a129 >@ <|@
instruction <@LogicCompareAndSwap|@jdk.graal.compiler.nodes.java.LogicCompareAndSwapNode>@ stateBefore: - guard: - address: v139 lastLocationAccess: - expectedValue: i17 newValue: i18 stateAfter: - #next: v51  <|@  <|@
f <@~|@floating>@ <|@
tid v48 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:225) [bci: 10]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i82 
y: i17 
=== Succesors ===
=== Usages ===
v51 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i82 y: i17  <|@  <|@
f <@~|@floating>@ <|@
tid a79 <|@
result v5|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 1]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
op: Uncompress
stamp: a# java.util.concurrent.locks.ReentrantLock$NonfairSync
=== Inputs ===
value: a127 
=== Succesors ===
=== Usages ===
v125 ?69 v88 ?21 ?113 v89 ?62 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a127  <|@  <|@
f <@~|@floating>@ <|@
tid v140 <|@
result [v2|DWORD[_] * 8 + 12] <|@
d <@d|@=== Debug Properties ===
displacement: 12
stamp: void*
stride: S8
=== Inputs ===
base: - 
index: a127 
=== Succesors ===
=== Usages ===
a130 v91 v123 v125 
=== Predecessor ===
- >@ <|@
instruction <@AMD64Address|@jdk.graal.compiler.core.amd64.AMD64AddressNode>@ base: - index: a127  <|@  <|@
f <@*|@fixed>@ <|@
tid v51 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:225) [bci: 10]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
profileData: PROFILED designatedSuccessorProbability: 9.525623928367308E-4
stamp: void
=== Inputs ===
condition: v48 
=== Succesors ===
trueSuccessor: v50 
falseSuccessor: v49 
=== Usages ===
=== Predecessor ===
i82 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v48 #trueSuccessor: v50 #falseSuccessor: v49  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v50 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:228) [bci: 20]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: a130 
=== Usages ===
=== Predecessor ===
v51 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: a130  <|@  <|@
f <@#|@fixed with next>@ <|@
tid a130 <|@
result v7|DWORD[_] <|@
d <@d|@=== Debug Properties ===
accessStamp: n java.lang.Thread
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: AbstractOwnableSynchronizer.exclusiveOwnerThread
memoryOrder: PLAIN
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread(AbstractOwnableSynchronizer.java:84) [bci: 1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:228) [bci: 21]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: n java.lang.Thread
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v140 
lastLocationAccess: - 
=== Succesors ===
next: v59 
=== Usages ===
a85 
=== Predecessor ===
v50 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v140 lastLocationAccess: - #next: v59  <|@  <|@
f <@~|@floating>@ <|@
tid a85 <|@
result v8|QWORD[.] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.getExclusiveOwnerThread(AbstractOwnableSynchronizer.java:84) [bci: 1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:228) [bci: 21]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
op: Uncompress
stamp: a java.lang.Thread
=== Inputs ===
value: a130 
=== Succesors ===
=== Usages ===
v56 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a130  <|@  <|@
f <@~|@floating>@ <|@
tid v56 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:228) [bci: 25]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: a85 
y: a129 
=== Succesors ===
=== Usages ===
v59 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.ObjectEqualsNode>@ x: a85 y: a129  <|@  <|@
tid ?11 <|@
d <@d|@=== Debug Properties ===
bci: 4
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<InternalLock.lock()>
localsSize: 1
locksSize: 0
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
sourceFile: InternalLock.java
sourceLine: 74
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: - 
values: a1 
=== Succesors ===
=== Usages ===
?71 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: - values: a1  <|@  <|@
tid ?71 <|@
d <@d|@=== Debug Properties ===
bci: 4
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<ReentrantLock.lock()>
localsSize: 1
locksSize: 0
sourceFile: ReentrantLock.java
sourceLine: 322
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?11 
=== Succesors ===
=== Usages ===
?21 ?69 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?11  <|@  <|@
f <@*|@fixed>@ <|@
tid v59 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:228) [bci: 25]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
profileData: PROFILED designatedSuccessorProbability: 0.8
stamp: void
=== Inputs ===
condition: v56 
=== Succesors ===
trueSuccessor: v58 
falseSuccessor: v57 
=== Usages ===
=== Predecessor ===
a130 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v56 #trueSuccessor: v58 #falseSuccessor: v57  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v58 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 28]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: i86 
=== Usages ===
=== Predecessor ===
v59 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i86  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i86 <|@
result v9|DWORD <|@
d <@d|@=== Debug Properties ===
accessStamp: i32
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
extendKind: DEFAULT zero? false sign? false extendSize 0
forceFixed: false
location: AbstractQueuedSynchronizer.state
memoryOrder: VOLATILE
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.getState(AbstractQueuedSynchronizer.java:545) [bci: 1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 29]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: i32
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v139 
lastLocationAccess: - 
=== Succesors ===
next: v112 
=== Usages ===
i63 ?62 
=== Predecessor ===
v58 >@ <|@
instruction <@Read|@jdk.graal.compiler.nodes.memory.ReadNode>@ stateBefore: - guard: - address: v139 lastLocationAccess: - #next: v112  <|@  <|@
f <@~|@floating>@ <|@
tid i63 <|@
result v10|DWORD <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 33]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: i32
=== Inputs ===
x: i86 
y: i18 
=== Succesors ===
=== Usages ===
v64 v87 
=== Predecessor ===
- >@ <|@
instruction <@+|@jdk.graal.compiler.nodes.calc.AddNode>@ x: i86 y: i18  <|@  <|@
f <@~|@floating>@ <|@
tid v64 <|@
d <@d|@=== Debug Properties ===
condition: LT
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:230) [bci: 36]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
op: jdk.graal.compiler.nodes.calc.IntegerLessThanNode$LessThanOp@7918c7f8
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i63 
y: i17 
=== Succesors ===
=== Usages ===
v112 
=== Predecessor ===
- >@ <|@
instruction <@<|@jdk.graal.compiler.nodes.calc.IntegerLessThanNode>@ x: i63 y: i17  <|@  <|@
f <@*|@fixed>@ <|@
tid v112 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:230) [bci: 36]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
profileData: INJECTED designatedSuccessorProbability: 0.0
stamp: void
=== Inputs ===
condition: v64 
=== Succesors ===
trueSuccessor: v110 
falseSuccessor: v111 
=== Usages ===
=== Predecessor ===
i86 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v64 #trueSuccessor: v110 #falseSuccessor: v111  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v110 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:230) [bci: 36]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: v109 
=== Usages ===
=== Predecessor ===
v112 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v109  <|@  <|@
tid ?69 <|@
d <@d|@=== Debug Properties ===
bci: 1
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<ReentrantLock$Sync.lock()>
localsSize: 1
locksSize: 0
sourceFile: ReentrantLock.java
sourceLine: 152
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?71 
values: a79 
=== Succesors ===
=== Usages ===
?62 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?71 values: a79  <|@  <|@
tid ?62 <|@
d <@d|@=== Debug Properties ===
bci: 32
bytecode: iconst_1
code: ResolvedJavaMethodBytecode<ReentrantLock$NonfairSync.initialTryLock()>
localsSize: 3
locksSize: 0
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.getState(AbstractQueuedSynchronizer.java:545) [bci: 1]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 29]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
sourceFile: ReentrantLock.java
sourceLine: 229
stackSize: 1
stackState: BeforePop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?69 
values: i86 a79 
=== Succesors ===
=== Usages ===
v109 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?69 values: i86 a79  <|@  <|@
f <@*|@fixed>@ <|@
tid v109 <|@
d <@d|@=== Debug Properties ===
action: InvalidateReprofile
debugId: 0
mayConvertToGuard: true
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:230) [bci: 36]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
reason: UnreachedCode
speculation: {0x0000000000000014[index: 0, len: 20, hash: 0xca2c7124]: UnreachedCode@5[HotSpotMethod<ReentrantLock$NonfairSync.initialTryLock()>, 39]}
stamp: void
=== Inputs ===
stateBefore: ?62 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v110 >@ <|@
instruction <@Deopt|@jdk.graal.compiler.nodes.DeoptimizeNode>@ stateBefore: ?62  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v111 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:232) [bci: 49]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: v87 
=== Usages ===
=== Predecessor ===
v112 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v87  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v87 <|@
d <@d|@=== Debug Properties ===
barrierType: NONE
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: AbstractQueuedSynchronizer.state
location: AbstractQueuedSynchronizer.state
memoryOrder: VOLATILE
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.setState(AbstractQueuedSynchronizer.java:554) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:232) [bci: 51]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v139 
lastLocationAccess: - 
value: i63 
stateAfter: - 
=== Succesors ===
next: v70 
=== Usages ===
=== Predecessor ===
v111 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v139 lastLocationAccess: - value: i63 stateAfter: - #next: v70  <|@  <|@
f <@*|@fixed>@ <|@
tid v70 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 4]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v33 
=== Predecessor ===
v87 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v57 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:235) [bci: 56]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: i20 
=== Usages ===
=== Predecessor ===
v59 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i20  <|@  <|@
tid v88 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Special
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
referencedType: [null]
returnStamp: i32 [0 - 1] bits:0...0x
signature: [HotSpotType<Ljava/util/concurrent/locks/ReentrantLock$NonfairSync;, resolved>, HotSpotResolvedPrimitiveType<int>]
stamp: void
targetMethod: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)>
=== Inputs ===
arguments: a79 i18 
=== Succesors ===
=== Usages ===
i20 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotDirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotDirectCallTargetNode>@ arguments: a79 i18  <|@  <|@
tid ?21 <|@
d <@d|@=== Debug Properties ===
bci: 9
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<ReentrantLock$Sync.lock()>
localsSize: 1
locksSize: 0
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
sourceFile: ReentrantLock.java
sourceLine: 153
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?71 
values: a79 
=== Succesors ===
=== Usages ===
?113 ?114 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?71 values: a79  <|@  <|@
tid ?113 <|@
d <@d|@=== Debug Properties ===
bci: 2
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<AbstractQueuedSynchronizer.acquire(int)>
localsSize: 2
locksSize: 0
sourceFile: AbstractQueuedSynchronizer.java
sourceLine: 989
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?21 
values: a79 i18 
=== Succesors ===
=== Usages ===
i20 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?21 values: a79 i18  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i20 <|@
result v11|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 2
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
polymorphic: false
stamp: i32 [0 - 1] bits:0...0x
targetMethod: Direct#ReentrantLock$NonfairSync.tryAcquire
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v88 
stateDuring: ?113 
=== Succesors ===
next: v26 
=== Usages ===
v23 
=== Predecessor ===
v57 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v88 stateDuring: ?113 #next: v26  <|@  <|@
f <@~|@floating>@ <|@
tid v23 <|@
d <@d|@=== Debug Properties ===
condition: EQ
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 5]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
unorderedIsTrue: false
=== Inputs ===
x: i20 
y: i17 
=== Succesors ===
=== Usages ===
v26 
=== Predecessor ===
- >@ <|@
instruction <@==|@jdk.graal.compiler.nodes.calc.IntegerEqualsNode>@ x: i20 y: i17  <|@  <|@
f <@*|@fixed>@ <|@
tid v26 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 5]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
profileData: UNKNOWN designatedSuccessorProbability: 0.5
stamp: void
=== Inputs ===
condition: v23 
=== Succesors ===
trueSuccessor: v25 
falseSuccessor: v24 
=== Usages ===
=== Predecessor ===
i20 >@ <|@
instruction <@If|@jdk.graal.compiler.nodes.IfNode>@ condition: v23 #trueSuccessor: v25 #falseSuccessor: v24  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v25 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 8]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: i30 
=== Usages ===
=== Predecessor ===
v26 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: i30  <|@  <|@
f <@~|@floating>@ <|@
tid a27 <|@
result Object[null] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 9]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
rawvalue: null
stableDimension: 0
stamp: a java.lang.Object NULL
stampKind: a java.lang.Object
value: Object[null]
=== Inputs ===
=== Succesors ===
=== Usages ===
v89 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
f <@~|@floating>@ <|@
tid j28 <|@
result long[0|0x0] <|@
d <@d|@=== Debug Properties ===
isDefaultStable: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 14]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
rawvalue: 0
stableDimension: 0
stamp: i64 [0]
stampKind: i64
value: long[0|0x0]
=== Inputs ===
=== Succesors ===
=== Usages ===
v89 
=== Predecessor ===
- >@ <|@
instruction <@Constant|@jdk.graal.compiler.nodes.ConstantNode>@  <|@  <|@
tid v89 <|@
d <@d|@=== Debug Properties ===
callType: JavaCall
invokeKind: Special
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
referencedType: [null]
returnStamp: i32
signature: [HotSpotType<Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;, resolved>, UnresolvedJavaType<Ljava/util/concurrent/locks/AbstractQueuedSynchronizer$Node;>, HotSpotResolvedPrimitiveType<int>, HotSpotResolvedPrimitiveType<boolean>, HotSpotResolvedPrimitiveType<boolean>, HotSpotResolvedPrimitiveType<boolean>, HotSpotResolvedPrimitiveType<long>]
stamp: void
targetMethod: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)>
=== Inputs ===
arguments: a79 a27 i18 i17 i17 i17 j28 
=== Succesors ===
=== Usages ===
i30 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotDirectCallTarget|@jdk.graal.compiler.hotspot.nodes.HotSpotDirectCallTargetNode>@ arguments: a79 a27 i18 i17 i17 i17 j28  <|@  <|@
tid ?114 <|@
d <@d|@=== Debug Properties ===
bci: 15
bytecode: invokevirtual
code: ResolvedJavaMethodBytecode<AbstractQueuedSynchronizer.acquire(int)>
localsSize: 2
locksSize: 0
sourceFile: AbstractQueuedSynchronizer.java
sourceLine: 990
stackSize: 0
stackState: AfterPop
validForDeoptimization: true
=== Inputs ===
outerFrameState: ?21 
=== Succesors ===
=== Usages ===
i30 
=== Predecessor ===
- >@ <|@
instruction <@FrameState|@jdk.graal.compiler.nodes.FrameState>@ outerFrameState: ?21  <|@  <|@
f <@#|@fixed with next>@ <|@
tid i30 <|@
result v12|DWORD <|@
d <@d|@=== Debug Properties ===
bci: 15
identity: ANY_LOCATION
inlineControl: Normal
isInOOMETry: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
polymorphic: false
stamp: i32
targetMethod: Direct#AbstractQueuedSynchronizer.acquire
=== Inputs ===
stateAfter: - 
classInit: - 
callTarget: v89 
stateDuring: ?114 
=== Succesors ===
next: v37 
=== Usages ===
=== Predecessor ===
v25 >@ <|@
instruction <@Invoke|@jdk.graal.compiler.nodes.InvokeNode>@ stateAfter: - classInit: - callTarget: v89 stateDuring: ?114 #next: v37  <|@  <|@
f <@*|@fixed>@ <|@
tid v37 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:991) [bci: 19]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v33 
=== Predecessor ===
i30 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v24 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:991) [bci: 19]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: v34 
=== Usages ===
=== Predecessor ===
v26 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v34  <|@  <|@
f <@*|@fixed>@ <|@
tid v34 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:154) [bci: 12]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v33 
=== Predecessor ===
v24 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v49 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:226) [bci: 13]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
next: v123 
=== Usages ===
=== Predecessor ===
v51 >@ <|@
instruction <@Begin|@jdk.graal.compiler.nodes.BeginNode>@ #next: v123  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v123 <|@
d <@d|@=== Debug Properties ===
doLoad: true
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(AbstractOwnableSynchronizer.java:74) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:226) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
precise: true
stamp: void
=== Inputs ===
address: v140 
value: - 
stateBefore: - 
=== Succesors ===
next: v91 
=== Usages ===
=== Predecessor ===
v49 >@ <|@
instruction <@G1PreWriteBarrier|@jdk.graal.compiler.nodes.gc.G1PreWriteBarrierNode>@ address: v140 value: - stateBefore: - #next: v91  <|@  <|@
f <@~|@floating>@ <|@
tid a90 <|@
result v15|DWORD[_] <|@
d <@d|@=== Debug Properties ===
encoding: base: 0 shift: 3
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(AbstractOwnableSynchronizer.java:74) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:226) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
op: Compress
stamp: n! java.lang.Thread
=== Inputs ===
value: a129 
=== Succesors ===
=== Usages ===
v91 
=== Predecessor ===
- >@ <|@
instruction <@HotSpotCompression|@jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode>@ value: a129  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v91 <|@
d <@d|@=== Debug Properties ===
barrierType: FIELD
deoptReasonAndAction: [null]
deoptSpeculation: [null]
killedLocationIdentity: AbstractOwnableSynchronizer.exclusiveOwnerThread
location: AbstractOwnableSynchronizer.exclusiveOwnerThread
memoryOrder: PLAIN
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(AbstractOwnableSynchronizer.java:74) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:226) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
usedAsNullCheck: false
=== Inputs ===
stateBefore: - 
guard: - 
address: v140 
lastLocationAccess: - 
value: a90 
stateAfter: - 
=== Succesors ===
next: v125 
=== Usages ===
=== Predecessor ===
v123 >@ <|@
instruction <@Write|@jdk.graal.compiler.nodes.memory.WriteNode>@ stateBefore: - guard: - address: v140 lastLocationAccess: - value: a90 stateAfter: - #next: v125  <|@  <|@
f <@#|@fixed with next>@ <|@
tid v125 <|@
d <@d|@=== Debug Properties ===
alwaysNull: false
nodeSourcePosition: at java.util.concurrent.locks.AbstractOwnableSynchronizer.setExclusiveOwnerThread(AbstractOwnableSynchronizer.java:74) [bci: 2]
at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:226) [bci: 15]
at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
precise: false
stamp: void
=== Inputs ===
address: v140 
value: a129 
object: a79 
=== Succesors ===
next: v32 
=== Usages ===
=== Predecessor ===
v91 >@ <|@
instruction <@G1PostWriteBarrier|@jdk.graal.compiler.nodes.gc.G1PostWriteBarrierNode>@ address: v140 value: a129 object: a79 #next: v32  <|@  <|@
f <@*|@fixed>@ <|@
tid v32 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:154) [bci: 12]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
=== Succesors ===
=== Usages ===
v33 
=== Predecessor ===
v125 >@ <|@
instruction <@EndNode|@jdk.graal.compiler.nodes.EndNode>@  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      HIR
f <@#|@fixed with next>@ <|@
tid v33 <|@
d <@d|@=== Debug Properties ===
hasSpeculationFence: false
nodeSourcePosition: at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:154) [bci: 12]
at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
stamp: void
=== Inputs ===
stateAfter: - 
ends: v32 v34 v37 v70 
=== Succesors ===
next: v13 
=== Usages ===
=== Predecessor ===
- >@ <|@
instruction <@Merge|@jdk.graal.compiler.nodes.MergeNode>@ stateAfter: - ends: v32 v34 v37 v70 #next: v13  <|@  <|@
f <@*|@fixed>@ <|@
tid v13 <|@
d <@d|@=== Debug Properties ===
nodeSourcePosition: at jdk.internal.misc.InternalLock.lock(InternalLock.java:75) [bci: 7]
stamp: void
=== Inputs ===
memoryMap: - 
result: - 
=== Succesors ===
=== Usages ===
=== Predecessor ===
v33 >@ <|@
instruction <@Return|@jdk.graal.compiler.nodes.ReturnNode>@ memoryMap: - result: -  <|@  <|@
    end_IR
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
end_cfg
begin_cfg
  name "After ConstantLoadOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After SaveCalleeSaveRegisters"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After PreAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After MarkBasePointers"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   -1  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   -1  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   -1  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   -1  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   -1  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   -1  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   -1  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   -1  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   -1  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   -1  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   -1  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   -1  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   -1  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   -1  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   -1  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "Before register allocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   14  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   16  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   18  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   20  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   24  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   26  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   28  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   30  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   32  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   34  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   36  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   38  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   48  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   56  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   72  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   76  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   78  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   88  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   90  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   92  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   94  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   96  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   98  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  100  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr  102  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanLifetimeAnalysis"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   14  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   16  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   18  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   20  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   24  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   26  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   28  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   30  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   32  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   34  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   36  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   38  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   48  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   56  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   72  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   76  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   78  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   88  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   90  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   92  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   94  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   96  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   98  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  100  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr  102  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_intervals
  name "Before register allocation"
  rax|d fixed "[rax|d]" rax|d -1 [0, 1[[20, 25[[74, 76[[100, 102[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- -1 [0, 1[[74, 75[[90, 101[ "NoSpillStore"
  rdx|- fixed "[rdx|-]" rdx|- -1 [0, 1[[72, 75[[88, 101[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 2[[74, 75[[100, 101[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v5|q [0, 6[[70, 75[[86, 101[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[74, 75[[96, 101[ "NoSpillStore"
  r8|- fixed "[r8|-]" r8|- -1 [0, 1[[74, 75[[92, 101[ "NoSpillStore"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[74, 75[[94, 101[ "NoSpillStore"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  v0|q QWORD "[v0|q]" v0|q rsi|- [6, 28[[44, 60[[68, 80[[84, 101[[106, 113[6 MustHaveRegister 8 MustHaveRegister  "NoSpillStore"
  v1|d DWORD "[v1|d]" v1|d -1 [8, 10[8 MustHaveRegister 10 MustHaveRegister  "NoSpillStore"
  v2|d DWORD "[v2|d]" v2|d -1 [10, 34[[44, 62[10 MustHaveRegister 12 MustHaveRegister 18 MustHaveRegister 24 MustHaveRegister 30 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister 54 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v3|q QWORD "[v3|q]" v3|q -1 [14, 16[14 MustHaveRegister 16 MustHaveRegister  "NoSpillStore"
  v4|q QWORD "[v4|q]" v4|q -1 [16, 37[[44, 50[16 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v5|q QWORD "[v5|q]" v5|q v2|d [18, 37[[44, 60[[68, 80[[84, 101[[106, 113[18 MustHaveRegister 36 MustHaveRegister 70 ShouldHaveRegister 86 ShouldHaveRegister  "NoSpillStore"
  v6|d DWORD "[v6|d]" v6|d -1 [22, 24[22 MustHaveRegister 24 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[v7|d]" v7|d -1 [46, 48[46 MustHaveRegister 48 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[v8|q]" v8|q v7|d [48, 50[48 MustHaveRegister 50 ShouldHaveRegister  "NoSpillStore"
  v9|d DWORD "[v9|d]" v9|d -1 [54, 60[[106, 113[54 MustHaveRegister 56 ShouldHaveRegister  "NoSpillStore"
  v10|d DWORD "[v10|d]" v10|d v9|d [56, 62[56 MustHaveRegister 58 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[v11|d]" v11|d rax|d [76, 78[76 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[v12|d]" v12|d rax|d [102, 103[102 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[v13|q]" v13|q -1 [30, 31[30 MustHaveRegister  "NoDefinitionFound"
  v14|q QWORD "[v14|q]" v14|q -1 [30, 31[30 MustHaveRegister  "NoDefinitionFound"
  v15|d DWORD "[v15|d]" v15|d v4|q [32, 34[32 MustHaveRegister 34 MustHaveRegister  "NoSpillStore"
  v16|q QWORD "[v16|q]" v16|q -1 [36, 37[36 MustHaveRegister  "NoDefinitionFound"
  v17|q QWORD "[v17|q]" v17|q -1 [36, 37[36 MustHaveRegister  "NoDefinitionFound"
end_intervals
begin_intervals
  name "After register allocation"
  rax|d fixed "[rax|d]" rax|d -1 [0, 1[[20, 25[[74, 76[[100, 102[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- -1 [0, 1[[74, 75[[90, 101[ "NoSpillStore"
  rdx|- fixed "[rdx|-]" rdx|- -1 [0, 1[[72, 75[[88, 101[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 2[[74, 75[[100, 101[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v5|q [0, 6[[70, 75[[86, 101[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[74, 75[[96, 101[ "NoSpillStore"
  r8|- fixed "[r8|-]" r8|- -1 [0, 1[[74, 75[[92, 101[ "NoSpillStore"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[74, 75[[94, 101[ "NoSpillStore"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [6, 28[[44, 60[6 MustHaveRegister 8 MustHaveRegister  "OneSpillStore"
  v1|d DWORD "[rax|d]" v1|d -1 [8, 10[8 MustHaveRegister 10 MustHaveRegister  "NoSpillStore"
  v2|d DWORD "[rdx|d]" v2|d -1 [10, 34[[44, 62[10 MustHaveRegister 12 MustHaveRegister 18 MustHaveRegister 24 MustHaveRegister 30 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister 54 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v3|q QWORD "[rax|q]" v3|q -1 [14, 16[14 MustHaveRegister 16 MustHaveRegister  "NoSpillStore"
  v4|q QWORD "[r10|q]" v4|q -1 [16, 37[[44, 50[16 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v5|q QWORD "[r11|q]" v5|q v2|d [18, 37[[44, 60[[68, 73[18 MustHaveRegister 36 MustHaveRegister 70 ShouldHaveRegister  "OneSpillStore"
  v6|d DWORD "[r8|d]" v6|d -1 [22, 24[22 MustHaveRegister 24 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[r8|d]" v7|d -1 [46, 48[46 MustHaveRegister 48 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[r8|q]" v8|q v7|d [48, 50[48 MustHaveRegister 50 ShouldHaveRegister  "NoSpillStore"
  v9|d DWORD "[r10|d]" v9|d -1 [54, 60[[106, 113[54 MustHaveRegister 56 ShouldHaveRegister  "NoSpillStore"
  v10|d DWORD "[r8|d]" v10|d v9|d [56, 62[56 MustHaveRegister 58 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[rax|d]" v11|d rax|d [76, 78[76 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rax|d]" v12|d rax|d [102, 103[102 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[rsi|q]" v13|q -1 [30, 31[30 MustHaveRegister  "NoDefinitionFound"
  v14|q QWORD "[r8|q]" v14|q -1 [30, 31[30 MustHaveRegister  "NoDefinitionFound"
  v15|d DWORD "[rsi|d]" v15|d v4|q [32, 34[32 MustHaveRegister 34 MustHaveRegister  "NoSpillStore"
  v16|q QWORD "[rsi|q]" v16|q -1 [36, 37[36 MustHaveRegister  "NoDefinitionFound"
  v17|q QWORD "[rdx|q]" v17|q -1 [36, 37[36 MustHaveRegister  "NoDefinitionFound"
  v18|q QWORD "[vstack:1|q]" v0|q v0|q [68, 73[ "OneSpillStore"
  v19|q QWORD "[vstack:0|q]" v5|q v5|q [73, 80[[84, 101[86 ShouldHaveRegister  "OneSpillStore"
  v20|q QWORD "[vstack:1|q]" v0|q v0|q [73, 80[[84, 101[ "OneSpillStore"
  v21|q QWORD "[r11|q]" v5|q v5|q [106, 113[ "OneSpillStore"
  v22|q QWORD "[rsi|q]" v0|q v0|q [106, 113[ "OneSpillStore"
end_intervals
begin_cfg
  name "After LinearScanRegisterAllocation"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   14  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   16  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   18  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   20  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   24  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   26  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   28  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   30  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   32  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   34  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   36  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   38  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   48  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   56  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   72  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = STACKMOVE (input: v18|QWORD[.], ~backupSlot: vstack:2|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v19|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   76  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   78  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   88  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   90  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   92  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   94  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   96  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   98  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  100  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr  102  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_intervals
  name "After optimize spill position"
  rax|d fixed "[rax|d]" rax|d -1 [0, 1[[20, 25[[74, 76[[100, 102[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- -1 [0, 1[[74, 75[[90, 101[ "NoSpillStore"
  rdx|- fixed "[rdx|-]" rdx|- -1 [0, 1[[72, 75[[88, 101[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 2[[74, 75[[100, 101[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v5|q [0, 6[[70, 75[[86, 101[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[74, 75[[96, 101[ "NoSpillStore"
  r8|- fixed "[r8|-]" r8|- -1 [0, 1[[74, 75[[92, 101[ "NoSpillStore"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[74, 75[[94, 101[ "NoSpillStore"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [6, 28[[44, 60[6 MustHaveRegister 8 MustHaveRegister  "OneSpillStore"
  v1|d DWORD "[rax|d]" v1|d -1 [8, 10[8 MustHaveRegister 10 MustHaveRegister  "NoSpillStore"
  v2|d DWORD "[rdx|d]" v2|d -1 [10, 34[[44, 62[10 MustHaveRegister 12 MustHaveRegister 18 MustHaveRegister 24 MustHaveRegister 30 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister 54 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v3|q QWORD "[rax|q]" v3|q -1 [14, 16[14 MustHaveRegister 16 MustHaveRegister  "NoSpillStore"
  v4|q QWORD "[r10|q]" v4|q -1 [16, 37[[44, 50[16 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v5|q QWORD "[r11|q]" v5|q v2|d [18, 37[[44, 60[[68, 73[18 MustHaveRegister 36 MustHaveRegister 70 ShouldHaveRegister  "OneSpillStore"
  v6|d DWORD "[r8|d]" v6|d -1 [22, 24[22 MustHaveRegister 24 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[r8|d]" v7|d -1 [46, 48[46 MustHaveRegister 48 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[r8|q]" v8|q v7|d [48, 50[48 MustHaveRegister 50 ShouldHaveRegister  "NoSpillStore"
  v9|d DWORD "[r10|d]" v9|d -1 [54, 60[[106, 113[54 MustHaveRegister 56 ShouldHaveRegister  "NoSpillStore"
  v10|d DWORD "[r8|d]" v10|d v9|d [56, 62[56 MustHaveRegister 58 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[rax|d]" v11|d rax|d [76, 78[76 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rax|d]" v12|d rax|d [102, 103[102 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[rsi|q]" v13|q -1 [30, 31[30 MustHaveRegister  "NoDefinitionFound"
  v14|q QWORD "[r8|q]" v14|q -1 [30, 31[30 MustHaveRegister  "NoDefinitionFound"
  v15|d DWORD "[rsi|d]" v15|d v4|q [32, 34[32 MustHaveRegister 34 MustHaveRegister  "NoSpillStore"
  v16|q QWORD "[rsi|q]" v16|q -1 [36, 37[36 MustHaveRegister  "NoDefinitionFound"
  v17|q QWORD "[rdx|q]" v17|q -1 [36, 37[36 MustHaveRegister  "NoDefinitionFound"
  v18|q QWORD "[vstack:1|q]" v0|q v0|q [68, 73[ "OneSpillStore"
  v19|q QWORD "[vstack:0|q]" v5|q v5|q [73, 80[[84, 101[86 ShouldHaveRegister  "OneSpillStore"
  v20|q QWORD "[vstack:1|q]" v0|q v0|q [73, 80[[84, 101[ "OneSpillStore"
  v21|q QWORD "[r11|q]" v5|q v5|q [106, 113[ "OneSpillStore"
  v22|q QWORD "[rsi|q]" v0|q v0|q [106, 113[ "OneSpillStore"
end_intervals
begin_cfg
  name "After LinearScanOptimizeSpillPosition"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   14  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   16  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   18  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   20  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   24  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   26  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   28  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   30  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   32  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   34  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   36  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   38  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   48  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   56  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   70  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   72  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = STACKMOVE (input: v18|QWORD[.], ~backupSlot: vstack:2|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v19|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   76  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   78  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   88  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   90  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   92  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   94  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   96  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   98  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  100  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr  102  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_intervals
  name "After resolve data flow"
  rax|d fixed "[rax|d]" rax|d -1 [0, 1[[20, 25[[74, 76[[100, 102[ "NoOptimization"
  rcx|- fixed "[rcx|-]" rcx|- -1 [0, 1[[74, 75[[90, 101[ "NoSpillStore"
  rdx|- fixed "[rdx|-]" rdx|- -1 [0, 1[[72, 75[[88, 101[ "NoOptimization"
  rbx|- fixed "[rbx|-]" rbx|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  rbp|- fixed "[rbp|-]" rbp|- -1 [0, 2[[74, 75[[100, 101[ "NoSpillStore"
  rsi|- fixed "[rsi|-]" rsi|- v5|q [0, 6[[70, 75[[86, 101[ "NoOptimization"
  rdi|- fixed "[rdi|-]" rdi|- -1 [0, 1[[74, 75[[96, 101[ "NoSpillStore"
  r8|- fixed "[r8|-]" r8|- -1 [0, 1[[74, 75[[92, 101[ "NoSpillStore"
  r9|- fixed "[r9|-]" r9|- -1 [0, 1[[74, 75[[94, 101[ "NoSpillStore"
  r10|- fixed "[r10|-]" r10|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r11|- fixed "[r11|-]" r11|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r13|- fixed "[r13|-]" r13|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  r14|- fixed "[r14|-]" r14|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm0|- fixed "[xmm0|-]" xmm0|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm1|- fixed "[xmm1|-]" xmm1|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm2|- fixed "[xmm2|-]" xmm2|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm3|- fixed "[xmm3|-]" xmm3|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm4|- fixed "[xmm4|-]" xmm4|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm5|- fixed "[xmm5|-]" xmm5|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm6|- fixed "[xmm6|-]" xmm6|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm7|- fixed "[xmm7|-]" xmm7|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm8|- fixed "[xmm8|-]" xmm8|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm9|- fixed "[xmm9|-]" xmm9|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm10|- fixed "[xmm10|-]" xmm10|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm11|- fixed "[xmm11|-]" xmm11|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm12|- fixed "[xmm12|-]" xmm12|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm13|- fixed "[xmm13|-]" xmm13|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm14|- fixed "[xmm14|-]" xmm14|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  xmm15|- fixed "[xmm15|-]" xmm15|- -1 [0, 1[[74, 75[[100, 101[ "NoDefinitionFound"
  v0|q QWORD "[rsi|q]" v0|q rsi|- [6, 28[[44, 60[6 MustHaveRegister 8 MustHaveRegister  "OneSpillStore"
  v1|d DWORD "[rax|d]" v1|d -1 [8, 10[8 MustHaveRegister 10 MustHaveRegister  "NoSpillStore"
  v2|d DWORD "[rdx|d]" v2|d -1 [10, 34[[44, 62[10 MustHaveRegister 12 MustHaveRegister 18 MustHaveRegister 24 MustHaveRegister 30 MustHaveRegister 34 MustHaveRegister 46 MustHaveRegister 54 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v3|q QWORD "[rax|q]" v3|q -1 [14, 16[14 MustHaveRegister 16 MustHaveRegister  "NoSpillStore"
  v4|q QWORD "[r10|q]" v4|q -1 [16, 37[[44, 50[16 MustHaveRegister 32 MustHaveRegister 36 MustHaveRegister 50 MustHaveRegister  "NoSpillStore"
  v5|q QWORD "[r11|q]" v5|q v2|d [18, 37[[44, 60[[68, 73[18 MustHaveRegister 36 MustHaveRegister 70 ShouldHaveRegister  "OneSpillStore"
  v6|d DWORD "[r8|d]" v6|d -1 [22, 24[22 MustHaveRegister 24 MustHaveRegister  "NoSpillStore"
  v7|d DWORD "[r8|d]" v7|d -1 [46, 48[46 MustHaveRegister 48 MustHaveRegister  "NoSpillStore"
  v8|q QWORD "[r8|q]" v8|q v7|d [48, 50[48 MustHaveRegister 50 ShouldHaveRegister  "NoSpillStore"
  v9|d DWORD "[r10|d]" v9|d -1 [54, 60[[106, 113[54 MustHaveRegister 56 ShouldHaveRegister  "NoSpillStore"
  v10|d DWORD "[r8|d]" v10|d v9|d [56, 62[56 MustHaveRegister 58 MustHaveRegister 62 MustHaveRegister  "NoSpillStore"
  v11|d DWORD "[rax|d]" v11|d rax|d [76, 78[76 MustHaveRegister 78 MustHaveRegister  "NoSpillStore"
  v12|d DWORD "[rax|d]" v12|d rax|d [102, 103[102 MustHaveRegister  "NoSpillStore"
  v13|q QWORD "[rsi|q]" v13|q -1 [30, 31[30 MustHaveRegister  "NoDefinitionFound"
  v14|q QWORD "[r8|q]" v14|q -1 [30, 31[30 MustHaveRegister  "NoDefinitionFound"
  v15|d DWORD "[rsi|d]" v15|d v4|q [32, 34[32 MustHaveRegister 34 MustHaveRegister  "NoSpillStore"
  v16|q QWORD "[rsi|q]" v16|q -1 [36, 37[36 MustHaveRegister  "NoDefinitionFound"
  v17|q QWORD "[rdx|q]" v17|q -1 [36, 37[36 MustHaveRegister  "NoDefinitionFound"
  v18|q QWORD "[vstack:1|q]" v0|q v0|q [68, 73[ "OneSpillStore"
  v19|q QWORD "[vstack:0|q]" v5|q v5|q [73, 80[[84, 101[86 ShouldHaveRegister  "OneSpillStore"
  v20|q QWORD "[vstack:1|q]" v0|q v0|q [73, 80[[84, 101[ "OneSpillStore"
  v21|q QWORD "[r11|q]" v5|q v5|q [106, 113[ "OneSpillStore"
  v22|q QWORD "[rsi|q]" v0|q v0|q [106, 113[ "OneSpillStore"
end_intervals
begin_cfg
  name "After SSALinearScanResolveDataFlow"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   14  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   16  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   18  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   20  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   24  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   26  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   28  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   30  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   32  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   34  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   36  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   38  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   48  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   56  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v18|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   72  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = STACKMOVE (input: v18|QWORD[.], ~backupSlot: vstack:2|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v19|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   76  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   78  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   88  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   90  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   92  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   94  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   96  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   98  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  100  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr  102  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After SSALinearScanEliminateSpillMove"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction v0|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD <|@ <|@
      nr    8  <|@ instruction v1|DWORD[_] = MOV input: [v0|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction v2|DWORD[_] = MOV input: [v1|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: v0|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [v2|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   14  <|@ instruction v3|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   16  <|@ instruction v4|QWORD[.] = MOV input: [v3|QWORD] size: QWORD <|@ <|@
      nr   18  <|@ instruction v5|QWORD[.] = UNCOMPRESSPOINTER (input: v2|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   20  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   22  <|@ instruction v6|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   24  <|@ instruction rax|DWORD = CAS (address: [v2|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: v6|DWORD) accessKind: DWORD <|@ <|@
      nr   26  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   28  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   30  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [v2|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: v13|QWORD, temp2: v14|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   32  <|@ instruction v15|DWORD[_] = COMPRESSPOINTER (input: v4|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   34  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 12], y: v15|DWORD[_]) size: DWORD <|@ <|@
      nr   36  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: v5|QWORD[.], ~newValue: v4|QWORD[.]) {temp: v16|QWORD, temp2: v17|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   38  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction v7|DWORD[_] = MOV input: [v2|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   48  <|@ instruction v8|QWORD[.] = UNCOMPRESSPOINTER (input: v7|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: v4|QWORD[.], y: v8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction v9|DWORD = MOV input: [v2|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   56  <|@ instruction v10|DWORD = INC value: v9|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction TESTBRANCH (x: v10|DWORD, y: v10|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction MOV (x: [v2|DWORD[_] * 8 + 16], y: v10|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction v18|QWORD[.] = MOVE input: v0|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   72  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction v20|QWORD[.] = STACKMOVE (input: v18|QWORD[.], ~backupSlot: vstack:2|QWORD) scratch: rax // MoveResolver resolve mapping <|@ <|@
      nr   -1  <|@ instruction v19|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: v5|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   76  <|@ instruction v11|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr   78  <|@ instruction TESTBRANCH (x: v11|DWORD, y: v11|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction rsi|QWORD[.] = MOVE input: v5|QWORD[.] moveKind: QWORD <|@ <|@
      nr   88  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   90  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   92  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   94  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   96  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   98  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  100  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr  102  <|@ instruction v12|DWORD = MOVE input: rax|DWORD moveKind: DWORD <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: v9|DWORD 
locals: v5|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: v5|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: v0|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After LinearScanAssignLocations"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   14  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   16  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   18  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   20  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   22  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   24  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   26  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   28  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   30  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   32  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   34  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr   36  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   38  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   48  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   56  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:1|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   72  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction vstack:0|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: vstack:0|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: vstack:0|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: vstack:1|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   78  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr   88  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   90  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   92  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   94  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   96  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   98  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  100  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: vstack:0|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: vstack:1|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After LinearScan"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    8  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   12  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   14  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   16  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   18  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   20  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   22  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   24  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   26  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   28  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   30  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   32  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   34  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr   36  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr   38  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr   40  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   42  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   44  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   46  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   48  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   50  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   52  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   54  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   56  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   58  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   60  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   62  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   64  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   66  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   68  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   -1  <|@ instruction vstack:1|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   70  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   72  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   -1  <|@ instruction vstack:0|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   74  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: vstack:0|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: vstack:0|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: vstack:1|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   78  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   80  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   82  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   84  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   86  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr   88  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   90  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   92  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   94  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   96  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   98  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr  100  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: vstack:0|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: vstack:1|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr  104  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr  106  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  108  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr  110  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr  112  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After StackSlot numbering"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction vstack:1|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction vstack:0|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: vstack:0|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: vstack:0|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: vstack:1|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: vstack:0|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: vstack:0|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: vstack:1|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_intervals
  name "Before stack slot allocation"
  vstack:0|q QWORD "[vstack:0|q]" vstack:0|q -1 [66, 88[ "NOT_SUPPORTED"
  vstack:1|q QWORD "[vstack:1|q]" vstack:1|q -1 [60, 88[ "NOT_SUPPORTED"
end_intervals
begin_intervals
  name "After stack slot allocation"
  vstack:0|q QWORD "[stack:40|q]" vstack:0|q -1 [66, 88[ "NOT_SUPPORTED"
  vstack:1|q QWORD "[stack:32|q]" vstack:1|q -1 [60, 88[ "NOT_SUPPORTED"
end_intervals
begin_cfg
  name "After LSStackSlotAllocator"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: stack:40|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After AllocationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: stack:40|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After EdgeMoveOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: stack:40|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After RedundantMoveElimination"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: stack:40|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After NullCheckOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B7" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B7" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: stack:40|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B7 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B7"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   92  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   94  <|@ instruction JUMP ~outgoingValues: [] destination: B7 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After ControlFlowOptimizer"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B5" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B9" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: stack:40|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After ComputeCodeEmissionOrder"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B5" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B9" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: stack:40|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After StackMoveOptimization"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B5" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B9" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: stack:40|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After PostAllocationOptimizationStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B5" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B9" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: stack:40|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After LocationMarker"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@reference-map: [rsi:0]
live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@reference-map: [rdx:0, rsi:0]
live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B5" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B9" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@reference-map: [stack:8, stack:16]
live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: stack:40|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@reference-map: [stack:8, stack:16]
live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@reference-map: [rsi:0, r11:0]
live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After FinalCodeAnalysisStage"
  begin_block
    name "B0"
    from_bci -1
    to_bci -1
    predecessors 
    successors "B1" "B8" 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr    0  <|@ instruction [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr    2  <|@ instruction stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD <|@ <|@
      nr    4  <|@ instruction [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD <|@ <|@
      nr    6  <|@ instruction rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD <|@ <|@
      nr    8  <|@ st <@st|@reference-map: [rsi:0]
live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0] <|@ <|@
      nr   10  <|@ st <@st|@reference-map: [rdx:0, rsi:0]
live-base-pointers: []
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0]
locals: rsi|QWORD[.] 
>@ <|@ instruction NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0] <|@ <|@
      nr   12  <|@ instruction rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD <|@ <|@
      nr   14  <|@ instruction r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD <|@ <|@
      nr   16  <|@ instruction r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   18  <|@ instruction rax|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   20  <|@ instruction r8|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   22  <|@ instruction rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD <|@ <|@
      nr   24  <|@ instruction BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B8"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B9" 
    xhandlers
    flags 
    probability 4607173838880742555
    begin_IR
      LIR
      nr   96  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   98  <|@ instruction AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  100  <|@ instruction rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr  102  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD <|@ <|@
      nr  104  <|@ instruction AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e <|@ <|@
      nr  106  <|@ instruction JUMP ~outgoingValues: [] destination: B8 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B9"
    from_bci -1
    to_bci -1
    predecessors "B8" "B5" "B6" "B4" 
    successors 
    xhandlers
    flags 
    probability 4607182418800017408
    begin_IR
      LIR
      nr  108  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr  110  <|@ instruction RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B1"
    from_bci -1
    to_bci -1
    predecessors "B0" 
    successors "B2" "B5" 
    xhandlers
    flags 
    probability 4561925060609021233
    begin_IR
      LIR
      nr   26  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   28  <|@ instruction r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD <|@ <|@
      nr   30  <|@ instruction r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3 <|@ <|@
      nr   32  <|@ instruction CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B2"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B3" "B4" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   34  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   36  <|@ instruction r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD <|@ <|@
      nr   38  <|@ instruction r8|DWORD = INC value: r10|DWORD size: DWORD <|@ <|@
      nr   40  <|@ instruction TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B4"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors "B9" 
    xhandlers
    flags 
    probability 4560167893141531278
    begin_IR
      LIR
      nr   50  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   52  <|@ instruction MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD <|@ <|@
      nr   54  <|@ instruction MEMBAR barriers: 4 <|@ <|@
      nr   56  <|@ instruction JUMP ~outgoingValues: [] destination: B4 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B5"
    from_bci -1
    to_bci -1
    predecessors "B1" 
    successors "B6" "B9" 
    xhandlers
    flags 
    probability 4551160693886790284
    begin_IR
      LIR
      nr   58  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   60  <|@ instruction stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   62  <|@ instruction rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD <|@ <|@
      nr   64  <|@ instruction rdx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   66  <|@ instruction stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD // MoveResolver resolve mapping <|@ <|@
      nr   68  <|@ st <@st|@reference-map: [stack:8, stack:16]
live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2]
locals: stack:40|QWORD[.] int[1|0x1] 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4] <|@ <|@
      nr   70  <|@ instruction TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B9 size: DWORD <|@ <|@
    end_IR
  end_block
  begin_block
    name "B6"
    from_bci -1
    to_bci -1
    predecessors "B5" 
    successors "B9" 
    xhandlers
    flags 
    probability 4546657094259419788
    begin_IR
      LIR
      nr   72  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   74  <|@ instruction rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD <|@ <|@
      nr   76  <|@ instruction rdx|QWORD[.] = MOVE input: Object[null] <|@ <|@
      nr   78  <|@ instruction rcx|DWORD = MOVE input: int[1|0x1] <|@ <|@
      nr   80  <|@ instruction r8|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   82  <|@ instruction r9|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   84  <|@ instruction rdi|DWORD = MOVE input: int[0|0x0] <|@ <|@
      nr   86  <|@ instruction out:0|QWORD = MOVE input: long[0|0x0] <|@ <|@
      nr   88  <|@ st <@st|@reference-map: [stack:8, stack:16]
live-base-pointers: []
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15]
locals: - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9]
locals: stack:40|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: stack:32|QWORD[.] 
>@ <|@ instruction rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4] <|@ <|@
      nr   90  <|@ instruction JUMP ~outgoingValues: [] destination: B6 -> B9 <|@ <|@
    end_IR
  end_block
  begin_block
    name "B3"
    from_bci -1
    to_bci -1
    predecessors "B2" 
    successors 
    xhandlers
    flags 
    probability 2355382605114769408
    begin_IR
      LIR
      nr   42  <|@ instruction [] = LABEL alignment: 0 numbPhis: 0 label: ? <|@ <|@
      nr   44  <|@ instruction MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD <|@ <|@
      nr   46  <|@ instruction MOV x: [r15|QWORD + 1168] y: 20 size: QWORD <|@ <|@
      nr   48  <|@ st <@st|@reference-map: [rsi:0, r11:0]
live-base-pointers: []
java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32]
stack: r10|DWORD 
locals: r11|QWORD[.] - - 
java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1]
locals: r11|QWORD[.] 
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4]
locals: - 
jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4]
locals: rsi|QWORD[.] 
>@ <|@ instruction DEOPT info [bci:32, 1, 4, 4] <|@ <|@
    end_IR
  end_block
end_cfg
begin_bytecodes
     0: aload_0       
     1: getfield      #2          // lock:java.util.concurrent.locks.ReentrantLock
     4: invokevirtual #6          // java.util.concurrent.locks.ReentrantLock.lock:()void
     7: return        
   <|@
end_bytecodes
begin_cfg
  name "After code generation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 0 448b560849bc000000738a7f00004d03d44d33e4493bc20f85e3ffffff89842400c0feff4883ec2841817f20000000000f85ea01000048896c24208b460c8b14c50c0000008504d500000000498b87800300004c8b10448bda49c1e303b80000000041b801000000f0440fb104d5100000000f85e300000041807f40006666900f8432000000448b04d50c00000049c1e0034d85c00f841d000000498b77284883fe000f84870100004883ee0849897728490377384c8906498bf248c1ee038934d50c000000498bf34933f248c1ee150f8442000000498bf348c1ee0948ba0030c0dd8a7f00004803f2803e027429f083042400803e00741fc60600498b57484885d20f84360100004883ea084989574849035758488932488b6c24204883c428493ba7d804000072234883ec08498bff48b90000000000000000ffd14883c40848b90000000000000000ffe1493ba7500400000f87f4000000c3448b04d50c00000049c1e0034d3bd00f8528000000448b14d510000000458bc241ffc066904585c00f8c74000000448904d510000000f083042400eb804889742410498bf3ba010000004c895c240890e8000000000f1f84000000000085c00f8558ffffff488b74240848c7c200000000b90100000041b80000000041b900000000bf0000000048c704240000000090e8000000000f1f840000000000e91bffffff41c78784040000ed92ffff49c7879004000014000000e8000000000f1f84000000000048896c2420e800000000e907fefffff44c890424e800000000e97afefffff448893424e800000000e9cbfefffff4488d0df8feffff49898f680400000f1f4000e99bfdfffff441c78784040000f5b3ffff49c78790040000000000000f1f4000e8000000000f1f840000000000e800000000f4e800000000f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f8ae42335c8, value=140234155417728]:0x7f8acf04e080}  <||@
  Comment 29 [stack overflow check]  <||@
  Comment 29 VERIFIED_ENTRY  <||@
  Comment 40 FRAME_COMPLETE  <||@
  Comment 40 ENTRY_BARRIER_PATCH  <||@
  Comment 54 block B0 null  <||@
  Comment 54 0 [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 54 2 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 59 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD  <||@
  Comment 59 6 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 62 8 rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 62 [rsi:0]at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0, duringCall: false, rethrow: false]
              |0            
     locals:  |rsi|QWORD[.]   <||@
  Comment 62 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 69 10 NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0]  <||@
  Comment 69 [rdx:0, rsi:0]at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0, duringCall: false, rethrow: false]
              |0            
     locals:  |rsi|QWORD[.]   <||@
  Comment 69 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 76 12 rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD  <||@
  Comment 83 14 r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD  <||@
  Comment 86 16 r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3  <||@
  Comment 93 18 rax|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 98 20 r8|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 104 22 rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD  <||@
  Comment 114 24 BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8  <||@
  Comment 120 block B8 null  <||@
  Comment 120 96 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 120 98 AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e  <||@
  Comment 184 100 rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3  <||@
  Comment 191 102 MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD  <||@
  Comment 198 104 AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e  <||@
  Comment 280 106 JUMP ~outgoingValues: [] destination: B8 -> B9  <||@
  Comment 280 block B9 null  <||@
  Comment 280 108 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 280 110 RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07  <||@
  Comment 305 {HotSpotForeignCallDescriptor{enableStackReservedZoneEntry(Word)void, callSideEffect=NO_SIDE_EFFECT, canDeoptimize=false, isGuaranteedSafepoint=false, killedLocations=[], transition=LEAF_NO_VZERO}@0x7f8ae3b85d50:CallingConvention[rdi|QWORD]:CallingConvention[rdi|QWORD]; temps=rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,rdi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL}  <||@
  Comment 321 {Field[name=StubRoutines::_throw_delayed_StackOverflowError_entry, type=address, offset=0, address=0x7f8ae4250498, value=140234155123328]:0x7f8acf006280}  <||@
  Comment 333 POLL_RETURN_FAR  <||@
  Comment 347 block B1 null  <||@
  Comment 347 26 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 347 28 r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 355 30 r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3  <||@
  Comment 359 32 CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD  <||@
  Comment 368 block B2 null  <||@
  Comment 368 34 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 368 36 r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 376 38 r8|DWORD = INC value: r10|DWORD size: DWORD  <||@
  Comment 382 40 TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD  <||@
  Comment 393 block B4 null  <||@
  Comment 393 50 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 393 52 MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD  <||@
  Comment 401 54 MEMBAR barriers: 4  <||@
  Comment 406 56 JUMP ~outgoingValues: [] destination: B4 -> B9  <||@
  Comment 408 block B5 null  <||@
  Comment 408 58 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 408 60 stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 413 62 rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 416 64 rdx|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 421 66 stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 426 68 rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4]  <||@
  Comment 427 {HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)>}  <||@
  Comment 427 INVOKESPECIAL  <||@
  Comment 432 [stack:8, stack:16]at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2, duringCall: true, rethrow: false]
              |0                  |1          
     locals:  |stack:40|QWORD[.]  |int[1|0x1] 
  at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9, duringCall: true, rethrow: false]
              |0                 
     locals:  |stack:40|QWORD[.] 
  at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4, duringCall: true, rethrow: false]
              |0 
     locals:  |- 
  at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4, duringCall: true, rethrow: false]
              |0                 
     locals:  |stack:32|QWORD[.]   <||@
  Comment 440 70 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B9 size: DWORD  <||@
  Comment 448 block B6 null  <||@
  Comment 448 72 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 448 74 rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD  <||@
  Comment 453 76 rdx|QWORD[.] = MOVE input: Object[null]  <||@
  Comment 460 78 rcx|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 465 80 r8|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 471 82 r9|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 477 84 rdi|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 482 86 out:0|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 490 88 rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4]  <||@
  Comment 491 {HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)>}  <||@
  Comment 491 INVOKESPECIAL  <||@
  Comment 496 [stack:8, stack:16]at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15, duringCall: true, rethrow: false]
              |0  |1 
     locals:  |-  |- 
  at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9, duringCall: true, rethrow: false]
              |0                 
     locals:  |stack:40|QWORD[.] 
  at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4, duringCall: true, rethrow: false]
              |0 
     locals:  |- 
  at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4, duringCall: true, rethrow: false]
              |0                 
     locals:  |stack:32|QWORD[.]   <||@
  Comment 504 90 JUMP ~outgoingValues: [] destination: B6 -> B9  <||@
  Comment 509 block B3 null  <||@
  Comment 509 42 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 509 44 MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD  <||@
  Comment 520 46 MOV x: [r15|QWORD + 1168] y: 20 size: QWORD  <||@
  Comment 531 48 DEOPT info [bci:32, 1, 4, 4]  <||@
  Comment 531 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 536 [rsi:0, r11:0]at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32, duringCall: false, rethrow: false]
              |0             |1  |2 
     locals:  |r11|QWORD[.]  |-  |- 
     stack:   |r10|DWORD     |   |  
  at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1, duringCall: true, rethrow: false]
              |0            
     locals:  |r11|QWORD[.] 
  at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4, duringCall: true, rethrow: false]
              |0 
     locals:  |- 
  at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4, duringCall: true, rethrow: false]
              |0            
     locals:  |rsi|QWORD[.]   <||@
  Comment 549 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f8ae4233598, value=140234155311648]:0x7f8acf034220}  <||@
  Comment 564 {Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]]}  <||@
  Comment 579 {Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD]}  <||@
  Comment 608 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f8ae42335a0, value=140234155446272]:0x7f8acf055000}  <||@
  Comment 640 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 645 [rsi:0]at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0, duringCall: false, rethrow: false]
              |0            
     locals:  |rsi|QWORD[.]   <||@
  Comment 653 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f8acf0b4500:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 653 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 659 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f8ae42335b8, value=140234155441952]:0x7f8acf053f20}  <||@
  Comment 659 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
begin_compilation
  name " HotSpotCompilation-131[jdk.internal.misc.InternalLock.lock()]"
  method "HotSpotCompilation-131[jdk.internal.misc.InternalLock.lock()]"
  date 1740398980166
end_compilation
begin_cfg
  name "After code installation"
end_cfg
begin_nmethod
  <<<HexCodeFile
  Platform AMD64 64  <||@
  HexCode 7f8acf0d38a0 448b560849bc000000738a7f00004d03d44d33e4493bc20f85c3a7f7ff89842400c0feff4883ec2841817f20000000000f85ea01000048896c24208b460c8b14c50c0000008504d500000000498b87800300004c8b10448bda49c1e303b80000000041b801000000f0440fb104d5100000000f85e300000041807f40006666900f8432000000448b04d50c00000049c1e0034d85c00f841d000000498b77284883fe000f84870100004883ee0849897728490377384c8906498bf248c1ee038934d50c000000498bf34933f248c1ee150f8442000000498bf348c1ee0948ba0030c0dd8a7f00004803f2803e027429f083042400803e00741fc60600498b57484885d20f84360100004883ea084989574849035758488932488b6c24204883c428493ba7d804000072234883ec08498bff48b9505db8e38a7f0000ffd14883c40848b9806200cf8a7f0000ffe1493ba7500400000f87f4000000c3448b04d50c00000049c1e0034d3bd00f8528000000448b14d510000000458bc241ffc066904585c00f8c74000000448904d510000000f083042400eb804889742410498bf3ba010000004c895c240890e830a9f7ff0f1f84004003000285c00f8558ffffff488b74240848c7c200000000b90100000041b80000000041b900000000bf0000000048c704240000000090e8f0a8f7ff0f1f840080030003e91bffffff41c78784040000ed92ffff49c7879004000014000000e8c206f8ff0f1f84000000000048896c2420e85607f6ffe907fefffff44c890424e8a7a3feffe97afefffff448893424e818bffeffe9cbfefffff4488d0df8feffff49898f680400000f1f4000e9fb14f8fff441c78784040000f5b3ffff49c78790040000000000000f1f4000e85506f8ff0f1f840000000000e8ce09fefff4e8e803f8fff4f4f4f4f4f4f4f448bb0000000000000000e9fbffffff48bb0000000000000000e9fbfffffff4f4  <||@
  Comment 0 UNVERIFIED_ENTRY  <||@
  Comment 23 {Field[name=CompilerToVM::Data::SharedRuntime_ic_miss_stub, type=address, offset=0, address=0x7f8ae42335c8, value=140234155417728]:0x7f8acf04e080}  <||@
  Comment 29 [stack overflow check]  <||@
  Comment 29 VERIFIED_ENTRY  <||@
  Comment 40 FRAME_COMPLETE  <||@
  Comment 40 ENTRY_BARRIER_PATCH  <||@
  Comment 54 block B0 null  <||@
  Comment 54 0 [rsi|QWORD[.], rbp|QWORD] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 54 2 stack:16|QWORD = MOVE input: rbp|QWORD moveKind: QWORD  <||@
  Comment 59 4 [] = HOTSPOTLOCKSTACK frameMapBuilder: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotFrameMapBuilder@16f1f0e1 slotKind: QWORD  <||@
  Comment 59 6 rax|DWORD[_] = MOV input: [rsi|QWORD[.] + 12] size: DWORD  <||@
  Comment 62 8 rdx|DWORD[_] = MOV input: [rax|DWORD[_] * 8 + 12] size: DWORD state [bci:0]  <||@
  Comment 62 [rsi:0]at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0, duringCall: false, rethrow: false]
              |0            
     locals:  |rsi|QWORD[.]   <||@
  Comment 62 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 69 10 NULLCHECK address: [rdx|DWORD[_] * 8] state [bci:0]  <||@
  Comment 69 [rdx:0, rsi:0]at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0, duringCall: false, rethrow: false]
              |0            
     locals:  |rsi|QWORD[.]   <||@
  Comment 69 {infopoint: IMPLICIT_EXCEPTION}  <||@
  Comment 76 12 rax|QWORD = MOV input: [r15|QWORD + 896] size: QWORD  <||@
  Comment 83 14 r10|QWORD[.] = MOV input: [rax|QWORD] size: QWORD  <||@
  Comment 86 16 r11|QWORD[.] = UNCOMPRESSPOINTER (input: rdx|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3  <||@
  Comment 93 18 rax|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 98 20 r8|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 104 22 rax|DWORD = CAS (address: [rdx|DWORD[_] * 8 + 16], cmpValue: rax|DWORD, newValue: r8|DWORD) accessKind: DWORD  <||@
  Comment 114 24 BRANCH trueDestinationProbability: 9.525623928367308E-4 condition: != trueDestination: B0 -> B1 falseDestination: B0 -> B8  <||@
  Comment 120 block B8 null  <||@
  Comment 120 96 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 120 98 AMD64G1PREWRITEBARRIER (~address: [rdx|DWORD[_] * 8 + 12], ~expectedObject: -) {temp: rsi|QWORD, temp2: r8|QWORD, temp3: -} nonNull: false callTarget: Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e  <||@
  Comment 184 100 rsi|DWORD[_] = COMPRESSPOINTER (input: r10|QWORD[.], ~baseRegister: r12|ILLEGAL) nonNull: true lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3  <||@
  Comment 191 102 MOV (x: [rdx|DWORD[_] * 8 + 12], y: rsi|DWORD[_]) size: DWORD  <||@
  Comment 198 104 AMD64G1POSTWRITEBARRIER (~address: r11|QWORD[.], ~newValue: r10|QWORD[.]) {temp: rsi|QWORD, temp2: rdx|QWORD} nonNull: true callTarget: Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD] tool: jdk.graal.compiler.hotspot.amd64.g1.AMD64HotSpotG1BarrierSetLIRTool@2f3b7f8e  <||@
  Comment 280 106 JUMP ~outgoingValues: [] destination: B8 -> B9  <||@
  Comment 280 block B9 null  <||@
  Comment 280 108 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 280 110 RETURN (savedRbp: stack:16|QWORD, value: -) isStub: false requiresReservedStackAccessCheck: true thread: r15 scratchForSafepointOnReturn: rcx config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07  <||@
  Comment 305 {HotSpotForeignCallDescriptor{enableStackReservedZoneEntry(Word)void, callSideEffect=NO_SIDE_EFFECT, canDeoptimize=false, isGuaranteedSafepoint=false, killedLocations=[], transition=LEAF_NO_VZERO}@0x7f8ae3b85d50:CallingConvention[rdi|QWORD]:CallingConvention[rdi|QWORD]; temps=rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,rdi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL}  <||@
  Comment 321 {Field[name=StubRoutines::_throw_delayed_StackOverflowError_entry, type=address, offset=0, address=0x7f8ae4250498, value=140234155123328]:0x7f8acf006280}  <||@
  Comment 333 POLL_RETURN_FAR  <||@
  Comment 347 block B1 null  <||@
  Comment 347 26 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 347 28 r8|DWORD[_] = MOV input: [rdx|DWORD[_] * 8 + 12] size: DWORD  <||@
  Comment 355 30 r8|QWORD[.] = UNCOMPRESSPOINTER (input: r8|DWORD[_], ~baseRegister: r12|ILLEGAL) nonNull: false lirKindTool: jdk.graal.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool@7c44d893 encoding: base: 0 shift: 3  <||@
  Comment 359 32 CMPBRANCH (x: r10|QWORD[.], y: r8|QWORD[.]) trueDestinationProbability: 0.8 condition: = trueDestination: B1 -> B2 falseDestination: B1 -> B5 size: QWORD  <||@
  Comment 368 block B2 null  <||@
  Comment 368 34 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 368 36 r10|DWORD = MOV input: [rdx|DWORD[_] * 8 + 16] size: DWORD  <||@
  Comment 376 38 r8|DWORD = INC value: r10|DWORD size: DWORD  <||@
  Comment 382 40 TESTBRANCH (x: r8|DWORD, y: r8|DWORD) trueDestinationProbability: 0.0 condition: < trueDestination: B2 -> B3 falseDestination: B2 -> B4 size: DWORD  <||@
  Comment 393 block B4 null  <||@
  Comment 393 50 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 393 52 MOV (x: [rdx|DWORD[_] * 8 + 16], y: r8|DWORD) size: DWORD  <||@
  Comment 401 54 MEMBAR barriers: 4  <||@
  Comment 406 56 JUMP ~outgoingValues: [] destination: B4 -> B9  <||@
  Comment 408 block B5 null  <||@
  Comment 408 58 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 408 60 stack:32|QWORD[.] = MOVE input: rsi|QWORD[.] moveKind: QWORD  <||@
  Comment 413 62 rsi|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 416 64 rdx|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 421 66 stack:40|QWORD[.] = MOVE input: r11|QWORD[.] moveKind: QWORD  <||@
  Comment 426 68 rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|DWORD] temps: [] callTarget: HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:2, 9, 4, 4]  <||@
  Comment 427 {HotSpotMethod<ReentrantLock$NonfairSync.tryAcquire(int)>}  <||@
  Comment 427 INVOKESPECIAL  <||@
  Comment 432 [stack:8, stack:16]at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:989) [bci: 2, duringCall: true, rethrow: false]
              |0                  |1          
     locals:  |stack:40|QWORD[.]  |int[1|0x1] 
  at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9, duringCall: true, rethrow: false]
              |0                 
     locals:  |stack:40|QWORD[.] 
  at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4, duringCall: true, rethrow: false]
              |0 
     locals:  |- 
  at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4, duringCall: true, rethrow: false]
              |0                 
     locals:  |stack:32|QWORD[.]   <||@
  Comment 440 70 TESTBRANCH (x: rax|DWORD, y: rax|DWORD) trueDestinationProbability: 0.5 condition: = trueDestination: B5 -> B6 falseDestination: B5 -> B9 size: DWORD  <||@
  Comment 448 block B6 null  <||@
  Comment 448 72 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 448 74 rsi|QWORD[.] = MOVE input: stack:40|QWORD[.] moveKind: QWORD  <||@
  Comment 453 76 rdx|QWORD[.] = MOVE input: Object[null]  <||@
  Comment 460 78 rcx|DWORD = MOVE input: int[1|0x1]  <||@
  Comment 465 80 r8|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 471 82 r9|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 477 84 rdi|DWORD = MOVE input: int[0|0x0]  <||@
  Comment 482 86 out:0|QWORD = MOVE input: long[0|0x0]  <||@
  Comment 490 88 rax|DWORD = CALL_DIRECT parameters: [rsi|QWORD[.], rdx|QWORD[.], rcx|DWORD, r8|DWORD, r9|DWORD, rdi|DWORD, out:0|QWORD] temps: [out:0|QWORD] callTarget: HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)> invokeKind: Special config: jdk.graal.compiler.hotspot.GraalHotSpotVMConfig@69188e07 state [bci:15, 9, 4, 4]  <||@
  Comment 491 {HotSpotMethod<AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer$Node, int, boolean, boolean, boolean, long)>}  <||@
  Comment 491 INVOKESPECIAL  <||@
  Comment 496 [stack:8, stack:16]at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:990) [bci: 15, duringCall: true, rethrow: false]
              |0  |1 
     locals:  |-  |- 
  at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:153) [bci: 9, duringCall: true, rethrow: false]
              |0                 
     locals:  |stack:40|QWORD[.] 
  at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4, duringCall: true, rethrow: false]
              |0 
     locals:  |- 
  at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4, duringCall: true, rethrow: false]
              |0                 
     locals:  |stack:32|QWORD[.]   <||@
  Comment 504 90 JUMP ~outgoingValues: [] destination: B6 -> B9  <||@
  Comment 509 block B3 null  <||@
  Comment 509 42 [] = LABEL alignment: 0 numbPhis: 0 label: ?  <||@
  Comment 509 44 MOV x: [r15|QWORD + 1156] y: -27923 size: DWORD  <||@
  Comment 520 46 MOV x: [r15|QWORD + 1168] y: 20 size: QWORD  <||@
  Comment 531 48 DEOPT info [bci:32, 1, 4, 4]  <||@
  Comment 531 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 536 [rsi:0, r11:0]at java.util.concurrent.locks.ReentrantLock$NonfairSync.initialTryLock(ReentrantLock.java:229) [bci: 32, duringCall: false, rethrow: false]
              |0             |1  |2 
     locals:  |r11|QWORD[.]  |-  |- 
     stack:   |r10|DWORD     |   |  
  at java.util.concurrent.locks.ReentrantLock$Sync.lock(ReentrantLock.java:152) [bci: 1, duringCall: true, rethrow: false]
              |0            
     locals:  |r11|QWORD[.] 
  at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:322) [bci: 4, duringCall: true, rethrow: false]
              |0 
     locals:  |- 
  at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 4, duringCall: true, rethrow: false]
              |0            
     locals:  |rsi|QWORD[.]   <||@
  Comment 549 {Field[name=CompilerToVM::Data::nmethod_entry_barrier, type=address, offset=0, address=0x7f8ae4233598, value=140234155311648]:0x7f8acf034220}  <||@
  Comment 564 {Stub<write_barrier_pre-stack-only(Object)void>@0x7f8acf0bde80:CallingConvention[out:0|QWORD[.]]:CallingConvention[in:0|QWORD[.]]}  <||@
  Comment 579 {Stub<write_barrier_post-stack-only(Word)void>@0x7f8acf0bfa00:CallingConvention[out:0|QWORD]:CallingConvention[in:0|QWORD]}  <||@
  Comment 608 {Field[name=CompilerToVM::Data::SharedRuntime_polling_page_return_handler, type=address, offset=0, address=0x7f8ae42335a0, value=140234155446272]:0x7f8acf055000}  <||@
  Comment 640 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_uncommon_trap, type=address, offset=0, address=0x7f8ae42335a8, value=140234155442554]:0x7f8acf05417a}  <||@
  Comment 645 [rsi:0]at jdk.internal.misc.InternalLock.lock(InternalLock.java:74) [bci: 0, duringCall: false, rethrow: false]
              |0            
     locals:  |rsi|QWORD[.]   <||@
  Comment 653 {Stub<ExceptionHandlerStub.exceptionHandler>@0x7f8acf0b4500:CallingConvention[rax|QWORD[.], rdx|QWORD]:CallingConvention[rax|QWORD[.], rdx|QWORD]; temps=rdi|ILLEGAL,xmm14|ILLEGAL,xmm15|ILLEGAL,xmm12|ILLEGAL,xmm13|ILLEGAL,xmm10|ILLEGAL,xmm11|ILLEGAL,xmm7|ILLEGAL,xmm8|ILLEGAL,xmm9|ILLEGAL,xmm0|ILLEGAL,xmm1|ILLEGAL,xmm2|ILLEGAL,xmm3|ILLEGAL,xmm4|ILLEGAL,xmm5|ILLEGAL,xmm6|ILLEGAL,rax|ILLEGAL,rcx|ILLEGAL,rdx|ILLEGAL,rsi|ILLEGAL,r8|ILLEGAL,r9|ILLEGAL,r10|ILLEGAL,r11|ILLEGAL}  <||@
  Comment 653 EXCEPTION_HANDLER_ENTRY  <||@
  Comment 659 {Field[name=CompilerToVM::Data::SharedRuntime_deopt_blob_unpack, type=address, offset=0, address=0x7f8ae42335b8, value=140234155441952]:0x7f8acf053f20}  <||@
  Comment 659 DEOPT_HANDLER_ENTRY  <||@
  HexCodeFile>>> <|@
end_nmethod
